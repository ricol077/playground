; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\usb_prop.o --depend=..\OBJ\usb_prop.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\usb_prop.crf ..\USB\CONFIG\usb_prop.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CustomHID_init PROC
;;;110    *******************************************************************************/
;;;111    void CustomHID_init(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113      /* Update the serial number string descriptor with the data from the unique 
;;;114      ID*/
;;;115         Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;116        
;;;117         pInformation->Current_Configuration = 0;
000006  2000              MOVS     r0,#0
000008  4985              LDR      r1,|L1.544|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  7288              STRB     r0,[r1,#0xa]
;;;118      /* Connect the device */
;;;119         PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;120      /* USB interrupts initialization */
;;;121         _SetISTR(0);               /* clear pending interrupts */
000012  2000              MOVS     r0,#0
000014  4983              LDR      r1,|L1.548|
000016  6008              STR      r0,[r1,#0]
;;;122         wInterrupt_Mask = IMR_MSK;
000018  f44f403f          MOV      r0,#0xbf00
00001c  4982              LDR      r1,|L1.552|
00001e  8008              STRH     r0,[r1,#0]
;;;123        _SetCNTR(wInterrupt_Mask); /* set interrupts mask */
000020  4608              MOV      r0,r1
000022  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000024  4981              LDR      r1,|L1.556|
000026  f8c10c40          STR      r0,[r1,#0xc40]
;;;124    
;;;125         bDeviceState = UNCONNECTED;
00002a  2000              MOVS     r0,#0
00002c  4980              LDR      r1,|L1.560|
00002e  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;126    }
000030  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  CustomHID_Reset PROC
;;;134    *******************************************************************************/
;;;135    void CustomHID_Reset(void)
000032  b510              PUSH     {r4,lr}
;;;136    {
;;;137      /* Set Joystick_DEVICE as not configured */
;;;138         pInformation->Current_Configuration = 0;
000034  2000              MOVS     r0,#0
000036  497a              LDR      r1,|L1.544|
000038  6809              LDR      r1,[r1,#0]  ; pInformation
00003a  7288              STRB     r0,[r1,#0xa]
;;;139         pInformation->Current_Interface = 0;  /*the default Interface*/
00003c  4978              LDR      r1,|L1.544|
00003e  6809              LDR      r1,[r1,#0]  ; pInformation
000040  72c8              STRB     r0,[r1,#0xb]
;;;140      
;;;141      /* Current Feature initialization */
;;;142         pInformation->Current_Feature = CustomHID_ConfigDescriptor[7];
000042  487c              LDR      r0,|L1.564|
000044  79c0              LDRB     r0,[r0,#7]  ; CustomHID_ConfigDescriptor
000046  4976              LDR      r1,|L1.544|
000048  6809              LDR      r1,[r1,#0]  ; pInformation
00004a  7248              STRB     r0,[r1,#9]
;;;143      
;;;144         SetBTABLE(BTABLE_ADDRESS);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       SetBTABLE
;;;145    
;;;146      /* Initialize Endpoint 0 */
;;;147         SetEPType(ENDP0, EP_CONTROL);
000052  f44f7100          MOV      r1,#0x200
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       SetEPType
;;;148         SetEPTxStatus(ENDP0, EP_TX_STALL);
00005c  2110              MOVS     r1,#0x10
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       SetEPTxStatus
;;;149         SetEPRxAddr(ENDP0, ENDP0_RXADDR);
000064  2118              MOVS     r1,#0x18
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       SetEPRxAddr
;;;150         SetEPTxAddr(ENDP0, ENDP0_TXADDR);
00006c  2158              MOVS     r1,#0x58
00006e  2000              MOVS     r0,#0
000070  f7fffffe          BL       SetEPTxAddr
;;;151         Clear_Status_Out(ENDP0);
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       Clear_Status_Out
;;;152         SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
00007a  486f              LDR      r0,|L1.568|
00007c  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       SetEPRxCount
;;;153         SetEPRxValid(ENDP0);
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       SetEPRxValid
;;;154    
;;;155      /* Initialize Endpoint 1 */
;;;156         SetEPType(ENDP1, EP_INTERRUPT);
00008c  f44f61c0          MOV      r1,#0x600
000090  2001              MOVS     r0,#1
000092  f7fffffe          BL       SetEPType
;;;157         SetEPRxAddr(ENDP1, ENDP1_RXADDR);
000096  2198              MOVS     r1,#0x98
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       SetEPRxAddr
;;;158         SetEPRxCount(ENDP1, nReportCnt);
00009e  2140              MOVS     r1,#0x40
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       SetEPRxCount
;;;159         SetEPRxStatus(ENDP1, EP_RX_VALID);
0000a6  f44f5140          MOV      r1,#0x3000
0000aa  2001              MOVS     r0,#1
0000ac  f7fffffe          BL       SetEPRxStatus
;;;160         //SetEPTxStatus(ENDP1, EP_TX_DIS);
;;;161    
;;;162      /* Initialize Endpoint 2 */
;;;163         SetEPType(ENDP2, EP_INTERRUPT);
0000b0  f44f61c0          MOV      r1,#0x600
0000b4  2002              MOVS     r0,#2
0000b6  f7fffffe          BL       SetEPType
;;;164         SetEPTxAddr(ENDP2, ENDP2_TXADDR);
0000ba  f44f718c          MOV      r1,#0x118
0000be  2002              MOVS     r0,#2
0000c0  f7fffffe          BL       SetEPTxAddr
;;;165         SetEPTxCount(ENDP2, nReportCnt);
0000c4  2140              MOVS     r1,#0x40
0000c6  2002              MOVS     r0,#2
0000c8  f7fffffe          BL       SetEPTxCount
;;;166        // SetEPTxStatus(ENDP2, EP_TX_DIS);
;;;167         SetEPTxStatus(ENDP2, EP_TX_NAK);
0000cc  2120              MOVS     r1,#0x20
0000ce  2002              MOVS     r0,#2
0000d0  f7fffffe          BL       SetEPTxStatus
;;;168    
;;;169         bDeviceState = ATTACHED;
0000d4  2001              MOVS     r0,#1
0000d6  4956              LDR      r1,|L1.560|
0000d8  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;170      
;;;171      /* Set this device to response on default address */
;;;172         SetDeviceAddress(0);
0000da  2000              MOVS     r0,#0
0000dc  f7fffffe          BL       SetDeviceAddress
;;;173    }
0000e0  bd10              POP      {r4,pc}
;;;174    /*******************************************************************************
                          ENDP

                  CustomHID_SetConfiguration PROC
;;;181    *******************************************************************************/
;;;182    void CustomHID_SetConfiguration(void)
0000e2  484f              LDR      r0,|L1.544|
;;;183    {
;;;184      if (pInformation->Current_Configuration != 0)
0000e4  6800              LDR      r0,[r0,#0]  ; pInformation
0000e6  7a80              LDRB     r0,[r0,#0xa]
0000e8  b110              CBZ      r0,|L1.240|
;;;185      {
;;;186        /* Device configured */
;;;187        bDeviceState = CONFIGURED;
0000ea  2005              MOVS     r0,#5
0000ec  4950              LDR      r1,|L1.560|
0000ee  6008              STR      r0,[r1,#0]  ; bDeviceState
                  |L1.240|
;;;188        
;;;189        /* Start ADC1 Software Conversion */ 
;;;190    
;;;191    //    ADC_SoftwareStartConvCmd(ADC1, ENABLE);
;;;192    
;;;193      }
;;;194    }
0000f0  4770              BX       lr
;;;195    /*******************************************************************************
                          ENDP

                  CustomHID_SetDeviceAddress PROC
;;;201    *******************************************************************************/
;;;202    void CustomHID_SetDeviceAddress (void)
0000f2  2004              MOVS     r0,#4
;;;203    {
;;;204      bDeviceState = ADDRESSED;
0000f4  494e              LDR      r1,|L1.560|
0000f6  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;205    }
0000f8  4770              BX       lr
;;;206    /*******************************************************************************
                          ENDP

                  CustomHID_Status_In PROC
;;;212    *******************************************************************************/
;;;213    void CustomHID_Status_In(void)
0000fa  4770              BX       lr
;;;214    {
;;;215    }
;;;216    
                          ENDP

                  CustomHID_Status_Out PROC
;;;223    *******************************************************************************/
;;;224    void CustomHID_Status_Out (void)
0000fc  4770              BX       lr
;;;225    {
;;;226    }
;;;227    
                          ENDP

                  CustomHID_GetProtocolValue PROC
;;;406    *******************************************************************************/
;;;407    u8 *CustomHID_GetProtocolValue(u16 Length)
0000fe  4601              MOV      r1,r0
;;;408    {
;;;409      if (Length == 0)
000100  b929              CBNZ     r1,|L1.270|
;;;410      {
;;;411        pInformation->Ctrl_Info.Usb_wLength = 1;
000102  2001              MOVS     r0,#1
000104  4a46              LDR      r2,|L1.544|
000106  6812              LDR      r2,[r2,#0]  ; pInformation
000108  8210              STRH     r0,[r2,#0x10]
;;;412        return NULL;
00010a  2000              MOVS     r0,#0
                  |L1.268|
;;;413      }
;;;414      else
;;;415      {
;;;416        return (u8 *)(&ProtocolValue);
;;;417      }
;;;418    }
00010c  4770              BX       lr
                  |L1.270|
00010e  484b              LDR      r0,|L1.572|
000110  e7fc              B        |L1.268|
;;;419    
                          ENDP

                  CustomHID_GetHIDDescriptor PROC
;;;358    *******************************************************************************/
;;;359    u8 *CustomHID_GetHIDDescriptor(u16 Length)
000112  b510              PUSH     {r4,lr}
;;;360    {
000114  4604              MOV      r4,r0
;;;361      return Standard_GetDescriptorData(Length, &CustomHID_Hid_Descriptor);
000116  494a              LDR      r1,|L1.576|
000118  4620              MOV      r0,r4
00011a  f7fffffe          BL       Standard_GetDescriptorData
;;;362    }
00011e  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  CustomHID_GetReportDescriptor PROC
;;;346    *******************************************************************************/
;;;347    u8 *CustomHID_GetReportDescriptor(u16 Length)
000120  b510              PUSH     {r4,lr}
;;;348    {
000122  4604              MOV      r4,r0
;;;349      return Standard_GetDescriptorData(Length, &CustomHID_Report_Descriptor);
000124  4947              LDR      r1,|L1.580|
000126  4620              MOV      r0,r4
000128  f7fffffe          BL       Standard_GetDescriptorData
;;;350    }
00012c  bd10              POP      {r4,pc}
;;;351    
                          ENDP

                  CustomHID_Data_Setup PROC
;;;234    *******************************************************************************/
;;;235    RESULT CustomHID_Data_Setup(u8 RequestNo)
00012e  b570              PUSH     {r4-r6,lr}
;;;236    {
000130  4605              MOV      r5,r0
;;;237      u8 *(*CopyRoutine)(u16);
;;;238    
;;;239      CopyRoutine = NULL;
000132  2400              MOVS     r4,#0
;;;240    
;;;241      if ((RequestNo == GET_DESCRIPTOR)
000134  2d06              CMP      r5,#6
000136  d11a              BNE      |L1.366|
;;;242          && (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000138  4839              LDR      r0,|L1.544|
00013a  6800              LDR      r0,[r0,#0]  ; pInformation
00013c  7800              LDRB     r0,[r0,#0]
00013e  f000007f          AND      r0,r0,#0x7f
000142  2801              CMP      r0,#1
000144  d113              BNE      |L1.366|
;;;243          && (pInformation->USBwIndex0 == 0))
000146  4836              LDR      r0,|L1.544|
000148  6800              LDR      r0,[r0,#0]  ; pInformation
00014a  7940              LDRB     r0,[r0,#5]
00014c  b978              CBNZ     r0,|L1.366|
;;;244      {
;;;245    
;;;246        if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
00014e  4834              LDR      r0,|L1.544|
000150  6800              LDR      r0,[r0,#0]  ; pInformation
000152  7880              LDRB     r0,[r0,#2]
000154  2822              CMP      r0,#0x22
000156  d102              BNE      |L1.350|
;;;247        {
;;;248          CopyRoutine = CustomHID_GetReportDescriptor;
000158  f2af043b          ADR      r4,CustomHID_GetReportDescriptor + 1
00015c  e012              B        |L1.388|
                  |L1.350|
;;;249        }
;;;250        else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
00015e  4830              LDR      r0,|L1.544|
000160  6800              LDR      r0,[r0,#0]  ; pInformation
000162  7880              LDRB     r0,[r0,#2]
000164  2821              CMP      r0,#0x21
000166  d10d              BNE      |L1.388|
;;;251        {
;;;252          CopyRoutine = CustomHID_GetHIDDescriptor;
000168  f2af0459          ADR      r4,CustomHID_GetHIDDescriptor + 1
00016c  e00a              B        |L1.388|
                  |L1.366|
;;;253        }
;;;254    
;;;255      } /* End of GET_DESCRIPTOR */
;;;256    
;;;257      /*** GET_PROTOCOL ***/
;;;258      else if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
00016e  482c              LDR      r0,|L1.544|
000170  6800              LDR      r0,[r0,#0]  ; pInformation
000172  7800              LDRB     r0,[r0,#0]
000174  f000007f          AND      r0,r0,#0x7f
000178  2821              CMP      r0,#0x21
00017a  d103              BNE      |L1.388|
;;;259               && RequestNo == GET_PROTOCOL)
00017c  2d03              CMP      r5,#3
00017e  d101              BNE      |L1.388|
;;;260      {
;;;261        CopyRoutine = CustomHID_GetProtocolValue;
000180  f2af0485          ADR      r4,CustomHID_GetProtocolValue + 1
                  |L1.388|
;;;262      }
;;;263    
;;;264      if (CopyRoutine == NULL)
000184  b90c              CBNZ     r4,|L1.394|
;;;265      {
;;;266        return USB_UNSUPPORT;
000186  2002              MOVS     r0,#2
                  |L1.392|
;;;267      }
;;;268    
;;;269      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;270      pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;271      (*CopyRoutine)(0);
;;;272      return USB_SUCCESS;
;;;273    }
000188  bd70              POP      {r4-r6,pc}
                  |L1.394|
00018a  4825              LDR      r0,|L1.544|
00018c  6800              LDR      r0,[r0,#0]            ;269  ; pInformation
00018e  6184              STR      r4,[r0,#0x18]         ;269
000190  2100              MOVS     r1,#0                 ;270
000192  4823              LDR      r0,|L1.544|
000194  6800              LDR      r0,[r0,#0]            ;270  ; pInformation
000196  8241              STRH     r1,[r0,#0x12]         ;270
000198  2000              MOVS     r0,#0                 ;271
00019a  47a0              BLX      r4                    ;271
00019c  2000              MOVS     r0,#0                 ;272
00019e  e7f3              B        |L1.392|
;;;274    
                          ENDP

                  CustomHID_SetProtocol PROC
;;;392    *******************************************************************************/
;;;393    RESULT CustomHID_SetProtocol(void)
0001a0  481f              LDR      r0,|L1.544|
;;;394    {
;;;395      u8 wValue0 = pInformation->USBwValue0;
0001a2  6800              LDR      r0,[r0,#0]  ; pInformation
0001a4  78c1              LDRB     r1,[r0,#3]
;;;396      ProtocolValue = wValue0;
0001a6  4825              LDR      r0,|L1.572|
0001a8  6001              STR      r1,[r0,#0]  ; ProtocolValue
;;;397      return USB_SUCCESS;
0001aa  2000              MOVS     r0,#0
;;;398    }
0001ac  4770              BX       lr
;;;399    
                          ENDP

                  CustomHID_NoData_Setup PROC
;;;281    *******************************************************************************/
;;;282    RESULT CustomHID_NoData_Setup(u8 RequestNo)
0001ae  b500              PUSH     {lr}
;;;283    {
0001b0  4602              MOV      r2,r0
;;;284      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
0001b2  481b              LDR      r0,|L1.544|
0001b4  6800              LDR      r0,[r0,#0]  ; pInformation
0001b6  7800              LDRB     r0,[r0,#0]
0001b8  f000007f          AND      r0,r0,#0x7f
0001bc  2821              CMP      r0,#0x21
0001be  d104              BNE      |L1.458|
;;;285          && (RequestNo == SET_PROTOCOL))
0001c0  2a0b              CMP      r2,#0xb
0001c2  d102              BNE      |L1.458|
;;;286      {
;;;287        return CustomHID_SetProtocol();
0001c4  f7fffffe          BL       CustomHID_SetProtocol
                  |L1.456|
;;;288      }
;;;289    
;;;290      else
;;;291      {
;;;292        return USB_UNSUPPORT;
;;;293      }
;;;294    }
0001c8  bd00              POP      {pc}
                  |L1.458|
0001ca  2002              MOVS     r0,#2                 ;292
0001cc  e7fc              B        |L1.456|
;;;295    
                          ENDP

                  CustomHID_GetDeviceDescriptor PROC
;;;302    *******************************************************************************/
;;;303    u8 *CustomHID_GetDeviceDescriptor(u16 Length)
0001ce  b510              PUSH     {r4,lr}
;;;304    {
0001d0  4604              MOV      r4,r0
;;;305      return Standard_GetDescriptorData(Length, &Device_Descriptor);
0001d2  491d              LDR      r1,|L1.584|
0001d4  4620              MOV      r0,r4
0001d6  f7fffffe          BL       Standard_GetDescriptorData
;;;306    }
0001da  bd10              POP      {r4,pc}
;;;307    
                          ENDP

                  CustomHID_GetConfigDescriptor PROC
;;;314    *******************************************************************************/
;;;315    u8 *CustomHID_GetConfigDescriptor(u16 Length)
0001dc  b510              PUSH     {r4,lr}
;;;316    {
0001de  4604              MOV      r4,r0
;;;317      return Standard_GetDescriptorData(Length, &Config_Descriptor);
0001e0  491a              LDR      r1,|L1.588|
0001e2  4620              MOV      r0,r4
0001e4  f7fffffe          BL       Standard_GetDescriptorData
;;;318    }
0001e8  bd10              POP      {r4,pc}
;;;319    
                          ENDP

                  CustomHID_GetStringDescriptor PROC
;;;326    *******************************************************************************/
;;;327    u8 *CustomHID_GetStringDescriptor(u16 Length)
0001ea  b570              PUSH     {r4-r6,lr}
;;;328    {
0001ec  4604              MOV      r4,r0
;;;329      u8 wValue0 = pInformation->USBwValue0;
0001ee  480c              LDR      r0,|L1.544|
0001f0  6800              LDR      r0,[r0,#0]  ; pInformation
0001f2  78c5              LDRB     r5,[r0,#3]
;;;330      if (wValue0 > 4)
0001f4  2d04              CMP      r5,#4
0001f6  dd01              BLE      |L1.508|
;;;331      {
;;;332        return NULL;
0001f8  2000              MOVS     r0,#0
                  |L1.506|
;;;333      }
;;;334      else 
;;;335      {
;;;336        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;337      }
;;;338    }
0001fa  bd70              POP      {r4-r6,pc}
                  |L1.508|
0001fc  4814              LDR      r0,|L1.592|
0001fe  eb0001c5          ADD      r1,r0,r5,LSL #3       ;336
000202  4620              MOV      r0,r4                 ;336
000204  f7fffffe          BL       Standard_GetDescriptorData
000208  e7f7              B        |L1.506|
;;;339    
                          ENDP

                  CustomHID_Get_Interface_Setting PROC
;;;372    *******************************************************************************/
;;;373    RESULT CustomHID_Get_Interface_Setting(u8 Interface, u8 AlternateSetting)
00020a  4602              MOV      r2,r0
;;;374    {
;;;375      if (AlternateSetting > 0)
00020c  2900              CMP      r1,#0
00020e  dd01              BLE      |L1.532|
;;;376      {
;;;377        return USB_UNSUPPORT;
000210  2002              MOVS     r0,#2
                  |L1.530|
;;;378      }
;;;379      else if (Interface > 0)
;;;380      {
;;;381        return USB_UNSUPPORT;
;;;382      }
;;;383      return USB_SUCCESS;
;;;384    }
000212  4770              BX       lr
                  |L1.532|
000214  2a00              CMP      r2,#0                 ;379
000216  dd01              BLE      |L1.540|
000218  2002              MOVS     r0,#2                 ;381
00021a  e7fa              B        |L1.530|
                  |L1.540|
00021c  2000              MOVS     r0,#0                 ;383
00021e  e7f8              B        |L1.530|
;;;385    
                          ENDP

                  |L1.544|
                          DCD      pInformation
                  |L1.548|
                          DCD      0x40005c44
                  |L1.552|
                          DCD      wInterrupt_Mask
                  |L1.556|
                          DCD      0x40005000
                  |L1.560|
                          DCD      bDeviceState
                  |L1.564|
                          DCD      CustomHID_ConfigDescriptor
                  |L1.568|
                          DCD      Device_Property
                  |L1.572|
                          DCD      ProtocolValue
                  |L1.576|
                          DCD      CustomHID_Hid_Descriptor
                  |L1.580|
                          DCD      CustomHID_Report_Descriptor
                  |L1.584|
                          DCD      Device_Descriptor
                  |L1.588|
                          DCD      Config_Descriptor
                  |L1.592|
                          DCD      String_Descriptor

                          AREA ||.data||, DATA, ALIGN=2

                  Device_Table
000000  03010000          DCB      0x03,0x01,0x00,0x00
                  Device_Property
                          DCD      CustomHID_init
                          DCD      CustomHID_Reset
                          DCD      CustomHID_Status_In
                          DCD      CustomHID_Status_Out
                          DCD      CustomHID_Data_Setup
                          DCD      CustomHID_NoData_Setup
                          DCD      CustomHID_Get_Interface_Setting
                          DCD      CustomHID_GetDeviceDescriptor
                          DCD      CustomHID_GetConfigDescriptor
                          DCD      CustomHID_GetStringDescriptor
                          DCD      0x00000000
000030  40000000          DCB      0x40,0x00,0x00,0x00
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      CustomHID_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      CustomHID_SetDeviceAddress
                  Device_Descriptor
                          DCD      CustomHID_DeviceDescriptor
00005c  0012              DCW      0x0012
00005e  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      CustomHID_ConfigDescriptor
000064  0029              DCW      0x0029
000066  0000              DCB      0x00,0x00
                  CustomHID_Report_Descriptor
                          DCD      CustomHID_ReportDescriptor
00006c  0021              DCW      0x0021
00006e  0000              DCB      0x00,0x00
                  CustomHID_Hid_Descriptor
                          DCD      CustomHID_ConfigDescriptor+0x12
000074  0009              DCW      0x0009
000076  0000              DCB      0x00,0x00
                  String_Descriptor
                          DCD      CustomHID_StringLangID
00007c  0004              DCW      0x0004
00007e  0000              DCB      0x00,0x00
                          DCD      CustomHID_StringVendor
000084  0014              DCW      0x0014
000086  0000              DCB      0x00,0x00
                          DCD      CustomHID_StringProduct
00008c  0012              DCW      0x0012
00008e  0000              DCB      0x00,0x00
                          DCD      CustomHID_StringSerial
000094  001a              DCW      0x001a
000096  0000              DCB      0x00,0x00
                  ProtocolValue
                          DCD      0x00000000
