; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\spi.o --depend=..\OBJ\spi.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\spi.crf ..\HARDWARE\SPI\spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_2_DMA_Initialization PROC
;;;101    #define SPI2_DR_Addr ( (u32)0x4000380C )
;;;102    void SPI_2_DMA_Initialization(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104    	SPI_2_CommLen=0;
000002  2000              MOVS     r0,#0
000004  49d2              LDR      r1,|L1.848|
000006  7008              STRB     r0,[r1,#0]
;;;105    	RCC->AHBENR|=1<<0;							//开启DMA1时钟
000008  48d2              LDR      r0,|L1.852|
00000a  6940              LDR      r0,[r0,#0x14]
00000c  f0400001          ORR      r0,r0,#1
000010  49d0              LDR      r1,|L1.852|
000012  6148              STR      r0,[r1,#0x14]
;;;106    	delay_ms(5);								//等待DMA时钟稳定
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       delay_ms
;;;107        RCC->AHBENR |= 1<<0 ;                     //DMA1时钟使能
00001a  48ce              LDR      r0,|L1.852|
00001c  6940              LDR      r0,[r0,#0x14]
00001e  f0400001          ORR      r0,r0,#1
000022  49cc              LDR      r1,|L1.852|
000024  6148              STR      r0,[r1,#0x14]
;;;108    
;;;109    	/*------------------配置SPI1_RX_DMA通道Channel2---------------------*/
;;;110    
;;;111        DMA1_Channel4->CCR &= ~( 1<<14 ) ;        //非存储器到存储器模式
000026  48cc              LDR      r0,|L1.856|
000028  6c40              LDR      r0,[r0,#0x44]
00002a  f4204080          BIC      r0,r0,#0x4000
00002e  49ca              LDR      r1,|L1.856|
000030  6448              STR      r0,[r1,#0x44]
;;;112    	DMA1_Channel4->CCR |=    2<<12   ;        //通道优先级高
000032  4608              MOV      r0,r1
000034  6c40              LDR      r0,[r0,#0x44]
000036  f4405000          ORR      r0,r0,#0x2000
00003a  6448              STR      r0,[r1,#0x44]
;;;113    	DMA1_Channel4->CCR &= ~( 3<<10 ) ;        //存储器数据宽度8bit
00003c  4608              MOV      r0,r1
00003e  6c40              LDR      r0,[r0,#0x44]
000040  f4206040          BIC      r0,r0,#0xc00
000044  6448              STR      r0,[r1,#0x44]
;;;114    	DMA1_Channel4->CCR &= ~( 3<<8  ) ;        //外设数据宽度8bit
000046  4608              MOV      r0,r1
000048  6c40              LDR      r0,[r0,#0x44]
00004a  f4207040          BIC      r0,r0,#0x300
00004e  6448              STR      r0,[r1,#0x44]
;;;115    	DMA1_Channel4->CCR |=    1<<7    ;        //存储器地址增量模式
000050  4608              MOV      r0,r1
000052  6c40              LDR      r0,[r0,#0x44]
000054  f0400080          ORR      r0,r0,#0x80
000058  6448              STR      r0,[r1,#0x44]
;;;116    	DMA1_Channel4->CCR &= ~( 1<<6  ) ;        //不执行外设地址增量模式
00005a  4608              MOV      r0,r1
00005c  6c40              LDR      r0,[r0,#0x44]
00005e  f0200040          BIC      r0,r0,#0x40
000062  6448              STR      r0,[r1,#0x44]
;;;117    	DMA1_Channel4->CCR &= ~( 1<<5  ) ;        //执行循环操作
000064  4608              MOV      r0,r1
000066  6c40              LDR      r0,[r0,#0x44]
000068  f0200020          BIC      r0,r0,#0x20
00006c  6448              STR      r0,[r1,#0x44]
;;;118    	DMA1_Channel4->CCR &= ~( 1<<4  ) ;        //从外设读
00006e  4608              MOV      r0,r1
000070  6c40              LDR      r0,[r0,#0x44]
000072  f0200010          BIC      r0,r0,#0x10
000076  6448              STR      r0,[r1,#0x44]
;;;119    
;;;120    	DMA1_Channel4->CNDTR &= 0x0000   ;        //传输数量寄存器清零
000078  4608              MOV      r0,r1
00007a  6c80              LDR      r0,[r0,#0x48]
00007c  2000              MOVS     r0,#0
00007e  6488              STR      r0,[r1,#0x48]
;;;121    	DMA1_Channel4->CNDTR = SPI_2_CommLen ;       //传输数量设置为buffersize个
000080  48b3              LDR      r0,|L1.848|
000082  7800              LDRB     r0,[r0,#0]  ; SPI_2_CommLen
000084  6488              STR      r0,[r1,#0x48]
;;;122    
;;;123    	DMA1_Channel4->CPAR = SPI2_DR_Addr ;      //设置外设地址，注意PSIZE
000086  48b5              LDR      r0,|L1.860|
000088  64c8              STR      r0,[r1,#0x4c]
;;;124    	DMA1_Channel4->CMAR = (u32)SPI_2_RcvBuf ; //设置DMA存储器地址，注意MSIZE
00008a  48b5              LDR      r0,|L1.864|
00008c  6508              STR      r0,[r1,#0x50]
;;;125    
;;;126    	/*------------------配置SPI1_TX_DMA通道Channel3---------------------*/
;;;127    
;;;128    	DMA1_Channel5->CCR &= ~( 1<<14 ) ;        //非存储器到存储器模式
00008e  4608              MOV      r0,r1
000090  6d80              LDR      r0,[r0,#0x58]
000092  f4204080          BIC      r0,r0,#0x4000
000096  6588              STR      r0,[r1,#0x58]
;;;129    	DMA1_Channel5->CCR |=    0<<12   ;        //通道优先级最低
000098  4608              MOV      r0,r1
00009a  6d80              LDR      r0,[r0,#0x58]
00009c  6588              STR      r0,[r1,#0x58]
;;;130    	DMA1_Channel5->CCR &= ~( 3<<10 ) ;        //存储器数据宽度8bit
00009e  4608              MOV      r0,r1
0000a0  6d80              LDR      r0,[r0,#0x58]
0000a2  f4206040          BIC      r0,r0,#0xc00
0000a6  6588              STR      r0,[r1,#0x58]
;;;131    	DMA1_Channel5->CCR &= ~( 3<<8 )  ;        //外设数据宽度8bit
0000a8  4608              MOV      r0,r1
0000aa  6d80              LDR      r0,[r0,#0x58]
0000ac  f4207040          BIC      r0,r0,#0x300
0000b0  6588              STR      r0,[r1,#0x58]
;;;132    	DMA1_Channel5->CCR |=    1<<7    ;        //存储器地址增量模式
0000b2  4608              MOV      r0,r1
0000b4  6d80              LDR      r0,[r0,#0x58]
0000b6  f0400080          ORR      r0,r0,#0x80
0000ba  6588              STR      r0,[r1,#0x58]
;;;133    	DMA1_Channel5->CCR &= ~( 1<<6 )  ;        //不执行外设地址增量模式
0000bc  4608              MOV      r0,r1
0000be  6d80              LDR      r0,[r0,#0x58]
0000c0  f0200040          BIC      r0,r0,#0x40
0000c4  6588              STR      r0,[r1,#0x58]
;;;134    	DMA1_Channel5->CCR &= ~( 1<<5 ) ;         //不执行循环操作
0000c6  4608              MOV      r0,r1
0000c8  6d80              LDR      r0,[r0,#0x58]
0000ca  f0200020          BIC      r0,r0,#0x20
0000ce  6588              STR      r0,[r1,#0x58]
;;;135    	DMA1_Channel5->CCR |=    1<<4    ;        //从存储器读
0000d0  4608              MOV      r0,r1
0000d2  6d80              LDR      r0,[r0,#0x58]
0000d4  f0400010          ORR      r0,r0,#0x10
0000d8  6588              STR      r0,[r1,#0x58]
;;;136    
;;;137    	DMA1_Channel5->CNDTR &= 0x0000   ;        //传输数量寄存器清零
0000da  4608              MOV      r0,r1
0000dc  6dc0              LDR      r0,[r0,#0x5c]
0000de  2000              MOVS     r0,#0
0000e0  65c8              STR      r0,[r1,#0x5c]
;;;138    	DMA1_Channel5->CNDTR = SPI_2_CommLen ;       //传输数量设置为buffersize个
0000e2  489b              LDR      r0,|L1.848|
0000e4  7800              LDRB     r0,[r0,#0]  ; SPI_2_CommLen
0000e6  65c8              STR      r0,[r1,#0x5c]
;;;139    	
;;;140    	DMA1_Channel5->CPAR = SPI2_DR_Addr ;      //设置外设地址，注意PSIZE
0000e8  489c              LDR      r0,|L1.860|
0000ea  6608              STR      r0,[r1,#0x60]
;;;141    	DMA1_Channel5->CMAR = (u32)SPI_2_SendBuf ; //设置DMA存储器地址，注意MSIZE	
0000ec  489d              LDR      r0,|L1.868|
0000ee  6648              STR      r0,[r1,#0x64]
;;;142    	
;;;143    	
;;;144    	
;;;145    	DMA1_Channel4->CCR|=1<<1;	    // transfer (recevie) complete ISR.
0000f0  4608              MOV      r0,r1
0000f2  6c40              LDR      r0,[r0,#0x44]
0000f4  f0400002          ORR      r0,r0,#2
0000f8  6448              STR      r0,[r1,#0x44]
;;;146    	MY_NVIC_Init(3,3,DMA1_Channel4_IRQChannel,2);
0000fa  2302              MOVS     r3,#2
0000fc  220e              MOVS     r2,#0xe
0000fe  2103              MOVS     r1,#3
000100  4608              MOV      r0,r1
000102  f7fffffe          BL       MY_NVIC_Init
;;;147    }
000106  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  SPI2_Initializaion PROC
;;;58     
;;;59     void SPI2_Initializaion(void)
000108  b510              PUSH     {r4,lr}
;;;60     {
;;;61     	RCC->APB1ENR|=1<<14;   	//SPI2时钟使能 
00010a  4892              LDR      r0,|L1.852|
00010c  69c0              LDR      r0,[r0,#0x1c]
00010e  f4404080          ORR      r0,r0,#0x4000
000112  4990              LDR      r1,|L1.852|
000114  61c8              STR      r0,[r1,#0x1c]
;;;62     	RCC->APB2ENR|=1<<3;     //使能PORTB时钟 	    
000116  4608              MOV      r0,r1
000118  6980              LDR      r0,[r0,#0x18]
00011a  f0400008          ORR      r0,r0,#8
00011e  6188              STR      r0,[r1,#0x18]
;;;63      	RCC->APB2ENR|=1<<5;		//使能PORTD时钟
000120  4608              MOV      r0,r1
000122  6980              LDR      r0,[r0,#0x18]
000124  f0400020          ORR      r0,r0,#0x20
000128  6188              STR      r0,[r1,#0x18]
;;;64      	RCC->APB2ENR|=1<<8;		//使能PORTG时钟
00012a  4608              MOV      r0,r1
00012c  6980              LDR      r0,[r0,#0x18]
00012e  f4407080          ORR      r0,r0,#0x100
000132  6188              STR      r0,[r1,#0x18]
;;;65     	GPIOB->CRH&=0XFFF00FFF; 
000134  488c              LDR      r0,|L1.872|
000136  6800              LDR      r0,[r0,#0]
000138  f420207f          BIC      r0,r0,#0xff000
00013c  498b              LDR      r1,|L1.876|
00013e  f8c10c04          STR      r0,[r1,#0xc04]
;;;66     	GPIOB->CRH|=0X00030000;	//PB12 推挽 	    
000142  4608              MOV      r0,r1
000144  f8d00c04          LDR      r0,[r0,#0xc04]
000148  f4403040          ORR      r0,r0,#0x30000
00014c  f8c10c04          STR      r0,[r1,#0xc04]
;;;67     	GPIOB->ODR|=1<<12;    	//PB12上拉
000150  4608              MOV      r0,r1
000152  f8d00c0c          LDR      r0,[r0,#0xc0c]
000156  f4405080          ORR      r0,r0,#0x1000
00015a  f8c10c0c          STR      r0,[r1,#0xc0c]
;;;68     
;;;69      	GPIOB->CRH|=0X00003000;	//PB11 推挽 	    
00015e  4608              MOV      r0,r1
000160  f8d00c04          LDR      r0,[r0,#0xc04]
000164  f4405040          ORR      r0,r0,#0x3000
000168  f8c10c04          STR      r0,[r1,#0xc04]
;;;70     	GPIOB->ODR|=1<<11;    	//PB11上拉	 as PCRChip selection
00016c  4608              MOV      r0,r1
00016e  f8d00c0c          LDR      r0,[r0,#0xc0c]
000172  f4406000          ORR      r0,r0,#0x800
000176  f8c10c0c          STR      r0,[r1,#0xc0c]
;;;71     
;;;72     	//这里pd2和pg7拉高,是为了防止NRF24L01和SD卡影响FLASH的烧写.
;;;73     	//因为他们共用一个SPI口. 
;;;74     	GPIOD->CRL&=0XFFFFF0FF; 
00017a  487d              LDR      r0,|L1.880|
00017c  f8d00400          LDR      r0,[r0,#0x400]
000180  f4206070          BIC      r0,r0,#0xf00
000184  497a              LDR      r1,|L1.880|
000186  f8c10400          STR      r0,[r1,#0x400]
;;;75     	GPIOD->CRL|=0X00000300;	//PD2 推挽 	    
00018a  4608              MOV      r0,r1
00018c  f8d00400          LDR      r0,[r0,#0x400]
000190  f4407040          ORR      r0,r0,#0x300
000194  f8c10400          STR      r0,[r1,#0x400]
;;;76     	GPIOD->ODR|=1<<2;    	//PD2上拉
000198  4608              MOV      r0,r1
00019a  f8d0040c          LDR      r0,[r0,#0x40c]
00019e  f0400004          ORR      r0,r0,#4
0001a2  4974              LDR      r1,|L1.884|
0001a4  6008              STR      r0,[r1,#0]
;;;77     
;;;78     	PCRCHip_Sel=1;
0001a6  2001              MOVS     r0,#1
0001a8  4973              LDR      r1,|L1.888|
0001aa  f8c101b0          STR      r0,[r1,#0x1b0]
;;;79     	//这里只针对SPI口初始化
;;;80     	GPIOB->CRH&=0X000FFFFF; 
0001ae  486f              LDR      r0,|L1.876|
0001b0  f8d00c04          LDR      r0,[r0,#0xc04]
0001b4  f3c00013          UBFX     r0,r0,#0,#20
0001b8  496c              LDR      r1,|L1.876|
0001ba  f8c10c04          STR      r0,[r1,#0xc04]
;;;81     	GPIOB->CRH|=0XBBB00000;	//PB13/14/15复用 	    
0001be  486a              LDR      r0,|L1.872|
0001c0  6800              LDR      r0,[r0,#0]
0001c2  496e              LDR      r1,|L1.892|
0001c4  4308              ORRS     r0,r0,r1
0001c6  4969              LDR      r1,|L1.876|
0001c8  f8c10c04          STR      r0,[r1,#0xc04]
;;;82     	GPIOB->ODR|=0X7<<13;   	//PB13/14/15上拉
0001cc  4608              MOV      r0,r1
0001ce  f8d00c0c          LDR      r0,[r0,#0xc0c]
0001d2  f4404060          ORR      r0,r0,#0xe000
0001d6  f8c10c0c          STR      r0,[r1,#0xc0c]
;;;83     	SPI2->CR1|=0<<10;		//全双工模式	
0001da  4869              LDR      r0,|L1.896|
0001dc  f8b00800          LDRH     r0,[r0,#0x800]
0001e0  4967              LDR      r1,|L1.896|
0001e2  f8a10800          STRH     r0,[r1,#0x800]
;;;84     	SPI2->CR1|=1<<9; 		//软件nss管理
0001e6  4608              MOV      r0,r1
0001e8  f8b00800          LDRH     r0,[r0,#0x800]
0001ec  f4407000          ORR      r0,r0,#0x200
0001f0  f8a10800          STRH     r0,[r1,#0x800]
;;;85     	SPI2->CR1|=1<<8;  
0001f4  4608              MOV      r0,r1
0001f6  f8b00800          LDRH     r0,[r0,#0x800]
0001fa  f4407080          ORR      r0,r0,#0x100
0001fe  f8a10800          STRH     r0,[r1,#0x800]
;;;86     
;;;87     	SPI2->CR1|=1<<2; 		//SPI主机
000202  4608              MOV      r0,r1
000204  f8b00800          LDRH     r0,[r0,#0x800]
000208  f0400004          ORR      r0,r0,#4
00020c  f8a10800          STRH     r0,[r1,#0x800]
;;;88     	SPI2->CR1|=0<<11;		//8bit数据格式	
000210  4608              MOV      r0,r1
000212  f8b00800          LDRH     r0,[r0,#0x800]
000216  f8a10800          STRH     r0,[r1,#0x800]
;;;89     	SPI2->CR1|=0<<1; 		//空闲模式下SCK为0 CPOL=0
00021a  4608              MOV      r0,r1
00021c  f8b00800          LDRH     r0,[r0,#0x800]
000220  f8a10800          STRH     r0,[r1,#0x800]
;;;90     	SPI2->CR1|=0<<0; 		//数据采样从第二个时间边沿开始,CPHA=0  
000224  4608              MOV      r0,r1
000226  f8b00800          LDRH     r0,[r0,#0x800]
00022a  f8a10800          STRH     r0,[r1,#0x800]
;;;91     	//对SPI2属于APB1的外设.时钟频率最大为36M.
;;;92     	SPI2->CR1|=4<<3; 		//Fsck=Fpclk1/32, 4<<3;
00022e  4608              MOV      r0,r1
000230  f8b00800          LDRH     r0,[r0,#0x800]
000234  f0400020          ORR      r0,r0,#0x20
000238  f8a10800          STRH     r0,[r1,#0x800]
;;;93     	SPI2->CR1|=0<<7; 		//MSBfirst   
00023c  4608              MOV      r0,r1
00023e  f8b00800          LDRH     r0,[r0,#0x800]
000242  f8a10800          STRH     r0,[r1,#0x800]
;;;94     	SPI2->CR2|=3;
000246  4608              MOV      r0,r1
000248  f8b00804          LDRH     r0,[r0,#0x804]
00024c  f0400003          ORR      r0,r0,#3
000250  f8a10804          STRH     r0,[r1,#0x804]
;;;95     	SPI2->CR1|=1<<6; 		//SPI设备使能
000254  4608              MOV      r0,r1
000256  f8b00800          LDRH     r0,[r0,#0x800]
00025a  f0400040          ORR      r0,r0,#0x40
00025e  493f              LDR      r1,|L1.860|
000260  390c              SUBS     r1,r1,#0xc
000262  8008              STRH     r0,[r1,#0]
;;;96     
;;;97     	SPI_2_DMA_Initialization();
000264  f7fffffe          BL       SPI_2_DMA_Initialization
;;;98     		 
;;;99     }   
000268  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  SPI_2_Trans PROC
;;;149    
;;;150    void SPI_2_Trans(u8 TransLen)
00026a  bf00              NOP      
                  |L1.620|
;;;151    {
;;;152    
;;;153    	while (SPI_2_Rx_sts !=SPI_IDLE);
00026c  4945              LDR      r1,|L1.900|
00026e  7809              LDRB     r1,[r1,#0]  ; SPI_2_Rx_sts
000270  2900              CMP      r1,#0
000272  d1fb              BNE      |L1.620|
;;;154    	DMA1_Channel4->CCR &=~1;	
000274  4938              LDR      r1,|L1.856|
000276  6c49              LDR      r1,[r1,#0x44]
000278  f0210101          BIC      r1,r1,#1
00027c  4a36              LDR      r2,|L1.856|
00027e  6451              STR      r1,[r2,#0x44]
;;;155    	DMA1_Channel5->CCR &=~1;
000280  4611              MOV      r1,r2
000282  6d89              LDR      r1,[r1,#0x58]
000284  f0210101          BIC      r1,r1,#1
000288  6591              STR      r1,[r2,#0x58]
;;;156    	SPI_2_Rx_sts=SPI_BUSY;
00028a  2101              MOVS     r1,#1
00028c  4a3d              LDR      r2,|L1.900|
00028e  7011              STRB     r1,[r2,#0]
;;;157      	SPI_2_CommLen=TransLen;
000290  492f              LDR      r1,|L1.848|
000292  7008              STRB     r0,[r1,#0]
;;;158    	DMA1_Channel4->CNDTR=TransLen;
000294  4930              LDR      r1,|L1.856|
000296  6488              STR      r0,[r1,#0x48]
;;;159    	DMA1_Channel5->CNDTR=TransLen;
000298  65c8              STR      r0,[r1,#0x5c]
;;;160    
;;;161    	DMA1_Channel4->CPAR = SPI2_DR_Addr ;      //设置外设地址，注意PSIZE
00029a  4930              LDR      r1,|L1.860|
00029c  4a2e              LDR      r2,|L1.856|
00029e  64d1              STR      r1,[r2,#0x4c]
;;;162    	DMA1_Channel4->CMAR = (u32)SPI_2_RcvBuf ; //设置DMA存储器地址，注意MSIZE
0002a0  492f              LDR      r1,|L1.864|
0002a2  6511              STR      r1,[r2,#0x50]
;;;163    	DMA1_Channel5->CPAR = SPI2_DR_Addr ;      //设置外设地址，注意PSIZE
0002a4  492d              LDR      r1,|L1.860|
0002a6  6611              STR      r1,[r2,#0x60]
;;;164    	DMA1_Channel5->CMAR = (u32)SPI_2_SendBuf ; //设置DMA存储器地址，注意MSIZE	
0002a8  492e              LDR      r1,|L1.868|
0002aa  6651              STR      r1,[r2,#0x64]
;;;165    
;;;166    	PCRCHip_Sel=0;
0002ac  2100              MOVS     r1,#0
0002ae  4a36              LDR      r2,|L1.904|
0002b0  6011              STR      r1,[r2,#0]
;;;167    	DMA1_Channel4->CCR |=1;	
0002b2  4929              LDR      r1,|L1.856|
0002b4  6c49              LDR      r1,[r1,#0x44]
0002b6  f0410101          ORR      r1,r1,#1
0002ba  4a27              LDR      r2,|L1.856|
0002bc  6451              STR      r1,[r2,#0x44]
;;;168    	DMA1_Channel5->CCR |=1;
0002be  4611              MOV      r1,r2
0002c0  6d89              LDR      r1,[r1,#0x58]
0002c2  f0410101          ORR      r1,r1,#1
0002c6  6591              STR      r1,[r2,#0x58]
;;;169    
;;;170      while (SPI_2_Rx_sts!=SPI_CMPLT);
0002c8  bf00              NOP      
                  |L1.714|
0002ca  492e              LDR      r1,|L1.900|
0002cc  7809              LDRB     r1,[r1,#0]  ; SPI_2_Rx_sts
0002ce  2902              CMP      r1,#2
0002d0  d1fb              BNE      |L1.714|
;;;171    	//txc//delay_ms(20);
;;;172    	SPI_2_Rx_sts=SPI_IDLE;
0002d2  2100              MOVS     r1,#0
0002d4  4a2b              LDR      r2,|L1.900|
0002d6  7011              STRB     r1,[r2,#0]
;;;173    }
0002d8  4770              BX       lr
;;;174    
                          ENDP

                  DMA1_Channel4_IRQHandler PROC
;;;176    #define  DMA1_CH5_ISR_CLR ((u32)(3<<16))
;;;177    void DMA1_Channel4_IRQHandler(void)
0002da  481f              LDR      r0,|L1.856|
;;;178    {
;;;179      DMA1->IFCR |= DMA1_CH4_ISR_CLR;
0002dc  6840              LDR      r0,[r0,#4]
0002de  f4405040          ORR      r0,r0,#0x3000
0002e2  491d              LDR      r1,|L1.856|
0002e4  6048              STR      r0,[r1,#4]
;;;180      while(SPI2->SR & (1<<7));
0002e6  bf00              NOP      
                  |L1.744|
0002e8  481c              LDR      r0,|L1.860|
0002ea  1f00              SUBS     r0,r0,#4
0002ec  8800              LDRH     r0,[r0,#0]
0002ee  f0100f80          TST      r0,#0x80
0002f2  d1f9              BNE      |L1.744|
;;;181      PCRCHip_Sel=1;
0002f4  2001              MOVS     r0,#1
0002f6  4924              LDR      r1,|L1.904|
0002f8  6008              STR      r0,[r1,#0]
;;;182      SPI_2_Rx_sts=SPI_CMPLT;
0002fa  2002              MOVS     r0,#2
0002fc  4921              LDR      r1,|L1.900|
0002fe  7008              STRB     r0,[r1,#0]
;;;183    	DMA1_Channel4->CCR &=~1;	
000300  4815              LDR      r0,|L1.856|
000302  6c40              LDR      r0,[r0,#0x44]
000304  f0200001          BIC      r0,r0,#1
000308  4913              LDR      r1,|L1.856|
00030a  6448              STR      r0,[r1,#0x44]
;;;184    	DMA1_Channel5->CCR &=~1;
00030c  4608              MOV      r0,r1
00030e  6d80              LDR      r0,[r0,#0x58]
000310  f0200001          BIC      r0,r0,#1
000314  6588              STR      r0,[r1,#0x58]
;;;185    //  SPI_Rev_Data_Copy(SPI_2_CommLen);
;;;186    }
000316  4770              BX       lr
;;;187    
                          ENDP

                  DMA1_Channel5_IRQHandler PROC
;;;188    void DMA1_Channel5_IRQHandler(void)
000318  480f              LDR      r0,|L1.856|
;;;189    {
;;;190      DMA1->IFCR |= DMA1_CH5_ISR_CLR;
00031a  6840              LDR      r0,[r0,#4]
00031c  f4403040          ORR      r0,r0,#0x30000
000320  490d              LDR      r1,|L1.856|
000322  6048              STR      r0,[r1,#4]
;;;191      while(SPI2->SR & (1<<7));
000324  bf00              NOP      
                  |L1.806|
000326  480d              LDR      r0,|L1.860|
000328  1f00              SUBS     r0,r0,#4
00032a  8800              LDRH     r0,[r0,#0]
00032c  f0100f80          TST      r0,#0x80
000330  d1f9              BNE      |L1.806|
;;;192      PCRCHip_Sel=1;
000332  2001              MOVS     r0,#1
000334  4914              LDR      r1,|L1.904|
000336  6008              STR      r0,[r1,#0]
;;;193    }
000338  4770              BX       lr
;;;194    
                          ENDP

                  SPI_Rev_Data_Copy PROC
;;;198    /*		4 bit ovelopped will be removed	*/
;;;199    void SPI_Rev_Data_Copy(u8 length)
00033a  2100              MOVS     r1,#0
;;;200    {
;;;201    
;;;202    	u8 i;
;;;203    /*
;;;204    	for(i=0;i<length;i++)
;;;205    	{
;;;206    		if((i & 0x1)==0)
;;;207    			RowData[i]=SPI_2_RcvBuf[i];	
;;;208    		else
;;;209    			RowData[i]=(SPI_2_RcvBuf[i]>>4);	
;;;210    	}
;;;211    */
;;;212    
;;;213    	for(i=0;i<length;i++)
00033c  e005              B        |L1.842|
                  |L1.830|
;;;214    			RowData[i]=SPI_2_RcvBuf[i];	
00033e  4a08              LDR      r2,|L1.864|
000340  5c52              LDRB     r2,[r2,r1]
000342  4b12              LDR      r3,|L1.908|
000344  545a              STRB     r2,[r3,r1]
000346  1c4a              ADDS     r2,r1,#1              ;213
000348  b2d1              UXTB     r1,r2                 ;213
                  |L1.842|
00034a  4281              CMP      r1,r0                 ;213
00034c  dbf7              BLT      |L1.830|
;;;215    				
;;;216    }
00034e  4770              BX       lr
;;;217    
                          ENDP

                  |L1.848|
                          DCD      SPI_2_CommLen
                  |L1.852|
                          DCD      0x40021000
                  |L1.856|
                          DCD      0x40020000
                  |L1.860|
                          DCD      0x4000380c
                  |L1.864|
                          DCD      SPI_2_RcvBuf
                  |L1.868|
                          DCD      SPI_2_SendBuf
                  |L1.872|
                          DCD      0x40010c04
                  |L1.876|
                          DCD      0x40010000
                  |L1.880|
                          DCD      0x40011000
                  |L1.884|
                          DCD      0x4001140c
                  |L1.888|
                          DCD      0x42218000
                  |L1.892|
                          DCD      0xbbb00000
                  |L1.896|
                          DCD      0x40003000
                  |L1.900|
                          DCD      SPI_2_Rx_sts
                  |L1.904|
                          DCD      0x422181b0
                  |L1.908|
                          DCD      RowData

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  SPI_2_SendBuf
                          %        40
                  SPI_2_RcvBuf
                          %        40
                  RowData
                          %        40

                          AREA ||.data||, DATA, ALIGN=0

                  SPI_2_CommLen
000000  00                DCB      0x00
                  SPI_2_Rx_sts
000001  00                DCB      0x00
