; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\temperature.o --depend=..\OBJ\temperature.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\temperature.crf Temperature.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM4_Int_Init PROC
;;;62     
;;;63     void TIM4_Int_Init(u16 arr,u16 psc)
000000  4afb              LDR      r2,|L1.1008|
;;;64     {
;;;65     	RCC->APB1ENR|=1<<2;			//TIM4时钟使能    
000002  69d2              LDR      r2,[r2,#0x1c]
000004  f0420204          ORR      r2,r2,#4
000008  4bf9              LDR      r3,|L1.1008|
00000a  61da              STR      r2,[r3,#0x1c]
;;;66      	TIM4->ARR=TIM4->CNT=arr;  	//设定计数器自动重装值//刚好1ms    
00000c  4af9              LDR      r2,|L1.1012|
00000e  8010              STRH     r0,[r2,#0]
000010  0712              LSLS     r2,r2,#28
000012  f8a2082c          STRH     r0,[r2,#0x82c]
;;;67     	TIM4->PSC=psc;  	  //预分频器7200,得到10Khz的计数时钟		  
000016  f8a21828          STRH     r1,[r2,#0x828]
;;;68     //	TIM8->DIER|=1<<0;   //允许更新中断	  
;;;69     //	TIM3->CR1|=0x01;    //使能定时器3
;;;70     
;;;71     	TIM4->CR1|=(0x01<<7);
00001a  f8b22800          LDRH     r2,[r2,#0x800]
00001e  f0420280          ORR      r2,r2,#0x80
000022  049b              LSLS     r3,r3,#18
000024  f8a32800          STRH     r2,[r3,#0x800]
;;;72     	TIM4->SR&=~(1<<0);//清除中断标志位
000028  461a              MOV      r2,r3
00002a  f8b22810          LDRH     r2,[r2,#0x810]
00002e  f0220201          BIC      r2,r2,#1
000032  f8a32810          STRH     r2,[r3,#0x810]
;;;73     	TIM4->CR1|=(0x01<<4); // count down
000036  461a              MOV      r2,r3
000038  f8b22800          LDRH     r2,[r2,#0x800]
00003c  f0420210          ORR      r2,r2,#0x10
000040  4bec              LDR      r3,|L1.1012|
000042  3b24              SUBS     r3,r3,#0x24
000044  801a              STRH     r2,[r3,#0]
;;;74     	//TIM8->CR1|=(0x01<<3); // opm
;;;75     	TIM4->CCMR2=(0x01<<3); //pre-load enable
000046  2208              MOVS     r2,#8
000048  06d3              LSLS     r3,r2,#27
00004a  f8a3281c          STRH     r2,[r3,#0x81c]
;;;76     //  	MY_NVIC_Init(1,3,TIM3_IRQChannel,2);//抢占1，子优先级3，组2
;;;77     	
;;;78     	TIM4->CCMR2 |= (0x6<<4);
00004e  06d2              LSLS     r2,r2,#27
000050  f8b2281c          LDRH     r2,[r2,#0x81c]
000054  f0420260          ORR      r2,r2,#0x60
000058  f8a3281c          STRH     r2,[r3,#0x81c]
;;;79       	TIM4->CCER  |= (0x1<<8);	      // OCRef active high, output on CH3
00005c  461a              MOV      r2,r3
00005e  f8b22820          LDRH     r2,[r2,#0x820]
000062  f4427280          ORR      r2,r2,#0x100
000066  4be3              LDR      r3,|L1.1012|
000068  1f1b              SUBS     r3,r3,#4
00006a  801a              STRH     r2,[r3,#0]
;;;80      	TIM4->CCR3  = 0;				  // count down mode, inactive all cycle when initial
00006c  2200              MOVS     r2,#0
00006e  4be1              LDR      r3,|L1.1012|
000070  3318              ADDS     r3,r3,#0x18
000072  801a              STRH     r2,[r3,#0]
;;;81     	
;;;82     //	TIM4->CR1|=0x1;	
;;;83     //	TIM4->CR1&=~0x1;								 
;;;84     }
000074  4770              BX       lr
;;;85     
                          ENDP

                  P2N_Control PROC
;;;86     void P2N_Control(u8 Control)
000076  2801              CMP      r0,#1
;;;87     {
;;;88     	if(Control == OPEN)
000078  d106              BNE      |L1.136|
;;;89     		GPIOC->ODR&=~(u32)(1<<1);
00007a  49df              LDR      r1,|L1.1016|
00007c  68c9              LDR      r1,[r1,#0xc]
00007e  f0210102          BIC      r1,r1,#2
000082  4add              LDR      r2,|L1.1016|
000084  60d1              STR      r1,[r2,#0xc]
000086  e005              B        |L1.148|
                  |L1.136|
;;;90     	else
;;;91     		GPIOC->ODR|= (u32)(1<<1);	
000088  49db              LDR      r1,|L1.1016|
00008a  68c9              LDR      r1,[r1,#0xc]
00008c  f0410102          ORR      r1,r1,#2
000090  4ad9              LDR      r2,|L1.1016|
000092  60d1              STR      r1,[r2,#0xc]
                  |L1.148|
;;;92     	GPIOC->CRL&=0XFFFFFF0F; 
000094  49d8              LDR      r1,|L1.1016|
000096  6809              LDR      r1,[r1,#0]
000098  f02101f0          BIC      r1,r1,#0xf0
00009c  4ad6              LDR      r2,|L1.1016|
00009e  6011              STR      r1,[r2,#0]
;;;93     	GPIOC->CRL|=0X00000030;
0000a0  4611              MOV      r1,r2
0000a2  6809              LDR      r1,[r1,#0]
0000a4  f0410130          ORR      r1,r1,#0x30
0000a8  6011              STR      r1,[r2,#0]
;;;94     
;;;95     }
0000aa  4770              BX       lr
;;;96     
                          ENDP

                  P1N_Control PROC
;;;97     void P1N_Control(u8 Control)
0000ac  2801              CMP      r0,#1
;;;98     {
;;;99     	if(Control == OPEN)
0000ae  d106              BNE      |L1.190|
;;;100    		GPIOC->ODR&=~(u32)(1<<0);
0000b0  49d1              LDR      r1,|L1.1016|
0000b2  68c9              LDR      r1,[r1,#0xc]
0000b4  f0210101          BIC      r1,r1,#1
0000b8  4acf              LDR      r2,|L1.1016|
0000ba  60d1              STR      r1,[r2,#0xc]
0000bc  e005              B        |L1.202|
                  |L1.190|
;;;101    	else
;;;102    		GPIOC->ODR|= (u32)(1<<0);
0000be  49ce              LDR      r1,|L1.1016|
0000c0  68c9              LDR      r1,[r1,#0xc]
0000c2  f0410101          ORR      r1,r1,#1
0000c6  4acc              LDR      r2,|L1.1016|
0000c8  60d1              STR      r1,[r2,#0xc]
                  |L1.202|
;;;103    	GPIOC->CRL&=0XFFFFFFF0; 
0000ca  49cb              LDR      r1,|L1.1016|
0000cc  6809              LDR      r1,[r1,#0]
0000ce  f021010f          BIC      r1,r1,#0xf
0000d2  4ac9              LDR      r2,|L1.1016|
0000d4  6011              STR      r1,[r2,#0]
;;;104    	GPIOC->CRL|=0X00000003;
0000d6  4611              MOV      r1,r2
0000d8  6809              LDR      r1,[r1,#0]
0000da  f0410103          ORR      r1,r1,#3
0000de  6011              STR      r1,[r2,#0]
;;;105    
;;;106    }
0000e0  4770              BX       lr
;;;107    
                          ENDP

                  PWM1_FREEZE PROC
;;;108    void PWM1_FREEZE(void)  
0000e2  b500              PUSH     {lr}
;;;109    	{TIM1->CR1 &=~(u16)0x1; 
0000e4  48c5              LDR      r0,|L1.1020|
0000e6  8800              LDRH     r0,[r0,#0]
0000e8  f0200001          BIC      r0,r0,#1
0000ec  49c4              LDR      r1,|L1.1024|
0000ee  f8a10c00          STRH     r0,[r1,#0xc00]
;;;110    	 GPIOA->CRH&=0XFFFFFFF0; 
0000f2  48c4              LDR      r0,|L1.1028|
0000f4  f8d00804          LDR      r0,[r0,#0x804]
0000f8  f020000f          BIC      r0,r0,#0xf
0000fc  49c1              LDR      r1,|L1.1028|
0000fe  f8c10804          STR      r0,[r1,#0x804]
;;;111    	 GPIOA->CRH|=0X00000003;
000102  4608              MOV      r0,r1
000104  f8d00804          LDR      r0,[r0,#0x804]
000108  f0400003          ORR      r0,r0,#3
00010c  f8c10804          STR      r0,[r1,#0x804]
;;;112    	 GPIOA->ODR&=~(u32)(1<<8);
000110  4608              MOV      r0,r1
000112  f8d0080c          LDR      r0,[r0,#0x80c]
000116  f4207080          BIC      r0,r0,#0x100
00011a  f8c1080c          STR      r0,[r1,#0x80c]
;;;113    	 P2N_Control(SHUT);	}
00011e  2000              MOVS     r0,#0
000120  f7fffffe          BL       P2N_Control
000124  bd00              POP      {pc}
;;;114    
                          ENDP

                  PWM2_FREEZE PROC
;;;115    void PWM2_FREEZE(void)	 
000126  b500              PUSH     {lr}
;;;116    	{TIM8->CR1 &=~(u16)0x1; 
000128  48b7              LDR      r0,|L1.1032|
00012a  8800              LDRH     r0,[r0,#0]
00012c  f0200001          BIC      r0,r0,#1
000130  49b6              LDR      r1,|L1.1036|
000132  f8a10400          STRH     r0,[r1,#0x400]
;;;117    	GPIOC->CRL&=0XF0FFFFFF; 
000136  48b0              LDR      r0,|L1.1016|
000138  6800              LDR      r0,[r0,#0]
00013a  f0206070          BIC      r0,r0,#0xf000000
00013e  49ae              LDR      r1,|L1.1016|
000140  6008              STR      r0,[r1,#0]
;;;118    	GPIOC->CRL|=0X03000000;
000142  4608              MOV      r0,r1
000144  6800              LDR      r0,[r0,#0]
000146  f0407040          ORR      r0,r0,#0x3000000
00014a  6008              STR      r0,[r1,#0]
;;;119    	GPIOC->ODR&=~(u32)(1<<6);
00014c  4608              MOV      r0,r1
00014e  68c0              LDR      r0,[r0,#0xc]
000150  f0200040          BIC      r0,r0,#0x40
000154  60c8              STR      r0,[r1,#0xc]
;;;120    	P1N_Control(SHUT);	}
000156  2000              MOVS     r0,#0
000158  f7fffffe          BL       P1N_Control
00015c  bd00              POP      {pc}
;;;121    
                          ENDP

                  PWM1_RELEASE PROC
;;;122    void PWM1_RELEASE(void) 
00015e  b500              PUSH     {lr}
;;;123    	{PWM2_FREEZE();
000160  f7fffffe          BL       PWM2_FREEZE
;;;124    	RCC->APB2ENR|=1<<2;
000164  48a2              LDR      r0,|L1.1008|
000166  6980              LDR      r0,[r0,#0x18]
000168  f0400004          ORR      r0,r0,#4
00016c  49a0              LDR      r1,|L1.1008|
00016e  6188              STR      r0,[r1,#0x18]
;;;125    	GPIOA->CRH&=0XFFFFFFF0; 
000170  48a7              LDR      r0,|L1.1040|
000172  6800              LDR      r0,[r0,#0]
000174  f020000f          BIC      r0,r0,#0xf
000178  49a2              LDR      r1,|L1.1028|
00017a  f8c10804          STR      r0,[r1,#0x804]
;;;126    	GPIOA->CRH|=0X0000000B;
00017e  4608              MOV      r0,r1
000180  f8d00804          LDR      r0,[r0,#0x804]
000184  f040000b          ORR      r0,r0,#0xb
000188  f8c10804          STR      r0,[r1,#0x804]
;;;127    	P2N_Control(OPEN);} // Open P-1N
00018c  2001              MOVS     r0,#1
00018e  f7fffffe          BL       P2N_Control
000192  bd00              POP      {pc}
;;;128    
                          ENDP

                  PWM2_RELEASE PROC
;;;129    
;;;130    void PWM2_RELEASE(void)
000194  b500              PUSH     {lr}
;;;131    	{PWM1_FREEZE();
000196  f7fffffe          BL       PWM1_FREEZE
;;;132    	RCC->APB2ENR|=1<<4;
00019a  4895              LDR      r0,|L1.1008|
00019c  6980              LDR      r0,[r0,#0x18]
00019e  f0400010          ORR      r0,r0,#0x10
0001a2  4993              LDR      r1,|L1.1008|
0001a4  6188              STR      r0,[r1,#0x18]
;;;133    	GPIOC->CRL&=0XF0FFFFFF; //PC.6 AF_PP
0001a6  4894              LDR      r0,|L1.1016|
0001a8  6800              LDR      r0,[r0,#0]
0001aa  f0206070          BIC      r0,r0,#0xf000000
0001ae  4992              LDR      r1,|L1.1016|
0001b0  6008              STR      r0,[r1,#0]
;;;134        GPIOC->CRL|=0X0B000000;
0001b2  4608              MOV      r0,r1
0001b4  6800              LDR      r0,[r0,#0]
0001b6  f0406030          ORR      r0,r0,#0xb000000
0001ba  6008              STR      r0,[r1,#0]
;;;135    	P1N_Control(OPEN);}	  // if without NOT
0001bc  2001              MOVS     r0,#1
0001be  f7fffffe          BL       P1N_Control
0001c2  bd00              POP      {pc}
;;;136    
                          ENDP

                  PWM1_Init PROC
;;;137    
;;;138    void PWM1_Init()
0001c4  b510              PUSH     {r4,lr}
;;;139    {
;;;140       PWM1_RELEASE();
0001c6  f7fffffe          BL       PWM1_RELEASE
;;;141       TIM1_Int_Init(499,TIM1_PSC_VAL);
0001ca  2147              MOVS     r1,#0x47
0001cc  f24010f3          MOV      r0,#0x1f3
0001d0  f7fffffe          BL       TIM1_Int_Init
;;;142    }
0001d4  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  PWM2_Init PROC
;;;144    void PWM2_Init()
0001d6  b510              PUSH     {r4,lr}
;;;145    {
;;;146       PWM2_RELEASE();
0001d8  f7fffffe          BL       PWM2_RELEASE
;;;147       TIM8_Int_Init(499,TIM8_PSC_VAL);
0001dc  2147              MOVS     r1,#0x47
0001de  f24010f3          MOV      r0,#0x1f3
0001e2  f7fffffe          BL       TIM8_Int_Init
;;;148    }
0001e6  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  TempSensorRead PROC
;;;152    static float TempReg=0;
;;;153    float  TempSensorRead(u8 IIC_Addr)
0001e8  e92d41ff          PUSH     {r0-r8,lr}
;;;154    {
0001ec  4604              MOV      r4,r0
;;;155     //  vs16  temp=0;  
;;;156       u8 i,TMP_NACK;
;;;157       float fTemp=0;
0001ee  2600              MOVS     r6,#0
;;;158       vs8 s8temp;
;;;159    
;;;160       TMP_NACK=0;
0001f0  2500              MOVS     r5,#0
;;;161    
;;;162     	do
0001f2  bf00              NOP      
                  |L1.500|
;;;163    	{
;;;164    		IIC_Start();
0001f4  f7fffffe          BL       IIC_Start
;;;165    		IIC_Send_Byte(IIC_Addr);
0001f8  4620              MOV      r0,r4
0001fa  f7fffffe          BL       IIC_Send_Byte
;;;166    		if(IIC_Wait_Ack()==0)
0001fe  f7fffffe          BL       IIC_Wait_Ack
000202  bb10              CBNZ     r0,|L1.586|
;;;167    		{
;;;168    			IIC_Send_Byte(0);
000204  2000              MOVS     r0,#0
000206  f7fffffe          BL       IIC_Send_Byte
;;;169    			if(IIC_Wait_Ack()==0)
00020a  f7fffffe          BL       IIC_Wait_Ack
00020e  b9c8              CBNZ     r0,|L1.580|
;;;170    			{
;;;171    				IIC_Start();
000210  f7fffffe          BL       IIC_Start
;;;172    				IIC_Send_Byte((IIC_Addr |0x1));
000214  f0440001          ORR      r0,r4,#1
000218  f7fffffe          BL       IIC_Send_Byte
;;;173    				if(IIC_Wait_Ack()==0)
00021c  f7fffffe          BL       IIC_Wait_Ack
000220  b968              CBNZ     r0,|L1.574|
;;;174    				{
;;;175    					TermpValue[1]=IIC_Read_Byte(1);
000222  2001              MOVS     r0,#1
000224  f7fffffe          BL       IIC_Read_Byte
000228  497a              LDR      r1,|L1.1044|
00022a  7048              STRB     r0,[r1,#1]
;;;176    					TermpValue[0]=IIC_Read_Byte(0);
00022c  2000              MOVS     r0,#0
00022e  f7fffffe          BL       IIC_Read_Byte
000232  4978              LDR      r1,|L1.1044|
000234  7008              STRB     r0,[r1,#0]
;;;177    					IIC_Stop();
000236  f7fffffe          BL       IIC_Stop
;;;178    					TMP_NACK=0;
00023a  2500              MOVS     r5,#0
00023c  e007              B        |L1.590|
                  |L1.574|
;;;179    				}
;;;180    				else
;;;181    					TMP_NACK++;	
00023e  1c68              ADDS     r0,r5,#1
000240  b2c5              UXTB     r5,r0
000242  e004              B        |L1.590|
                  |L1.580|
;;;182    			}
;;;183    			else
;;;184    				TMP_NACK++;	
000244  1c68              ADDS     r0,r5,#1
000246  b2c5              UXTB     r5,r0
000248  e001              B        |L1.590|
                  |L1.586|
;;;185    		}
;;;186    		else
;;;187    			TMP_NACK++;
00024a  1c68              ADDS     r0,r5,#1
00024c  b2c5              UXTB     r5,r0
                  |L1.590|
;;;188    
;;;189    	}while((TMP_NACK != 0)&&(TMP_NACK<5));
00024e  b10d              CBZ      r5,|L1.596|
000250  2d05              CMP      r5,#5
000252  dbcf              BLT      |L1.500|
                  |L1.596|
;;;190    /*
;;;191       if(TMP_NACK==0)
;;;192       {
;;;193    	   for(i=7;i>3;i--)
;;;194    	   {
;;;195    	   		if(((1<<i) & TermpValue[0]) !=0)
;;;196    				fTemp+=(0.5/(8-i));
;;;197    	   }
;;;198    	
;;;199    	   s8temp=(vs8)TermpValue[1]; 
;;;200    	   if(s8temp >= 0)
;;;201    	   		fTemp += (float)s8temp;
;;;202    		else
;;;203    		{
;;;204    			s8temp= (-s8temp);
;;;205    			fTemp += (float)s8temp;
;;;206    			fTemp=(-fTemp);	
;;;207    		}
;;;208    		TempReg=fTemp;
;;;209       }
;;;210    */
;;;211       if(TMP_NACK==0)
000254  b9d5              CBNZ     r5,|L1.652|
;;;212       {
;;;213       		fTemp=(vs8)TermpValue[1];
000256  496f              LDR      r1,|L1.1044|
000258  7849              LDRB     r1,[r1,#1]  ; TermpValue
00025a  b248              SXTB     r0,r1
00025c  f7fffffe          BL       __aeabi_i2f
000260  4606              MOV      r6,r0
;;;214    		/*
;;;215    		if(fTemp<0)
;;;216    			fTemp-=(float)((TermpValue[0]>>SENSOR_LSB_SHIFT)*SENSOR_RES);
;;;217    		else
;;;218    		*/
;;;219    			fTemp+=(float)((TermpValue[0]>>SENSOR_LSB_SHIFT)*SENSOR_RES);			
000262  496c              LDR      r1,|L1.1044|
000264  7809              LDRB     r1,[r1,#0]  ; TermpValue
000266  1108              ASRS     r0,r1,#4
000268  f7fffffe          BL       __aeabi_i2d
00026c  e9cd0102          STRD     r0,r1,[sp,#8]
000270  a069              ADR      r0,|L1.1048|
000272  c80c              LDM      r0!,{r2,r3}
000274  9802              LDR      r0,[sp,#8]
000276  f7fffffe          BL       __aeabi_dmul
00027a  e9cd0100          STRD     r0,r1,[sp,#0]
00027e  f7fffffe          BL       __aeabi_d2f
000282  4607              MOV      r7,r0
000284  4631              MOV      r1,r6
000286  f7fffffe          BL       __aeabi_fadd
00028a  4606              MOV      r6,r0
                  |L1.652|
;;;220       }
;;;221       if(TermpValue[0]>0x80)
00028c  4861              LDR      r0,|L1.1044|
00028e  7800              LDRB     r0,[r0,#0]  ; TermpValue
000290  2880              CMP      r0,#0x80
000292  dd04              BLE      |L1.670|
;;;222       	TermpValue[0]--;
000294  485f              LDR      r0,|L1.1044|
000296  7800              LDRB     r0,[r0,#0]  ; TermpValue
000298  1e40              SUBS     r0,r0,#1
00029a  495e              LDR      r1,|L1.1044|
00029c  7008              STRB     r0,[r1,#0]
                  |L1.670|
;;;223       return fTemp;
00029e  4630              MOV      r0,r6
;;;224    }
0002a0  b004              ADD      sp,sp,#0x10
0002a2  e8bd81f0          POP      {r4-r8,pc}
;;;225    
                          ENDP

                  TempControl_ReadTemp PROC
;;;226    u16 TempControl_ReadTemp(void)
0002a6  b570              PUSH     {r4-r6,lr}
;;;227    {
;;;228    	u16 u16temp=0;
0002a8  2400              MOVS     r4,#0
;;;229    	u8  u8temp=0;
0002aa  2500              MOVS     r5,#0
;;;230     	u16temp=(u16)TempReg;
0002ac  4859              LDR      r0,|L1.1044|
0002ae  3017              ADDS     r0,r0,#0x17
0002b0  6800              LDR      r0,[r0,#0]  ; TempReg
0002b2  f7fffffe          BL       __aeabi_f2uiz
0002b6  b284              UXTH     r4,r0
;;;231    	u16temp<<=8;
0002b8  0620              LSLS     r0,r4,#24
0002ba  0c04              LSRS     r4,r0,#16
;;;232    	u8temp=	(u8)(TempReg*2);
0002bc  f04f4180          MOV      r1,#0x40000000
0002c0  4854              LDR      r0,|L1.1044|
0002c2  3017              ADDS     r0,r0,#0x17
0002c4  6800              LDR      r0,[r0,#0]  ; TempReg
0002c6  f7fffffe          BL       __aeabi_fmul
0002ca  4606              MOV      r6,r0
0002cc  f7fffffe          BL       __aeabi_f2uiz
0002d0  b2c5              UXTB     r5,r0
;;;233    	if(u8temp & 0x1)
0002d2  f0150f01          TST      r5,#1
0002d6  d001              BEQ      |L1.732|
;;;234    		u16temp |= 0x5;
0002d8  f0440405          ORR      r4,r4,#5
                  |L1.732|
;;;235    
;;;236    	return u16temp; 
0002dc  4620              MOV      r0,r4
;;;237    }
0002de  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

                  PWM3_Initial PROC
;;;267    void Tick_Init(void);
;;;268    void PWM3_Initial(void)
0002e0  b500              PUSH     {lr}
;;;269    {
;;;270    	RCC->APB2ENR|=1<<3;    //使能PORTB时钟 
0002e2  4843              LDR      r0,|L1.1008|
0002e4  6980              LDR      r0,[r0,#0x18]
0002e6  f0400008          ORR      r0,r0,#8
0002ea  4941              LDR      r1,|L1.1008|
0002ec  6188              STR      r0,[r1,#0x18]
;;;271    	GPIOB->CRH&=0XFFFFFFF0; //PB.8 AF_PP
0002ee  484c              LDR      r0,|L1.1056|
0002f0  6800              LDR      r0,[r0,#0]
0002f2  f020000f          BIC      r0,r0,#0xf
0002f6  4943              LDR      r1,|L1.1028|
0002f8  f8c10c04          STR      r0,[r1,#0xc04]
;;;272    	GPIOB->CRH|=0X0000000B;
0002fc  4608              MOV      r0,r1
0002fe  f8d00c04          LDR      r0,[r0,#0xc04]
000302  f040000b          ORR      r0,r0,#0xb
000306  f8c10c04          STR      r0,[r1,#0xc04]
;;;273    	TIM4_Int_Init(499,TIM4_PSC_VAL);	 // 500k clock, 500 step pwm
00030a  2147              MOVS     r1,#0x47
00030c  f24010f3          MOV      r0,#0x1f3
000310  f7fffffe          BL       TIM4_Int_Init
;;;274    }
000314  bd00              POP      {pc}
;;;275    
                          ENDP

                  Tick_Init PROC
;;;377    
;;;378    void Tick_Init(void)
000316  b510              PUSH     {r4,lr}
;;;379    {
;;;380    	//SysTick_Init();
;;;381    	//TIM6_Int_Init(4999,6399);  // 500ms tick
;;;382    	//TickPerSecond=2;
;;;383    	TIM6_Int_Init(SAMPLE_CLOCK,TIM6_PSC_VAL);  
000318  f641411f          MOV      r1,#0x1c1f
00031c  f2406082          MOV      r0,#0x682
000320  f7fffffe          BL       TIM6_Int_Init
;;;384    	TIM6->CR1|=0x01;
000324  483f              LDR      r0,|L1.1060|
000326  8800              LDRH     r0,[r0,#0]
000328  f0400001          ORR      r0,r0,#1
00032c  493d              LDR      r1,|L1.1060|
00032e  8008              STRH     r0,[r1,#0]
;;;385    }
000330  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  TempControl_Initial PROC
;;;275    
;;;276    void TempControl_Initial(float Target)
000332  b510              PUSH     {r4,lr}
;;;277    {
000334  4604              MOV      r4,r0
;;;278    	PID_Err_Rec[INDEX0].Current_Err=PID_Err_Rec[INDEX0].Previous_Err=PID_Err_Rec[INDEX0].Previous_Derr=PID_Err_Rec[INDEX0].Previous_Derr=0;
000336  2000              MOVS     r0,#0
000338  493b              LDR      r1,|L1.1064|
00033a  60c8              STR      r0,[r1,#0xc]  ; PID_Err_Rec
00033c  60c8              STR      r0,[r1,#0xc]  ; PID_Err_Rec
00033e  6048              STR      r0,[r1,#4]  ; PID_Err_Rec
000340  6008              STR      r0,[r1,#0]  ; PID_Err_Rec
;;;279    	PID_Err_Rec[INDEX0].Inte_Err=0;
000342  6108              STR      r0,[r1,#0x10]  ; PID_Err_Rec
;;;280    	PWM3_Initial();
000344  f7fffffe          BL       PWM3_Initial
;;;281    
;;;282    	TempSet=Target;
000348  4838              LDR      r0,|L1.1068|
00034a  6004              STR      r4,[r0,#0]  ; TempSet
;;;283    
;;;284    	#ifdef TMP_DBUG
;;;285    	TempCurrent=0;
;;;286    	#else
;;;287    	TempCurrent=TempSensorRead(STLM75_ADDR_WR);
00034c  2090              MOVS     r0,#0x90
00034e  f7fffffe          BL       TempSensorRead
000352  4937              LDR      r1,|L1.1072|
000354  6008              STR      r0,[r1,#0]  ; TempCurrent
;;;288    	#endif
;;;289    
;;;290    	TempDelta=TempSet-TempCurrent;
000356  4608              MOV      r0,r1
000358  6801              LDR      r1,[r0,#0]  ; TempCurrent
00035a  4834              LDR      r0,|L1.1068|
00035c  6800              LDR      r0,[r0,#0]  ; TempSet
00035e  f7fffffe          BL       __aeabi_fsub
000362  4934              LDR      r1,|L1.1076|
000364  6008              STR      r0,[r1,#0]  ; TempDelta
;;;291    
;;;292    	//if(TempSensorRead>0)  // increase
;;;293    	{
;;;294    		RegE1=RegE2=0;
000366  2000              MOVS     r0,#0
000368  4933              LDR      r1,|L1.1080|
00036a  6008              STR      r0,[r1,#0]  ; RegE2
00036c  4933              LDR      r1,|L1.1084|
00036e  6008              STR      r0,[r1,#0]  ; RegE1
;;;295    		DutyCycle=DutyDelta=1;
000370  2001              MOVS     r0,#1
000372  4933              LDR      r1,|L1.1088|
000374  8008              STRH     r0,[r1,#0]
000376  4933              LDR      r1,|L1.1092|
000378  8008              STRH     r0,[r1,#0]
;;;296    		TIM4->CR1|=0x1;	   //start PWM
00037a  481e              LDR      r0,|L1.1012|
00037c  3824              SUBS     r0,r0,#0x24
00037e  8800              LDRH     r0,[r0,#0]
000380  f0400001          ORR      r0,r0,#1
000384  f04f4180          MOV      r1,#0x40000000
000388  f8a10800          STRH     r0,[r1,#0x800]
;;;297    
;;;298    			#ifdef TMP_DBUG
;;;299    			TempCurrent++;
;;;300    			#else
;;;301    			TempCurrent=TempSensorRead(STLM75_ADDR_WR);
00038c  2090              MOVS     r0,#0x90
00038e  f7fffffe          BL       TempSensorRead
000392  4927              LDR      r1,|L1.1072|
000394  6008              STR      r0,[r1,#0]  ; TempCurrent
;;;302    			#endif
;;;303    
;;;304    			RegE=TempDelta=TempSet-TempCurrent;
000396  4608              MOV      r0,r1
000398  6801              LDR      r1,[r0,#0]  ; TempCurrent
00039a  4824              LDR      r0,|L1.1068|
00039c  6800              LDR      r0,[r0,#0]  ; TempSet
00039e  f7fffffe          BL       __aeabi_fsub
0003a2  4924              LDR      r1,|L1.1076|
0003a4  6008              STR      r0,[r1,#0]  ; TempDelta
0003a6  4928              LDR      r1,|L1.1096|
0003a8  6008              STR      r0,[r1,#0]  ; RegE
;;;305    			if(TempDelta!=0)
0003aa  2100              MOVS     r1,#0
0003ac  4821              LDR      r0,|L1.1076|
0003ae  6800              LDR      r0,[r0,#0]  ; TempDelta
0003b0  f7fffffe          BL       __aeabi_cfcmpeq
0003b4  d00a              BEQ      |L1.972|
;;;306    			{
;;;307    				if(TickLock==0)
0003b6  4825              LDR      r0,|L1.1100|
0003b8  7800              LDRB     r0,[r0,#0]  ; TickLock
0003ba  b908              CBNZ     r0,|L1.960|
;;;308    					Tick_Init();
0003bc  f7fffffe          BL       Tick_Init
                  |L1.960|
;;;309    				TickLock |= 0x1;
0003c0  4822              LDR      r0,|L1.1100|
0003c2  7800              LDRB     r0,[r0,#0]  ; TickLock
0003c4  f0400001          ORR      r0,r0,#1
0003c8  4920              LDR      r1,|L1.1100|
0003ca  7008              STRB     r0,[r1,#0]
                  |L1.972|
;;;310    			}
;;;311    				//SysTick_Init();
;;;312    		    //while(1);			
;;;313    		
;;;314    	}
;;;315    	//else				  // decrease, to invert the current, handle this case later
;;;316    	{
;;;317    	
;;;318    	}
;;;319    }
0003cc  bd10              POP      {r4,pc}
;;;320    
                          ENDP

                  Channel2_PWM_Start PROC
;;;321    void Channel2_PWM_Start(u8 control)
0003ce  2801              CMP      r0,#1
;;;322    {
;;;323    	if(control==POS_DIR)
0003d0  d13e              BNE      |L1.1104|
;;;324    	{
;;;325    		TIM1->CR1 |=0x1;
0003d2  490a              LDR      r1,|L1.1020|
0003d4  8809              LDRH     r1,[r1,#0]
0003d6  f0410101          ORR      r1,r1,#1
0003da  4a09              LDR      r2,|L1.1024|
0003dc  f8a21c00          STRH     r1,[r2,#0xc00]
;;;326    		TIM1->BDTR |= 1<<15;
0003e0  4611              MOV      r1,r2
0003e2  f8b11c44          LDRH     r1,[r1,#0xc44]
0003e6  f4414100          ORR      r1,r1,#0x8000
0003ea  f8a21c44          STRH     r1,[r2,#0xc44]
0003ee  e03f              B        |L1.1136|
                  |L1.1008|
                          DCD      0x40021000
                  |L1.1012|
                          DCD      0x40000824
                  |L1.1016|
                          DCD      0x40011000
                  |L1.1020|
                          DCD      0x40012c00
                  |L1.1024|
                          DCD      0x40012000
                  |L1.1028|
                          DCD      0x40010000
                  |L1.1032|
                          DCD      0x40013400
                  |L1.1036|
                          DCD      0x40013000
                  |L1.1040|
                          DCD      0x40010804
                  |L1.1044|
                          DCD      ||.data||+0x1
                  |L1.1048|
000418  00000000
00041c  3fb00000          DCFD     0x3fb0000000000000 ; 0.0625
                  |L1.1056|
                          DCD      0x40010c04
                  |L1.1060|
                          DCD      0x40001000
                  |L1.1064|
                          DCD      PID_Err_Rec
                  |L1.1068|
                          DCD      TempSet
                  |L1.1072|
                          DCD      TempCurrent
                  |L1.1076|
                          DCD      TempDelta
                  |L1.1080|
                          DCD      RegE2
                  |L1.1084|
                          DCD      RegE1
                  |L1.1088|
                          DCD      DutyDelta
                  |L1.1092|
                          DCD      DutyCycle
                  |L1.1096|
                          DCD      RegE
                  |L1.1100|
                          DCD      TickLock
                  |L1.1104|
;;;327    	}
;;;328    	else if(control==NEG_DIR)
000450  2802              CMP      r0,#2
000452  d10d              BNE      |L1.1136|
;;;329    	{
;;;330    		TIM8->CR1 |=0x1;
000454  49ff              LDR      r1,|L1.2132|
000456  8809              LDRH     r1,[r1,#0]
000458  f0410101          ORR      r1,r1,#1
00045c  4afe              LDR      r2,|L1.2136|
00045e  f8a21400          STRH     r1,[r2,#0x400]
;;;331    		TIM8->BDTR |= 1<<15;
000462  4611              MOV      r1,r2
000464  f8b11444          LDRH     r1,[r1,#0x444]
000468  f4414100          ORR      r1,r1,#0x8000
00046c  f8a21444          STRH     r1,[r2,#0x444]
                  |L1.1136|
;;;332    	}	
;;;333    }
000470  4770              BX       lr
;;;334    
                          ENDP

                  TempContorl_2_Init PROC
;;;335    void TempContorl_2_Init(void)
000472  b500              PUSH     {lr}
;;;336    {
;;;337       RCC->APB2ENR|=1<<4;
000474  48f9              LDR      r0,|L1.2140|
000476  6980              LDR      r0,[r0,#0x18]
000478  f0400010          ORR      r0,r0,#0x10
00047c  49f7              LDR      r1,|L1.2140|
00047e  6188              STR      r0,[r1,#0x18]
;;;338       RCC->APB2ENR|=1<<2;
000480  4608              MOV      r0,r1
000482  6980              LDR      r0,[r0,#0x18]
000484  f0400004          ORR      r0,r0,#4
000488  6188              STR      r0,[r1,#0x18]
;;;339       PWM1_FREEZE();
00048a  f7fffffe          BL       PWM1_FREEZE
;;;340       RCC->APB2ENR|=1<<3;
00048e  48f3              LDR      r0,|L1.2140|
000490  6980              LDR      r0,[r0,#0x18]
000492  f0400008          ORR      r0,r0,#8
000496  49f1              LDR      r1,|L1.2140|
000498  6188              STR      r0,[r1,#0x18]
;;;341       PWM2_FREEZE();
00049a  f7fffffe          BL       PWM2_FREEZE
;;;342    }
00049e  bd00              POP      {pc}
;;;343    
                          ENDP

                  TempControl_2_Initial PROC
;;;344    
;;;345    void TempControl_2_Initial(float Target)
0004a0  b510              PUSH     {r4,lr}
;;;346    {
0004a2  4604              MOV      r4,r0
;;;347    	PID_Err_Rec[INDEX1].Current_Err=PID_Err_Rec[INDEX1].Previous_Err=PID_Err_Rec[INDEX1].Current_Derr=PID_Err_Rec[INDEX1].Previous_Derr=0;
0004a4  2100              MOVS     r1,#0
0004a6  48ee              LDR      r0,|L1.2144|
0004a8  6201              STR      r1,[r0,#0x20]
0004aa  61c1              STR      r1,[r0,#0x1c]
0004ac  6181              STR      r1,[r0,#0x18]
0004ae  6141              STR      r1,[r0,#0x14]  ; PID_Err_Rec
;;;348    	PID_Err_Rec[INDEX1].Inte_Err=0;
0004b0  6241              STR      r1,[r0,#0x24]
;;;349    	TempSet_2=Target;
0004b2  48ec              LDR      r0,|L1.2148|
0004b4  6004              STR      r4,[r0,#0]  ; TempSet_2
;;;350    	TempCurrent_2=TempSensorRead(TEMP_SENSOR_2_ADDR_WR);
0004b6  2092              MOVS     r0,#0x92
0004b8  f7fffffe          BL       TempSensorRead
0004bc  49ea              LDR      r1,|L1.2152|
0004be  6008              STR      r0,[r1,#0]  ; TempCurrent_2
;;;351    	if(TempCurrent_2 > TempSet_2)  // neg control
0004c0  48e8              LDR      r0,|L1.2148|
0004c2  6801              LDR      r1,[r0,#0]  ; TempSet_2
0004c4  48e8              LDR      r0,|L1.2152|
0004c6  6800              LDR      r0,[r0,#0]  ; TempCurrent_2
0004c8  f7fffffe          BL       __aeabi_cfrcmple
0004cc  d205              BCS      |L1.1242|
;;;352    	{
;;;353    	   PWM2_Init();
0004ce  f7fffffe          BL       PWM2_Init
;;;354    	   Control_2_Dir=NEG_DIR;	
0004d2  2002              MOVS     r0,#2
0004d4  49e5              LDR      r1,|L1.2156|
0004d6  7008              STRB     r0,[r1,#0]
0004d8  e004              B        |L1.1252|
                  |L1.1242|
;;;355    	}else{ 				   			// pos control
;;;356    		   PWM1_Init();	
0004da  f7fffffe          BL       PWM1_Init
;;;357    		   Control_2_Dir=POS_DIR;					
0004de  2001              MOVS     r0,#1
0004e0  49e2              LDR      r1,|L1.2156|
0004e2  7008              STRB     r0,[r1,#0]
                  |L1.1252|
;;;358    		}	
;;;359    
;;;360    	if(Control_2_Dir==POS_DIR)
0004e4  48e1              LDR      r0,|L1.2156|
0004e6  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
0004e8  2801              CMP      r0,#1
0004ea  d10a              BNE      |L1.1282|
;;;361    		RegE=TempDelta_2=TempSet_2-TempCurrent_2;
0004ec  48de              LDR      r0,|L1.2152|
0004ee  6801              LDR      r1,[r0,#0]  ; TempCurrent_2
0004f0  48dc              LDR      r0,|L1.2148|
0004f2  6800              LDR      r0,[r0,#0]  ; TempSet_2
0004f4  f7fffffe          BL       __aeabi_fsub
0004f8  49dd              LDR      r1,|L1.2160|
0004fa  6008              STR      r0,[r1,#0]  ; TempDelta_2
0004fc  49dd              LDR      r1,|L1.2164|
0004fe  6008              STR      r0,[r1,#0]  ; RegE
000500  e009              B        |L1.1302|
                  |L1.1282|
;;;362    	else
;;;363    		RegE=TempDelta_2=TempCurrent_2-TempSet_2;
000502  48d8              LDR      r0,|L1.2148|
000504  6801              LDR      r1,[r0,#0]  ; TempSet_2
000506  48d8              LDR      r0,|L1.2152|
000508  6800              LDR      r0,[r0,#0]  ; TempCurrent_2
00050a  f7fffffe          BL       __aeabi_fsub
00050e  49d8              LDR      r1,|L1.2160|
000510  6008              STR      r0,[r1,#0]  ; TempDelta_2
000512  49d8              LDR      r1,|L1.2164|
000514  6008              STR      r0,[r1,#0]  ; RegE
                  |L1.1302|
;;;364    
;;;365    	RegE1_2=RegE2_2=0;
000516  2000              MOVS     r0,#0
000518  49d7              LDR      r1,|L1.2168|
00051a  6008              STR      r0,[r1,#0]  ; RegE2_2
00051c  49d7              LDR      r1,|L1.2172|
00051e  6008              STR      r0,[r1,#0]  ; RegE1_2
;;;366    	DutyCycle_2=DutyDelta_2=1;
000520  2001              MOVS     r0,#1
000522  49d7              LDR      r1,|L1.2176|
000524  6008              STR      r0,[r1,#0]  ; DutyDelta_2
000526  49d7              LDR      r1,|L1.2180|
000528  6008              STR      r0,[r1,#0]  ; DutyCycle_2
;;;367        Channel2_PWM_Start(Control_2_Dir);
00052a  48d0              LDR      r0,|L1.2156|
00052c  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
00052e  f7fffffe          BL       Channel2_PWM_Start
;;;368    
;;;369    	if(TempDelta_2!=0)
000532  2100              MOVS     r1,#0
000534  48ce              LDR      r0,|L1.2160|
000536  6800              LDR      r0,[r0,#0]  ; TempDelta_2
000538  f7fffffe          BL       __aeabi_cfcmpeq
00053c  d00a              BEQ      |L1.1364|
;;;370    	{
;;;371    		if(TickLock==0)
00053e  48d2              LDR      r0,|L1.2184|
000540  7800              LDRB     r0,[r0,#0]  ; TickLock
000542  b908              CBNZ     r0,|L1.1352|
;;;372    			Tick_Init();
000544  f7fffffe          BL       Tick_Init
                  |L1.1352|
;;;373    		TickLock |= 0x2;
000548  48cf              LDR      r0,|L1.2184|
00054a  7800              LDRB     r0,[r0,#0]  ; TickLock
00054c  f0400002          ORR      r0,r0,#2
000550  49cd              LDR      r1,|L1.2184|
000552  7008              STRB     r0,[r1,#0]
                  |L1.1364|
;;;374    	}
;;;375    }
000554  bd10              POP      {r4,pc}
;;;376    
                          ENDP

                  TempControl_stop PROC
;;;387    
;;;388    void TempControl_stop(void)
000556  48cd              LDR      r0,|L1.2188|
;;;389    {
;;;390    	TIM4->CR1 &=~(u16)0x1;
000558  8800              LDRH     r0,[r0,#0]
00055a  f0200001          BIC      r0,r0,#1
00055e  f04f4180          MOV      r1,#0x40000000
000562  f8a10800          STRH     r0,[r1,#0x800]
;;;391    	TickLock &= ~(1<<0);
000566  48c8              LDR      r0,|L1.2184|
000568  7800              LDRB     r0,[r0,#0]  ; TickLock
00056a  f0200001          BIC      r0,r0,#1
00056e  49c6              LDR      r1,|L1.2184|
000570  7008              STRB     r0,[r1,#0]
;;;392    	if(TickLock==0)       // tick shutdown only when no temp control valid
000572  4608              MOV      r0,r1
000574  7800              LDRB     r0,[r0,#0]  ; TickLock
000576  b928              CBNZ     r0,|L1.1412|
;;;393    		TIM6->CR1 &=~(u16)0x1;
000578  48c5              LDR      r0,|L1.2192|
00057a  8800              LDRH     r0,[r0,#0]
00057c  f0200001          BIC      r0,r0,#1
000580  49c3              LDR      r1,|L1.2192|
000582  8008              STRH     r0,[r1,#0]
                  |L1.1412|
;;;394       GPIOB->CRH&=0XFFFFFFF0; //PB.8
000584  48c3              LDR      r0,|L1.2196|
000586  6800              LDR      r0,[r0,#0]
000588  f020000f          BIC      r0,r0,#0xf
00058c  49c2              LDR      r1,|L1.2200|
00058e  f8c10c04          STR      r0,[r1,#0xc04]
;;;395       GPIOB->CRH|=0X00000003;
000592  4608              MOV      r0,r1
000594  f8d00c04          LDR      r0,[r0,#0xc04]
000598  f0400003          ORR      r0,r0,#3
00059c  f8c10c04          STR      r0,[r1,#0xc04]
;;;396       GPIOB->ODR&=~(u32)(1<<8);
0005a0  4608              MOV      r0,r1
0005a2  f8d00c0c          LDR      r0,[r0,#0xc0c]
0005a6  f4207080          BIC      r0,r0,#0x100
0005aa  f8c10c0c          STR      r0,[r1,#0xc0c]
;;;397    }
0005ae  4770              BX       lr
;;;398    
                          ENDP

                  TempControl_2_stop PROC
;;;399    void TempControl_2_stop(void)
0005b0  b510              PUSH     {r4,lr}
;;;400    {
;;;401    	TickLock &= ~(1<<1);
0005b2  48b5              LDR      r0,|L1.2184|
0005b4  7800              LDRB     r0,[r0,#0]  ; TickLock
0005b6  f0200002          BIC      r0,r0,#2
0005ba  49b3              LDR      r1,|L1.2184|
0005bc  7008              STRB     r0,[r1,#0]
;;;402    	//if(Control_2_Dir &= POS_DIR)	// shutdown Pos Dir
;;;403    		PWM1_FREEZE();
0005be  f7fffffe          BL       PWM1_FREEZE
;;;404    	//if(Control_2_Dir &= NEG_DIR)	// shutdown Neg dir
;;;405    		PWM2_FREEZE();
0005c2  f7fffffe          BL       PWM2_FREEZE
;;;406    	if(TickLock==0)       			// tick shutdown only when no temp control valid
0005c6  48b0              LDR      r0,|L1.2184|
0005c8  7800              LDRB     r0,[r0,#0]  ; TickLock
0005ca  b928              CBNZ     r0,|L1.1496|
;;;407    		TIM6->CR1 &=~(u16)0x1;
0005cc  48b0              LDR      r0,|L1.2192|
0005ce  8800              LDRH     r0,[r0,#0]
0005d0  f0200001          BIC      r0,r0,#1
0005d4  49ae              LDR      r1,|L1.2192|
0005d6  8008              STRH     r0,[r1,#0]
                  |L1.1496|
;;;408        
;;;409    		// Sensor_2 stop will auto shutdown fan
;;;410    	FanCtrl_Auto(0);	
0005d8  2000              MOVS     r0,#0
0005da  f7fffffe          BL       FanCtrl_Auto
;;;411    
;;;412    }
0005de  bd10              POP      {r4,pc}
;;;413    
                          ENDP

                  Channel_2_Load PROC
;;;414    static void Channel_2_Load (u8 control_dir, u16 load)
0005e0  2801              CMP      r0,#1
;;;415    {
;;;416    	if(control_dir==POS_DIR)
0005e2  d102              BNE      |L1.1514|
;;;417    		TIM1->CCR1 =load; 
0005e4  4aad              LDR      r2,|L1.2204|
0005e6  8011              STRH     r1,[r2,#0]
0005e8  e004              B        |L1.1524|
                  |L1.1514|
;;;418    	else if(control_dir==NEG_DIR)
0005ea  2802              CMP      r0,#2
0005ec  d102              BNE      |L1.1524|
;;;419    			TIM8->CCR1 =load; 
0005ee  4a99              LDR      r2,|L1.2132|
0005f0  3234              ADDS     r2,r2,#0x34
0005f2  8011              STRH     r1,[r2,#0]
                  |L1.1524|
;;;420    }
0005f4  4770              BX       lr
;;;421    
                          ENDP

                  PID_Cal PROC
;;;750    
;;;751    int PID_Cal(u8 sensor_index,float temperature)
0005f6  e92d5ff0          PUSH     {r4-r12,lr}
;;;752    {
0005fa  4604              MOV      r4,r0
0005fc  460d              MOV      r5,r1
;;;753    	int Val;
;;;754    	///////////////
;;;755    	u8 idx=0;
0005fe  2700              MOVS     r7,#0
;;;756    	if(temperature>Ktm[sensor_index])
000600  48a7              LDR      r0,|L1.2208|
000602  f8501024          LDR      r1,[r0,r4,LSL #2]
000606  4628              MOV      r0,r5
000608  f7fffffe          BL       __aeabi_cfrcmple
00060c  d200              BCS      |L1.1552|
;;;757    	 	idx=1;
00060e  2701              MOVS     r7,#1
                  |L1.1552|
;;;758    	///////////////
;;;759    	//Val=(float)Kp*PID_Err_Rec[sensor_index].Current_Derr+ (float)Ki * PID_Err_Rec[sensor_index].Current_Err;
;;;760    	//Val=(float)Kp*PID_Err_Rec[sensor_index].Current_Err + (float)Ki * PID_Err_Rec[sensor_index].Inte_Err;
;;;761    	PID_Err_Rec[sensor_index].Inte_Err=(float)Ki[idx] * PID_Err_Rec[sensor_index].Current_Err + PID_Err_Rec[sensor_index].Inte_Err;
000610  eb040284          ADD      r2,r4,r4,LSL #2
000614  4b92              LDR      r3,|L1.2144|
000616  f8531022          LDR      r1,[r3,r2,LSL #2]
00061a  4aa2              LDR      r2,|L1.2212|
00061c  f8520027          LDR      r0,[r2,r7,LSL #2]
000620  f7fffffe          BL       __aeabi_fmul
000624  4680              MOV      r8,r0
000626  eb040084          ADD      r0,r4,r4,LSL #2
00062a  4a8d              LDR      r2,|L1.2144|
00062c  eb020080          ADD      r0,r2,r0,LSL #2
000630  6901              LDR      r1,[r0,#0x10]
000632  4640              MOV      r0,r8
000634  f7fffffe          BL       __aeabi_fadd
000638  eb040184          ADD      r1,r4,r4,LSL #2
00063c  4a88              LDR      r2,|L1.2144|
00063e  eb020181          ADD      r1,r2,r1,LSL #2
000642  6108              STR      r0,[r1,#0x10]
;;;762    	if(sensor_index==0)
000644  bb24              CBNZ     r4,|L1.1680|
;;;763    		Val=(float)Kp[idx]*PID_Err_Rec[sensor_index].Current_Err+PID_Err_Rec[sensor_index].Inte_Err + TempSet* Kl[idx];
000646  4898              LDR      r0,|L1.2216|
000648  f8501027          LDR      r1,[r0,r7,LSL #2]
00064c  4897              LDR      r0,|L1.2220|
00064e  6800              LDR      r0,[r0,#0]  ; TempSet
000650  f7fffffe          BL       __aeabi_fmul
000654  4682              MOV      r10,r0
000656  eb040284          ADD      r2,r4,r4,LSL #2
00065a  4b81              LDR      r3,|L1.2144|
00065c  f8531022          LDR      r1,[r3,r2,LSL #2]
000660  4a93              LDR      r2,|L1.2224|
000662  f8520027          LDR      r0,[r2,r7,LSL #2]
000666  f7fffffe          BL       __aeabi_fmul
00066a  4683              MOV      r11,r0
00066c  eb040084          ADD      r0,r4,r4,LSL #2
000670  4a7b              LDR      r2,|L1.2144|
000672  eb020080          ADD      r0,r2,r0,LSL #2
000676  6901              LDR      r1,[r0,#0x10]
000678  4658              MOV      r0,r11
00067a  f7fffffe          BL       __aeabi_fadd
00067e  4681              MOV      r9,r0
000680  4651              MOV      r1,r10
000682  f7fffffe          BL       __aeabi_fadd
000686  4680              MOV      r8,r0
000688  f7fffffe          BL       __aeabi_f2iz
00068c  4606              MOV      r6,r0
00068e  e025              B        |L1.1756|
                  |L1.1680|
;;;764    	else if(sensor_index==1)
000690  2c01              CMP      r4,#1
000692  d123              BNE      |L1.1756|
;;;765    		Val=(float)Kp[idx]*PID_Err_Rec[sensor_index].Current_Err+PID_Err_Rec[sensor_index].Inte_Err + TempSet_2* Kl[idx];
000694  4884              LDR      r0,|L1.2216|
000696  f8501027          LDR      r1,[r0,r7,LSL #2]
00069a  4872              LDR      r0,|L1.2148|
00069c  6800              LDR      r0,[r0,#0]  ; TempSet_2
00069e  f7fffffe          BL       __aeabi_fmul
0006a2  4682              MOV      r10,r0
0006a4  eb040284          ADD      r2,r4,r4,LSL #2
0006a8  4b6d              LDR      r3,|L1.2144|
0006aa  f8531022          LDR      r1,[r3,r2,LSL #2]
0006ae  4a80              LDR      r2,|L1.2224|
0006b0  f8520027          LDR      r0,[r2,r7,LSL #2]
0006b4  f7fffffe          BL       __aeabi_fmul
0006b8  4683              MOV      r11,r0
0006ba  eb040084          ADD      r0,r4,r4,LSL #2
0006be  4a68              LDR      r2,|L1.2144|
0006c0  eb020080          ADD      r0,r2,r0,LSL #2
0006c4  6901              LDR      r1,[r0,#0x10]
0006c6  4658              MOV      r0,r11
0006c8  f7fffffe          BL       __aeabi_fadd
0006cc  4681              MOV      r9,r0
0006ce  4651              MOV      r1,r10
0006d0  f7fffffe          BL       __aeabi_fadd
0006d4  4680              MOV      r8,r0
0006d6  f7fffffe          BL       __aeabi_f2iz
0006da  4606              MOV      r6,r0
                  |L1.1756|
;;;766    	return Val;
0006dc  4630              MOV      r0,r6
;;;767    }
0006de  e8bd9ff0          POP      {r4-r12,pc}
;;;768    
                          ENDP

                  PushMsg PROC
;;;1082   
;;;1083   void PushMsg(u8 msk)
0006e2  4974              LDR      r1,|L1.2228|
;;;1084   {
;;;1085   	MsgStk |= msk;
0006e4  7809              LDRB     r1,[r1,#0]  ; MsgStk
0006e6  4301              ORRS     r1,r1,r0
0006e8  4a72              LDR      r2,|L1.2228|
0006ea  7011              STRB     r1,[r2,#0]
;;;1086   }
0006ec  4770              BX       lr
                          ENDP

                  TIM6_IRQHandler PROC
;;;473    //#define SENSOR_DEBUG  
;;;474    void TIM6_IRQHandler(void)
0006ee  b51f              PUSH     {r0-r4,lr}
;;;475    { 	
;;;476    	int DutyDiff=0;		   
0006f0  2400              MOVS     r4,#0
;;;477    	TIM6->SR&=~(1<<0);//清除中断标志位
0006f2  4867              LDR      r0,|L1.2192|
0006f4  8a00              LDRH     r0,[r0,#0x10]
0006f6  f0200001          BIC      r0,r0,#1
0006fa  4965              LDR      r1,|L1.2192|
0006fc  8208              STRH     r0,[r1,#0x10]
;;;478    	rec=~rec;
0006fe  486e              LDR      r0,|L1.2232|
000700  7800              LDRB     r0,[r0,#0]  ; rec
000702  43c0              MVNS     r0,r0
000704  496c              LDR      r1,|L1.2232|
000706  7008              STRB     r0,[r1,#0]
;;;479    	LED1=rec;
000708  4608              MOV      r0,r1
00070a  7800              LDRB     r0,[r0,#0]  ; rec
00070c  496b              LDR      r1,|L1.2236|
00070e  6008              STR      r0,[r1,#0]
;;;480    /*	
;;;481     #if defined(SENSOR_DEBUG) 
;;;482     	TempCurrent_2=95; 	
;;;483     #endif 
;;;484    */ 
;;;485    
;;;486    #ifdef DEBUG_MSG
;;;487    	  msg_debug++;
;;;488    #endif
;;;489    	if((TickLock & 0x1) !=0)
000710  485d              LDR      r0,|L1.2184|
000712  7800              LDRB     r0,[r0,#0]  ; TickLock
000714  f0100f01          TST      r0,#1
000718  d063              BEQ      |L1.2018|
;;;490    	{
;;;491    		if(TempCtrl_Active==3)	  
00071a  4869              LDR      r0,|L1.2240|
00071c  7800              LDRB     r0,[r0,#0]  ; TempCtrl_Active
00071e  2803              CMP      r0,#3
000720  d107              BNE      |L1.1842|
;;;492    		{
;;;493    			if(CycleSTS == READY) // check whether is in cycle mode, if it is, not count down
000722  4868              LDR      r0,|L1.2244|
000724  7800              LDRB     r0,[r0,#0]  ; CycleSTS
000726  b920              CBNZ     r0,|L1.1842|
;;;494    				TempTickLength--;
000728  4867              LDR      r0,|L1.2248|
00072a  8800              LDRH     r0,[r0,#0]  ; TempTickLength
00072c  1e40              SUBS     r0,r0,#1
00072e  4966              LDR      r1,|L1.2248|
000730  8008              STRH     r0,[r1,#0]
                  |L1.1842|
;;;495    		}
;;;496    
;;;497    		if(TempTickLength==0)
000732  4865              LDR      r0,|L1.2248|
000734  8800              LDRH     r0,[r0,#0]  ; TempTickLength
000736  b910              CBNZ     r0,|L1.1854|
;;;498    			TempCtrl_Active=4;
000738  2004              MOVS     r0,#4
00073a  4961              LDR      r1,|L1.2240|
00073c  7008              STRB     r0,[r1,#0]
                  |L1.1854|
;;;499    				
;;;500    		RegE=TempDelta=TempSet-TempCurrent;
00073e  4863              LDR      r0,|L1.2252|
000740  6801              LDR      r1,[r0,#0]  ; TempCurrent
000742  485a              LDR      r0,|L1.2220|
000744  6800              LDR      r0,[r0,#0]  ; TempSet
000746  f7fffffe          BL       __aeabi_fsub
00074a  4961              LDR      r1,|L1.2256|
00074c  6008              STR      r0,[r1,#0]  ; TempDelta
00074e  4949              LDR      r1,|L1.2164|
000750  6008              STR      r0,[r1,#0]  ; RegE
;;;501    
;;;502    		if(TempCtrl_Active==2) 
000752  485b              LDR      r0,|L1.2240|
000754  7800              LDRB     r0,[r0,#0]  ; TempCtrl_Active
000756  2802              CMP      r0,#2
000758  d117              BNE      |L1.1930|
;;;503    		{
;;;504    			if((TempDelta>=-2) && (TempDelta<=2))
00075a  f04f4140          MOV      r1,#0xc0000000
00075e  485c              LDR      r0,|L1.2256|
000760  6800              LDR      r0,[r0,#0]  ; TempDelta
000762  f7fffffe          BL       __aeabi_cfrcmple
000766  d810              BHI      |L1.1930|
000768  f04f4180          MOV      r1,#0x40000000
00076c  4858              LDR      r0,|L1.2256|
00076e  6800              LDR      r0,[r0,#0]  ; TempDelta
000770  f7fffffe          BL       __aeabi_cfcmple
000774  d809              BHI      |L1.1930|
;;;505    			{
;;;506    				TempCtrl_Active=3;
000776  2003              MOVS     r0,#3
000778  4951              LDR      r1,|L1.2240|
00077a  7008              STRB     r0,[r1,#0]
;;;507    				if(CycleSTS == WAIT)   // add @0607, push sensor1 active3 msg
00077c  4851              LDR      r0,|L1.2244|
00077e  7800              LDRB     r0,[r0,#0]  ; CycleSTS
000780  2801              CMP      r0,#1
000782  d102              BNE      |L1.1930|
;;;508    					PushMsg(SS1_ACT3);
000784  2004              MOVS     r0,#4
000786  f7fffffe          BL       PushMsg
                  |L1.1930|
;;;509    			}
;;;510    		}
;;;511    /*	
;;;512    		if(TempDelta>0)
;;;513    		{
;;;514    			//DutyDiff=PID_Cal(TempDelta);
;;;515    			DutyDiff=PID_Cal(INDEX0);
;;;516    			if((DutyCycle+DutyDiff)<MAX_DUTY)
;;;517    				DutyCycle+=DutyDiff;
;;;518    			else
;;;519    				DutyCycle=MAX_DUTY;	
;;;520    		}
;;;521    		else if(TempDelta<0)
;;;522    			{
;;;523    				DutyDiff=PID_Cal(-TempDelta);
;;;524    				if((DutyCycle-DutyDiff)>MIN_DUTY)
;;;525    					DutyCycle-=DutyDiff;
;;;526    				else
;;;527    					DutyCycle=MIN_DUTY;					
;;;528    			
;;;529    			}
;;;530    */	
;;;531    /*
;;;532    		DutyDiff=PID_Cal(INDEX0);
;;;533    		if((DutyCycle+DutyDiff)>MAX_DUTY)
;;;534    				DutyCycle=MAX_DUTY;
;;;535    		else if	((DutyCycle-DutyDiff)<MIN_DUTY)
;;;536    					DutyCycle=MIN_DUTY;	
;;;537    				else 
;;;538    					 DutyCycle+=DutyDiff;
;;;539    		   	
;;;540    */
;;;541    		PID_Err_Rec[INDEX0].Previous_Err=PID_Err_Rec[INDEX0].Current_Err;
00078a  4835              LDR      r0,|L1.2144|
00078c  6800              LDR      r0,[r0,#0]  ; PID_Err_Rec
00078e  4934              LDR      r1,|L1.2144|
000790  6048              STR      r0,[r1,#4]  ; PID_Err_Rec
;;;542    		PID_Err_Rec[INDEX0].Current_Err= TempSet -TempCurrent;
000792  484e              LDR      r0,|L1.2252|
000794  6801              LDR      r1,[r0,#0]  ; TempCurrent
000796  4845              LDR      r0,|L1.2220|
000798  6800              LDR      r0,[r0,#0]  ; TempSet
00079a  f7fffffe          BL       __aeabi_fsub
00079e  4930              LDR      r1,|L1.2144|
0007a0  6008              STR      r0,[r1,#0]  ; PID_Err_Rec
;;;543    		//PID_Err_Rec[INDEX0].Inte_Err+=PID_Err_Rec[INDEX0].Current_Err;
;;;544    		PID_Err_Rec[INDEX0].Previous_Derr= PID_Err_Rec[INDEX0].Current_Derr;
0007a2  4608              MOV      r0,r1
0007a4  6880              LDR      r0,[r0,#8]  ; PID_Err_Rec
0007a6  60c8              STR      r0,[r1,#0xc]  ; PID_Err_Rec
;;;545    		PID_Err_Rec[INDEX0].Current_Derr= PID_Err_Rec[INDEX0].Current_Err-PID_Err_Rec[INDEX0].Previous_Err;
0007a8  460a              MOV      r2,r1
0007aa  6851              LDR      r1,[r2,#4]  ; PID_Err_Rec
0007ac  6810              LDR      r0,[r2,#0]  ; PID_Err_Rec
0007ae  f7fffffe          BL       __aeabi_fsub
0007b2  492b              LDR      r1,|L1.2144|
0007b4  6088              STR      r0,[r1,#8]  ; PID_Err_Rec
;;;546    
;;;547    		DutyDiff=PID_Cal(INDEX0,TempCurrent);
0007b6  4845              LDR      r0,|L1.2252|
0007b8  6801              LDR      r1,[r0,#0]  ; TempCurrent
0007ba  2000              MOVS     r0,#0
0007bc  f7fffffe          BL       PID_Cal
0007c0  4604              MOV      r4,r0
;;;548    		if((DutyDiff)>MAX_DUTY)
0007c2  f5b47ffa          CMP      r4,#0x1f4
0007c6  dd02              BLE      |L1.1998|
;;;549    				DutyDiff=MAX_DUTY;
0007c8  f44f74fa          MOV      r4,#0x1f4
0007cc  e002              B        |L1.2004|
                  |L1.1998|
;;;550    		else if	((DutyDiff)<MIN_DUTY)
0007ce  2c00              CMP      r4,#0
0007d0  da00              BGE      |L1.2004|
;;;551    					DutyDiff=MIN_DUTY;	
0007d2  2400              MOVS     r4,#0
                  |L1.2004|
;;;552    		DutyCycle=DutyDiff;
0007d4  493f              LDR      r1,|L1.2260|
0007d6  800c              STRH     r4,[r1,#0]
;;;553    		TIM4->CCR3=DutyCycle;
0007d8  4608              MOV      r0,r1
0007da  8800              LDRH     r0,[r0,#0]  ; DutyCycle
0007dc  492b              LDR      r1,|L1.2188|
0007de  313c              ADDS     r1,r1,#0x3c
0007e0  8008              STRH     r0,[r1,#0]
                  |L1.2018|
;;;554    	} 
;;;555    	
;;;556    	if((TickLock & 0x2)!=0) 
0007e2  4829              LDR      r0,|L1.2184|
0007e4  7800              LDRB     r0,[r0,#0]  ; TickLock
0007e6  f0100f02          TST      r0,#2
0007ea  d032              BEQ      |L1.2130|
;;;557    	{
;;;558    		
;;;559    		if(TempCtrl_Active_2==3)
0007ec  483a              LDR      r0,|L1.2264|
0007ee  7800              LDRB     r0,[r0,#0]  ; TempCtrl_Active_2
0007f0  2803              CMP      r0,#3
0007f2  d107              BNE      |L1.2052|
;;;560    		{
;;;561    			TempTickLength_2--;
0007f4  4839              LDR      r0,|L1.2268|
0007f6  8800              LDRH     r0,[r0,#0]  ; TempTickLength_2
0007f8  1e40              SUBS     r0,r0,#1
0007fa  4938              LDR      r1,|L1.2268|
0007fc  8008              STRH     r0,[r1,#0]
;;;562    			LED_CTRL=1;
0007fe  2001              MOVS     r0,#1
000800  4937              LDR      r1,|L1.2272|
000802  6008              STR      r0,[r1,#0]
                  |L1.2052|
;;;563    		}
;;;564    		if(TempTickLength_2==0)
000804  4835              LDR      r0,|L1.2268|
000806  8800              LDRH     r0,[r0,#0]  ; TempTickLength_2
000808  b9d0              CBNZ     r0,|L1.2112|
;;;565    		{
;;;566    			TempCtrl_Active_2=4;
00080a  2004              MOVS     r0,#4
00080c  4932              LDR      r1,|L1.2264|
00080e  7008              STRB     r0,[r1,#0]
;;;567    			LED_CTRL=0;
000810  2000              MOVS     r0,#0
000812  4933              LDR      r1,|L1.2272|
000814  6008              STR      r0,[r1,#0]
;;;568    			if(CycleSTS != READY)
000816  482b              LDR      r0,|L1.2244|
000818  7800              LDRB     r0,[r0,#0]  ; CycleSTS
00081a  b188              CBZ      r0,|L1.2112|
;;;569    			{
;;;570    				PushMsg(SS2_TMOUT);	  // @0607, sensor2 timout msg push 
00081c  2002              MOVS     r0,#2
00081e  f7fffffe          BL       PushMsg
;;;571    				if((( PCR_Cycle_Control.TotalCycle==Cycle_Check())&&(PCR_Cycle_Control.TotalStage==Stage_Check()))) // No cycle control
000822  f7fffffe          BL       Cycle_Check
000826  492f              LDR      r1,|L1.2276|
000828  7849              LDRB     r1,[r1,#1]  ; PCR_Cycle_Control
00082a  4288              CMP      r0,r1
00082c  d108              BNE      |L1.2112|
00082e  f7fffffe          BL       Stage_Check
000832  492c              LDR      r1,|L1.2276|
000834  78c9              LDRB     r1,[r1,#3]  ; PCR_Cycle_Control
000836  4288              CMP      r0,r1
000838  d102              BNE      |L1.2112|
;;;572    					PushMsg(SS2_CY_CMP);
00083a  2010              MOVS     r0,#0x10
00083c  f7fffffe          BL       PushMsg
                  |L1.2112|
;;;573    			}
;;;574    		}
;;;575    		if(Control_2_Dir==POS_DIR)		
000840  480a              LDR      r0,|L1.2156|
000842  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
000844  2801              CMP      r0,#1
000846  d156              BNE      |L1.2294|
;;;576    			RegE_2=TempDelta_2=TempSet_2-TempCurrent_2;
000848  4807              LDR      r0,|L1.2152|
00084a  6801              LDR      r1,[r0,#0]  ; TempCurrent_2
00084c  4805              LDR      r0,|L1.2148|
00084e  6800              LDR      r0,[r0,#0]  ; TempSet_2
000850  e04a              B        |L1.2280|
                  |L1.2130|
000852  e108              B        |L1.2662|
                  |L1.2132|
                          DCD      0x40013400
                  |L1.2136|
                          DCD      0x40013000
                  |L1.2140|
                          DCD      0x40021000
                  |L1.2144|
                          DCD      PID_Err_Rec
                  |L1.2148|
                          DCD      TempSet_2
                  |L1.2152|
                          DCD      TempCurrent_2
                  |L1.2156|
                          DCD      Control_2_Dir
                  |L1.2160|
                          DCD      TempDelta_2
                  |L1.2164|
                          DCD      RegE
                  |L1.2168|
                          DCD      RegE2_2
                  |L1.2172|
                          DCD      RegE1_2
                  |L1.2176|
                          DCD      DutyDelta_2
                  |L1.2180|
                          DCD      DutyCycle_2
                  |L1.2184|
                          DCD      TickLock
                  |L1.2188|
                          DCD      0x40000800
                  |L1.2192|
                          DCD      0x40001000
                  |L1.2196|
                          DCD      0x40010c04
                  |L1.2200|
                          DCD      0x40010000
                  |L1.2204|
                          DCD      0x40012c34
                  |L1.2208|
                          DCD      Ktm
                  |L1.2212|
                          DCD      ||Ki||
                  |L1.2216|
                          DCD      ||Kl||
                  |L1.2220|
                          DCD      TempSet
                  |L1.2224|
                          DCD      ||Kp||
                  |L1.2228|
                          DCD      ||.data||+0x16
                  |L1.2232|
                          DCD      ||rec||
                  |L1.2236|
                          DCD      0x422401ac
                  |L1.2240|
                          DCD      TempCtrl_Active
                  |L1.2244|
                          DCD      CycleSTS
                  |L1.2248|
                          DCD      TempTickLength
                  |L1.2252|
                          DCD      TempCurrent
                  |L1.2256|
                          DCD      TempDelta
                  |L1.2260|
                          DCD      DutyCycle
                  |L1.2264|
                          DCD      TempCtrl_Active_2
                  |L1.2268|
                          DCD      TempTickLength_2
                  |L1.2272|
                          DCD      0x42238194
                  |L1.2276|
                          DCD      PCR_Cycle_Control
                  |L1.2280|
0008e8  f7fffffe          BL       __aeabi_fsub
0008ec  49fa              LDR      r1,|L1.3288|
0008ee  6008              STR      r0,[r1,#0]  ; TempDelta_2
0008f0  49fa              LDR      r1,|L1.3292|
0008f2  6008              STR      r0,[r1,#0]  ; RegE_2
0008f4  e01e              B        |L1.2356|
                  |L1.2294|
;;;577    		else if(Control_2_Dir==NEG_DIR)
0008f6  48fa              LDR      r0,|L1.3296|
0008f8  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
0008fa  2802              CMP      r0,#2
0008fc  d11a              BNE      |L1.2356|
;;;578    			{
;;;579    		    	RegE_2=TempDelta_2=TempCurrent_2-TempSet_2;
0008fe  48f9              LDR      r0,|L1.3300|
000900  6801              LDR      r1,[r0,#0]  ; TempSet_2
000902  48f9              LDR      r0,|L1.3304|
000904  6800              LDR      r0,[r0,#0]  ; TempCurrent_2
000906  f7fffffe          BL       __aeabi_fsub
00090a  49f3              LDR      r1,|L1.3288|
00090c  6008              STR      r0,[r1,#0]  ; TempDelta_2
00090e  49f3              LDR      r1,|L1.3292|
000910  6008              STR      r0,[r1,#0]  ; RegE_2
;;;580    				if((TempDelta_2<TEMP_GAP_SWAP)&&(TempCtrl_Active_2 !=4))  // to swap the current of peltier
000912  f04f4182          MOV      r1,#0x41000000
000916  48f0              LDR      r0,|L1.3288|
000918  6800              LDR      r0,[r0,#0]  ; TempDelta_2
00091a  f7fffffe          BL       __aeabi_cfcmple
00091e  d209              BCS      |L1.2356|
000920  48f2              LDR      r0,|L1.3308|
000922  7800              LDRB     r0,[r0,#0]  ; TempCtrl_Active_2
000924  2804              CMP      r0,#4
000926  d005              BEQ      |L1.2356|
;;;581    				{
;;;582    					Peltier_Swap_Msg |= SENSOR_2;
000928  48f1              LDR      r0,|L1.3312|
00092a  7800              LDRB     r0,[r0,#0]  ; Peltier_Swap_Msg
00092c  f0400002          ORR      r0,r0,#2
000930  49ef              LDR      r1,|L1.3312|
000932  7008              STRB     r0,[r1,#0]
                  |L1.2356|
;;;583    				}
;;;584    			}
;;;585    		if(TempCtrl_Active_2==2) 
000934  48ed              LDR      r0,|L1.3308|
000936  7800              LDRB     r0,[r0,#0]  ; TempCtrl_Active_2
000938  2802              CMP      r0,#2
00093a  d110              BNE      |L1.2398|
;;;586    		{
;;;587    			if((TempDelta_2>=-2) && (TempDelta_2<=2))
00093c  f04f4140          MOV      r1,#0xc0000000
000940  48e5              LDR      r0,|L1.3288|
000942  6800              LDR      r0,[r0,#0]  ; TempDelta_2
000944  f7fffffe          BL       __aeabi_cfrcmple
000948  d809              BHI      |L1.2398|
00094a  f04f4180          MOV      r1,#0x40000000
00094e  48e2              LDR      r0,|L1.3288|
000950  6800              LDR      r0,[r0,#0]  ; TempDelta_2
000952  f7fffffe          BL       __aeabi_cfcmple
000956  d802              BHI      |L1.2398|
;;;588    				TempCtrl_Active_2=3;
000958  2003              MOVS     r0,#3
00095a  49e4              LDR      r1,|L1.3308|
00095c  7008              STRB     r0,[r1,#0]
                  |L1.2398|
;;;589    		}
;;;590    /*	
;;;591    		if(TempDelta_2>0)
;;;592    		{
;;;593    			//DutyDiff=PID_Cal(TempDelta_2);
;;;594    			DutyDiff=PID_Cal(INDEX1);
;;;595    			if((DutyCycle_2+DutyDiff)<MAX_DUTY)
;;;596    				DutyCycle_2+=DutyDiff;
;;;597    			else
;;;598    				DutyCycle_2=MAX_DUTY;
;;;599    			
;;;600    //			if(Control_2_Dir==NEG_DIR)
;;;601    //					DutyCycle_2= ((DutyCycle_2>(MAX_DUTY/2)))? (MAX_DUTY/2)	: DutyCycle_2;
;;;602    		}
;;;603    		else if(TempDelta_2<0)
;;;604    			{
;;;605    				DutyDiff=PID_Cal(-TempDelta_2);
;;;606    				if((DutyCycle_2-DutyDiff)>MIN_DUTY)
;;;607    					DutyCycle_2-=DutyDiff;
;;;608    				else
;;;609    					DutyCycle_2=MIN_DUTY;					
;;;610    			
;;;611    			}
;;;612    */
;;;613    /*
;;;614    		DutyDiff=PID_Cal(INDEX1);
;;;615    		if((DutyCycle_2+DutyDiff)>MAX_DUTY)
;;;616    				DutyCycle_2=MAX_DUTY;
;;;617    		else if	((DutyCycle_2+DutyDiff)<MIN_DUTY)
;;;618    					DutyCycle_2=MIN_DUTY;
;;;619    				else
;;;620    					DutyCycle_2+= DutyDiff;
;;;621    */
;;;622    		PID_Err_Rec[INDEX1].Previous_Err=PID_Err_Rec[INDEX1].Current_Err;
00095e  48e5              LDR      r0,|L1.3316|
000960  6941              LDR      r1,[r0,#0x14]  ; PID_Err_Rec
000962  6181              STR      r1,[r0,#0x18]
;;;623    		PID_Err_Rec[INDEX1].Current_Err= (Control_2_Dir==POS_DIR)? (TempSet_2 -TempCurrent_2):(TempCurrent_2-TempSet_2);
000964  48de              LDR      r0,|L1.3296|
000966  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
000968  2801              CMP      r0,#1
00096a  d106              BNE      |L1.2426|
00096c  48de              LDR      r0,|L1.3304|
00096e  6801              LDR      r1,[r0,#0]  ; TempCurrent_2
000970  48dc              LDR      r0,|L1.3300|
000972  6800              LDR      r0,[r0,#0]  ; TempSet_2
000974  f7fffffe          BL       __aeabi_fsub
000978  e005              B        |L1.2438|
                  |L1.2426|
00097a  48da              LDR      r0,|L1.3300|
00097c  6801              LDR      r1,[r0,#0]  ; TempSet_2
00097e  48da              LDR      r0,|L1.3304|
000980  6800              LDR      r0,[r0,#0]  ; TempCurrent_2
000982  f7fffffe          BL       __aeabi_fsub
                  |L1.2438|
000986  49db              LDR      r1,|L1.3316|
000988  6148              STR      r0,[r1,#0x14]  ; PID_Err_Rec
;;;624    		
;;;625    		PID_Err_Rec[INDEX1].Previous_Derr= PID_Err_Rec[INDEX1].Current_Derr;
00098a  4608              MOV      r0,r1
00098c  69c1              LDR      r1,[r0,#0x1c]
00098e  6201              STR      r1,[r0,#0x20]
;;;626    		PID_Err_Rec[INDEX1].Current_Derr= PID_Err_Rec[INDEX1].Current_Err-PID_Err_Rec[INDEX1].Previous_Err;
000990  4602              MOV      r2,r0
000992  6991              LDR      r1,[r2,#0x18]
000994  6950              LDR      r0,[r2,#0x14]  ; PID_Err_Rec
000996  f7fffffe          BL       __aeabi_fsub
00099a  49d6              LDR      r1,|L1.3316|
00099c  61c8              STR      r0,[r1,#0x1c]
;;;627    		/*
;;;628    		DutyDiff=PID_Cal(INDEX1);
;;;629    		if((DutyCycle_2+DutyDiff)>MAX_DUTY)
;;;630    				DutyCycle_2=MAX_DUTY;
;;;631    		else if	((DutyCycle_2+DutyDiff)<MIN_DUTY)
;;;632    					DutyCycle_2=MIN_DUTY;
;;;633    				else
;;;634    					DutyCycle_2+=DutyDiff;
;;;635    
;;;636    		Channel_2_Load(Control_2_Dir,DutyCycle_2);
;;;637    		*/
;;;638    
;;;639    		if(!((TempDelta_2>= -0.25) && (TempDelta_2<= 0.25)))
00099e  48ce              LDR      r0,|L1.3288|
0009a0  6800              LDR      r0,[r0,#0]  ; TempDelta_2
0009a2  f7fffffe          BL       __aeabi_f2d
0009a6  e9cd0100          STRD     r0,r1,[sp,#0]
0009aa  a0d3              ADR      r0,|L1.3320|
0009ac  c80c              LDM      r0!,{r2,r3}
0009ae  9800              LDR      r0,[sp,#0]
0009b0  f7fffffe          BL       __aeabi_cdrcmple
0009b4  d80b              BHI      |L1.2510|
0009b6  48c8              LDR      r0,|L1.3288|
0009b8  6800              LDR      r0,[r0,#0]  ; TempDelta_2
0009ba  f7fffffe          BL       __aeabi_f2d
0009be  e9cd0102          STRD     r0,r1,[sp,#8]
0009c2  a0cf              ADR      r0,|L1.3328|
0009c4  c80c              LDM      r0!,{r2,r3}
0009c6  9802              LDR      r0,[sp,#8]
0009c8  f7fffffe          BL       __aeabi_cdcmple
0009cc  d94b              BLS      |L1.2662|
                  |L1.2510|
;;;640    		{
;;;641    		DutyDiff=PID_Cal(INDEX1,TempCurrent_2);
0009ce  48c6              LDR      r0,|L1.3304|
0009d0  6801              LDR      r1,[r0,#0]  ; TempCurrent_2
0009d2  2001              MOVS     r0,#1
0009d4  f7fffffe          BL       PID_Cal
0009d8  4604              MOV      r4,r0
;;;642    		if((DutyDiff)>MAX_DUTY)
0009da  f5b47ffa          CMP      r4,#0x1f4
0009de  dd02              BLE      |L1.2534|
;;;643    				DutyDiff=MAX_DUTY;
0009e0  f44f74fa          MOV      r4,#0x1f4
0009e4  e002              B        |L1.2540|
                  |L1.2534|
;;;644    		else if	((DutyDiff)<MIN_DUTY)
0009e6  2c00              CMP      r4,#0
0009e8  da00              BGE      |L1.2540|
;;;645    					DutyDiff=MIN_DUTY;
0009ea  2400              MOVS     r4,#0
                  |L1.2540|
;;;646    		//////////////////////////
;;;647    		if(Control_2_Dir==NEG_DIR)
0009ec  48bc              LDR      r0,|L1.3296|
0009ee  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
0009f0  2802              CMP      r0,#2
0009f2  d101              BNE      |L1.2552|
;;;648    		{
;;;649    			DutyDiff=25;
0009f4  2419              MOVS     r4,#0x19
0009f6  e031              B        |L1.2652|
                  |L1.2552|
;;;650    		}else if(DutyDiff==0)
0009f8  b9e4              CBNZ     r4,|L1.2612|
;;;651    			{
;;;652    				if(Pwm_Pos_Lock==OPEN)
0009fa  48c3              LDR      r0,|L1.3336|
0009fc  7800              LDRB     r0,[r0,#0]  ; Pwm_Pos_Lock
0009fe  2801              CMP      r0,#1
000a00  d12c              BNE      |L1.2652|
;;;653    				{
;;;654    					Pwm_Pos_Lock=SHUT;
000a02  2000              MOVS     r0,#0
000a04  49c0              LDR      r1,|L1.3336|
000a06  7008              STRB     r0,[r1,#0]
;;;655    					GPIOA->CRH&=0XFFFFFFF0; 
000a08  48c0              LDR      r0,|L1.3340|
000a0a  6800              LDR      r0,[r0,#0]
000a0c  f020000f          BIC      r0,r0,#0xf
000a10  49bf              LDR      r1,|L1.3344|
000a12  f8c10804          STR      r0,[r1,#0x804]
;;;656    			 		GPIOA->CRH|=0X00000003;
000a16  4608              MOV      r0,r1
000a18  f8d00804          LDR      r0,[r0,#0x804]
000a1c  f0400003          ORR      r0,r0,#3
000a20  f8c10804          STR      r0,[r1,#0x804]
;;;657    			 		GPIOA->ODR&=~(u32)(1<<8);
000a24  4608              MOV      r0,r1
000a26  f8d0080c          LDR      r0,[r0,#0x80c]
000a2a  f4207080          BIC      r0,r0,#0x100
000a2e  f8c1080c          STR      r0,[r1,#0x80c]
000a32  e013              B        |L1.2652|
                  |L1.2612|
;;;658    				}
;;;659    			}else if(Pwm_Pos_Lock==SHUT)
000a34  48b4              LDR      r0,|L1.3336|
000a36  7800              LDRB     r0,[r0,#0]  ; Pwm_Pos_Lock
000a38  b980              CBNZ     r0,|L1.2652|
;;;660    				{
;;;661    					Pwm_Pos_Lock=OPEN;
000a3a  2001              MOVS     r0,#1
000a3c  49b2              LDR      r1,|L1.3336|
000a3e  7008              STRB     r0,[r1,#0]
;;;662    					GPIOA->CRH&=0XFFFFFFF0; 
000a40  48b2              LDR      r0,|L1.3340|
000a42  6800              LDR      r0,[r0,#0]
000a44  f020000f          BIC      r0,r0,#0xf
000a48  49b1              LDR      r1,|L1.3344|
000a4a  f8c10804          STR      r0,[r1,#0x804]
;;;663    					GPIOA->CRH|=0X0000000B;	
000a4e  4608              MOV      r0,r1
000a50  f8d00804          LDR      r0,[r0,#0x804]
000a54  f040000b          ORR      r0,r0,#0xb
000a58  f8c10804          STR      r0,[r1,#0x804]
                  |L1.2652|
;;;664    				}
;;;665    		//////////////////////////
;;;666    		Channel_2_Load(Control_2_Dir,DutyDiff);
000a5c  b2a1              UXTH     r1,r4
000a5e  48a0              LDR      r0,|L1.3296|
000a60  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
000a62  f7fffffe          BL       Channel_2_Load
                  |L1.2662|
;;;667    		}
;;;668    	}  
;;;669    }
000a66  bd1f              POP      {r0-r4,pc}
;;;670    
                          ENDP

                  PID_Clear PROC
;;;789    
;;;790    void PID_Clear(u8 INDEX)
000a68  2100              MOVS     r1,#0
;;;791    {
;;;792     	PID_Err_Rec[INDEX].Current_Err=0;
000a6a  eb000280          ADD      r2,r0,r0,LSL #2
000a6e  4ba1              LDR      r3,|L1.3316|
000a70  f8431022          STR      r1,[r3,r2,LSL #2]
;;;793    	PID_Err_Rec[INDEX].Previous_Err=0;
000a74  eb000280          ADD      r2,r0,r0,LSL #2
000a78  eb030282          ADD      r2,r3,r2,LSL #2
000a7c  6051              STR      r1,[r2,#4]
;;;794    	PID_Err_Rec[INDEX].Current_Derr=0;
000a7e  eb000280          ADD      r2,r0,r0,LSL #2
000a82  eb030282          ADD      r2,r3,r2,LSL #2
000a86  6091              STR      r1,[r2,#8]
;;;795    	PID_Err_Rec[INDEX].Previous_Derr=0;
000a88  eb000280          ADD      r2,r0,r0,LSL #2
000a8c  eb030282          ADD      r2,r3,r2,LSL #2
000a90  60d1              STR      r1,[r2,#0xc]
;;;796    	PID_Err_Rec[INDEX].Inte_Err=0;
000a92  eb000280          ADD      r2,r0,r0,LSL #2
000a96  eb030282          ADD      r2,r3,r2,LSL #2
000a9a  6111              STR      r1,[r2,#0x10]
;;;797    }
000a9c  4770              BX       lr
;;;798    
                          ENDP

                  Channel_Swap PROC
;;;768    
;;;769    void Channel_Swap(u8 sensor_num)
000a9e  b510              PUSH     {r4,lr}
;;;770    {
000aa0  4604              MOV      r4,r0
;;;771     	if(sensor_num==SENSOR_2)  // only sensor_2 is valid now
000aa2  2c02              CMP      r4,#2
000aa4  d124              BNE      |L1.2800|
;;;772    	{
;;;773    		
;;;774    		TIM6->DIER&= ~0x1;
000aa6  489b              LDR      r0,|L1.3348|
000aa8  8980              LDRH     r0,[r0,#0xc]
000aaa  f0200001          BIC      r0,r0,#1
000aae  4999              LDR      r1,|L1.3348|
000ab0  8188              STRH     r0,[r1,#0xc]
;;;775    		Peltier_Swap_Msg &=  ~SENSOR_2;
000ab2  488f              LDR      r0,|L1.3312|
000ab4  7800              LDRB     r0,[r0,#0]  ; Peltier_Swap_Msg
000ab6  f0200002          BIC      r0,r0,#2
000aba  498d              LDR      r1,|L1.3312|
000abc  7008              STRB     r0,[r1,#0]
;;;776    		if(Control_2_Dir==NEG_DIR)
000abe  4888              LDR      r0,|L1.3296|
000ac0  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
000ac2  2802              CMP      r0,#2
000ac4  d10e              BNE      |L1.2788|
;;;777    		{
;;;778    			PID_Clear(SENSOR2_INDEX);
000ac6  2001              MOVS     r0,#1
000ac8  f7fffffe          BL       PID_Clear
;;;779    			Control_2_Dir=POS_DIR;
000acc  2001              MOVS     r0,#1
000ace  4984              LDR      r1,|L1.3296|
000ad0  7008              STRB     r0,[r1,#0]
;;;780    			PWM1_Init();
000ad2  f7fffffe          BL       PWM1_Init
;;;781    			Channel2_PWM_Start(Control_2_Dir);
000ad6  4882              LDR      r0,|L1.3296|
000ad8  7800              LDRB     r0,[r0,#0]  ; Control_2_Dir
000ada  f7fffffe          BL       Channel2_PWM_Start
;;;782    			FanCtrl_Auto(0);  // auto stop fan in case fan runing in cooling stage	
000ade  2000              MOVS     r0,#0
000ae0  f7fffffe          BL       FanCtrl_Auto
                  |L1.2788|
;;;783    		}
;;;784    		TIM6->DIER|= 0x1;	
000ae4  488b              LDR      r0,|L1.3348|
000ae6  8980              LDRH     r0,[r0,#0xc]
000ae8  f0400001          ORR      r0,r0,#1
000aec  4989              LDR      r1,|L1.3348|
000aee  8188              STRH     r0,[r1,#0xc]
                  |L1.2800|
;;;785    
;;;786    	}
;;;787    }
000af0  bd10              POP      {r4,pc}
;;;788    
                          ENDP

                  Sensor_Cfg_Write PROC
;;;878    #ifdef __SENSOR_TMP112
;;;879    bool Sensor_Cfg_Write(u8 idx, u16 dt)
000af2  b570              PUSH     {r4-r6,lr}
;;;880    {  
000af4  4604              MOV      r4,r0
000af6  460d              MOV      r5,r1
;;;881       u8 TMP_NACK;
;;;882       TMP_NACK=0;
000af8  2600              MOVS     r6,#0
;;;883    
;;;884     	do
000afa  bf00              NOP      
                  |L1.2812|
;;;885    	{
;;;886    		IIC_Start();
000afc  f7fffffe          BL       IIC_Start
;;;887    		IIC_Send_Byte(Sensor_Addr[idx]);
000b00  4985              LDR      r1,|L1.3352|
000b02  5d08              LDRB     r0,[r1,r4]
000b04  f7fffffe          BL       IIC_Send_Byte
;;;888    		if(IIC_Wait_Ack()==0)
000b08  f7fffffe          BL       IIC_Wait_Ack
000b0c  b9e8              CBNZ     r0,|L1.2890|
;;;889    		{
;;;890    			IIC_Send_Byte(0x1);
000b0e  2001              MOVS     r0,#1
000b10  f7fffffe          BL       IIC_Send_Byte
;;;891    			if(IIC_Wait_Ack()==0)
000b14  f7fffffe          BL       IIC_Wait_Ack
000b18  b9a0              CBNZ     r0,|L1.2884|
;;;892    			{
;;;893    				//IIC_Start();
;;;894    				//IIC_Send_Byte(Sensor_Addr[idx]);
;;;895    				//if(IIC_Wait_Ack()==0)
;;;896    				{
;;;897    					IIC_Send_Byte((u8)(dt>>8));
000b1a  1228              ASRS     r0,r5,#8
000b1c  f7fffffe          BL       IIC_Send_Byte
;;;898    					if(IIC_Wait_Ack()==0)
000b20  f7fffffe          BL       IIC_Wait_Ack
000b24  b958              CBNZ     r0,|L1.2878|
;;;899    					{
;;;900    						IIC_Send_Byte((u8)(dt));
000b26  b2e8              UXTB     r0,r5
000b28  f7fffffe          BL       IIC_Send_Byte
;;;901    						if(IIC_Wait_Ack()==0)
000b2c  f7fffffe          BL       IIC_Wait_Ack
000b30  b910              CBNZ     r0,|L1.2872|
;;;902    						  	IIC_Stop();
000b32  f7fffffe          BL       IIC_Stop
000b36  e00a              B        |L1.2894|
                  |L1.2872|
;;;903    						else
;;;904    						    TMP_NACK++;
000b38  1c70              ADDS     r0,r6,#1
000b3a  b2c6              UXTB     r6,r0
000b3c  e007              B        |L1.2894|
                  |L1.2878|
;;;905    					}	
;;;906    					else
;;;907    						TMP_NACK++;
000b3e  1c70              ADDS     r0,r6,#1
000b40  b2c6              UXTB     r6,r0
000b42  e004              B        |L1.2894|
                  |L1.2884|
;;;908    				}
;;;909    				//else
;;;910    				//	TMP_NACK++;	
;;;911    			}
;;;912    			else
;;;913    				TMP_NACK++;	
000b44  1c70              ADDS     r0,r6,#1
000b46  b2c6              UXTB     r6,r0
000b48  e001              B        |L1.2894|
                  |L1.2890|
;;;914    		}
;;;915    		else
;;;916    			TMP_NACK++;
000b4a  1c70              ADDS     r0,r6,#1
000b4c  b2c6              UXTB     r6,r0
                  |L1.2894|
;;;917    
;;;918    	}while((TMP_NACK != 0)&&(TMP_NACK<5));
000b4e  b10e              CBZ      r6,|L1.2900|
000b50  2e05              CMP      r6,#5
000b52  dbd3              BLT      |L1.2812|
                  |L1.2900|
;;;919    
;;;920       	if(TMP_NACK==0)
000b54  b90e              CBNZ     r6,|L1.2906|
;;;921    		return TRUE;
000b56  2001              MOVS     r0,#1
                  |L1.2904|
;;;922    	else
;;;923       		return FALSE;
;;;924    } 
000b58  bd70              POP      {r4-r6,pc}
                  |L1.2906|
000b5a  2000              MOVS     r0,#0                 ;923
000b5c  e7fc              B        |L1.2904|
;;;925    
                          ENDP

                  Sensor_Cfg_Read PROC
;;;926    u16 Sensor_Cfg_Read(u8 idx)
000b5e  b570              PUSH     {r4-r6,lr}
;;;927    {
000b60  4604              MOV      r4,r0
;;;928       u16 dt;
;;;929       u8 TMP_NACK;
;;;930    
;;;931       TMP_NACK=0;
000b62  2600              MOVS     r6,#0
;;;932       dt=0;
000b64  2500              MOVS     r5,#0
;;;933     	do
000b66  bf00              NOP      
                  |L1.2920|
;;;934    	{
;;;935    		IIC_Start();
000b68  f7fffffe          BL       IIC_Start
;;;936    		IIC_Send_Byte(Sensor_Addr[idx]);
000b6c  496a              LDR      r1,|L1.3352|
000b6e  5d08              LDRB     r0,[r1,r4]
000b70  f7fffffe          BL       IIC_Send_Byte
;;;937    		if(IIC_Wait_Ack()==0)
000b74  f7fffffe          BL       IIC_Wait_Ack
000b78  bb18              CBNZ     r0,|L1.3010|
;;;938    		{
;;;939    			IIC_Send_Byte(0x1);
000b7a  2001              MOVS     r0,#1
000b7c  f7fffffe          BL       IIC_Send_Byte
;;;940    			if(IIC_Wait_Ack()==0)
000b80  f7fffffe          BL       IIC_Wait_Ack
000b84  b9d0              CBNZ     r0,|L1.3004|
;;;941    			{
;;;942    				IIC_Start();
000b86  f7fffffe          BL       IIC_Start
;;;943    				IIC_Send_Byte((Sensor_Addr[idx]|0x1));
000b8a  4963              LDR      r1,|L1.3352|
000b8c  5d09              LDRB     r1,[r1,r4]
000b8e  f0410001          ORR      r0,r1,#1
000b92  f7fffffe          BL       IIC_Send_Byte
;;;944    				if(IIC_Wait_Ack()==0)
000b96  f7fffffe          BL       IIC_Wait_Ack
000b9a  b960              CBNZ     r0,|L1.2998|
;;;945    				{
;;;946    					dt=IIC_Read_Byte(1);
000b9c  2001              MOVS     r0,#1
000b9e  f7fffffe          BL       IIC_Read_Byte
000ba2  4605              MOV      r5,r0
;;;947    					dt<<=8;
000ba4  022d              LSLS     r5,r5,#8
;;;948    					dt |=IIC_Read_Byte(0);
000ba6  2000              MOVS     r0,#0
000ba8  f7fffffe          BL       IIC_Read_Byte
000bac  4305              ORRS     r5,r5,r0
;;;949    					IIC_Stop();
000bae  f7fffffe          BL       IIC_Stop
;;;950    					TMP_NACK=0;
000bb2  2600              MOVS     r6,#0
000bb4  e007              B        |L1.3014|
                  |L1.2998|
;;;951    				}
;;;952    				else
;;;953    					TMP_NACK++;	
000bb6  1c70              ADDS     r0,r6,#1
000bb8  b2c6              UXTB     r6,r0
000bba  e004              B        |L1.3014|
                  |L1.3004|
;;;954    			}
;;;955    			else
;;;956    				TMP_NACK++;	
000bbc  1c70              ADDS     r0,r6,#1
000bbe  b2c6              UXTB     r6,r0
000bc0  e001              B        |L1.3014|
                  |L1.3010|
;;;957    		}
;;;958    		else
;;;959    			TMP_NACK++;
000bc2  1c70              ADDS     r0,r6,#1
000bc4  b2c6              UXTB     r6,r0
                  |L1.3014|
;;;960    
;;;961    	}while((TMP_NACK != 0)&&(TMP_NACK<5));
000bc6  b10e              CBZ      r6,|L1.3020|
000bc8  2e05              CMP      r6,#5
000bca  dbcd              BLT      |L1.2920|
                  |L1.3020|
;;;962    
;;;963    	return 	dt;	
000bcc  4628              MOV      r0,r5
;;;964    }
000bce  bd70              POP      {r4-r6,pc}
;;;965    #endif
                          ENDP

                  Sensor_Res_Init PROC
;;;966    
;;;967    void Sensor_Res_Init(void)
000bd0  b570              PUSH     {r4-r6,lr}
;;;968    {
;;;969    	u8 i;
;;;970    	#ifdef __SENSOR_TMP100
;;;971    	u8 u8temp;
;;;972    	#else 
;;;973    	#ifdef __SENSOR_TMP112
;;;974    	u16 u16temp;
;;;975    	#endif
;;;976    	#endif
;;;977    
;;;978    	for(i=0;i<SENSOR_TOTAL;i++)
000bd2  2400              MOVS     r4,#0
000bd4  e00b              B        |L1.3054|
                  |L1.3030|
;;;979    	{
;;;980    		#ifdef __SENSOR_TMP100
;;;981    		u8temp=Sensor_Cfg_Read(i);
;;;982    		u8temp &= ~SENSOR_CFG_MSK;
;;;983    		u8temp |= SENSOR_R1_R0;
;;;984    		Sensor_Cfg_Write(i,u8temp);	
;;;985    	    //u8temp=Sensor_Cfg_Read(SENSOR2_INDEX);
;;;986    		#else 
;;;987    		#ifdef __SENSOR_TMP112
;;;988    		u16temp=Sensor_Cfg_Read(i);
000bd6  4620              MOV      r0,r4
000bd8  f7fffffe          BL       Sensor_Cfg_Read
000bdc  4605              MOV      r5,r0
;;;989    		u16temp |= (SENSOR_CR1_CR0<<6);
000bde  f4456588          ORR      r5,r5,#0x440
;;;990    		Sensor_Cfg_Write(i,u16temp);
000be2  4629              MOV      r1,r5
000be4  4620              MOV      r0,r4
000be6  f7fffffe          BL       Sensor_Cfg_Write
000bea  1c60              ADDS     r0,r4,#1              ;978
000bec  b2c4              UXTB     r4,r0                 ;978
                  |L1.3054|
000bee  2c02              CMP      r4,#2                 ;978
000bf0  dbf1              BLT      |L1.3030|
;;;991    		#endif
;;;992    		#endif
;;;993    	}
;;;994    }
000bf2  bd70              POP      {r4-r6,pc}
;;;995    
                          ENDP

                  PollMsg PROC
;;;996    
;;;997    MsgQ PollMsg(void)
000bf4  4844              LDR      r0,|L1.3336|
;;;998    {
;;;999     	return MsgStk;
000bf6  1c40              ADDS     r0,r0,#1
000bf8  7800              LDRB     r0,[r0,#0]  ; MsgStk
;;;1000   }
000bfa  4770              BX       lr
;;;1001   
                          ENDP

                  ClearMsg PROC
;;;1002   void ClearMsg(void)
000bfc  2000              MOVS     r0,#0
;;;1003   {
;;;1004   	MsgStk=0;
000bfe  4942              LDR      r1,|L1.3336|
000c00  1c49              ADDS     r1,r1,#1
000c02  7008              STRB     r0,[r1,#0]
;;;1005   }
000c04  4770              BX       lr
;;;1006   
                          ENDP

                  MsgHandler PROC
;;;1007   void MsgHandler(void)
000c06  b510              PUSH     {r4,lr}
;;;1008   {
;;;1009   //	u8 u8temp=TickLock;
;;;1010   	if(MsgStk !=EMPTY)
000c08  483f              LDR      r0,|L1.3336|
000c0a  1c40              ADDS     r0,r0,#1
000c0c  7800              LDRB     r0,[r0,#0]  ; MsgStk
000c0e  2800              CMP      r0,#0
000c10  d060              BEQ      |L1.3284|
;;;1011   	{
;;;1012   		TickLock &= ~0x2;
000c12  4842              LDR      r0,|L1.3356|
000c14  7800              LDRB     r0,[r0,#0]  ; TickLock
000c16  f0200002          BIC      r0,r0,#2
000c1a  4940              LDR      r1,|L1.3356|
000c1c  7008              STRB     r0,[r1,#0]
;;;1013   		switch (PCR_Cycle_Control.CycleValid)
000c1e  4840              LDR      r0,|L1.3360|
000c20  7800              LDRB     r0,[r0,#0]  ; PCR_Cycle_Control
000c22  2802              CMP      r0,#2
000c24  d006              BEQ      |L1.3124|
000c26  2804              CMP      r0,#4
000c28  d012              BEQ      |L1.3152|
000c2a  2806              CMP      r0,#6
000c2c  d01f              BEQ      |L1.3182|
000c2e  2808              CMP      r0,#8
000c30  d151              BNE      |L1.3286|
000c32  e079              B        |L1.3368|
                  |L1.3124|
;;;1014   		{
;;;1015   			case INIT:
;;;1016   					if(AssertMsg(SS1_ACT3))
000c34  4834              LDR      r0,|L1.3336|
000c36  1c40              ADDS     r0,r0,#1
000c38  7800              LDRB     r0,[r0,#0]  ; MsgStk
000c3a  f0100f04          TST      r0,#4
000c3e  d006              BEQ      |L1.3150|
;;;1017   					{
;;;1018   						ClearMsg();
000c40  f7fffffe          BL       ClearMsg
;;;1019   						SetPoint_PrePump_Start();
000c44  f7fffffe          BL       SetPoint_PrePump_Start
;;;1020   						PCR_Cycle_Control.CycleValid=PUMP_RUN;			
000c48  2004              MOVS     r0,#4
000c4a  4935              LDR      r1,|L1.3360|
000c4c  7008              STRB     r0,[r1,#0]
                  |L1.3150|
;;;1021   					}
;;;1022   				break;
000c4e  e080              B        |L1.3410|
                  |L1.3152|
;;;1023   			case PUMP_RUN:
;;;1024   				 	if(AssertMsg(SS2_TMOUT))
000c50  482d              LDR      r0,|L1.3336|
000c52  1c40              ADDS     r0,r0,#1
000c54  7800              LDRB     r0,[r0,#0]  ; MsgStk
000c56  f0100f02          TST      r0,#2
000c5a  d007              BEQ      |L1.3180|
;;;1025   					{
;;;1026   						ClearMsg();
000c5c  f7fffffe          BL       ClearMsg
;;;1027   						SetPoint_Cycle_Start(PCR_Cycle_SetPoint);
000c60  4830              LDR      r0,|L1.3364|
000c62  f7fffffe          BL       SetPoint_Cycle_Start
;;;1028   						PCR_Cycle_Control.CycleValid=CYCLE_RUN;
000c66  2006              MOVS     r0,#6
000c68  492d              LDR      r1,|L1.3360|
000c6a  7008              STRB     r0,[r1,#0]
                  |L1.3180|
;;;1029   					}
;;;1030   				break;
000c6c  e071              B        |L1.3410|
                  |L1.3182|
;;;1031   			case CYCLE_RUN:			  //think about to reload cycle in msg box handler
;;;1032   									// ISR handler will check cycle, sect, stage, then push msg for cycle done
;;;1033   					if(AssertMsg(SS2_CY_CMP))
000c6e  4826              LDR      r0,|L1.3336|
000c70  1c40              ADDS     r0,r0,#1
000c72  7800              LDRB     r0,[r0,#0]  ; MsgStk
000c74  f0100f10          TST      r0,#0x10
000c78  d007              BEQ      |L1.3210|
;;;1034   					{
;;;1035   						ClearMsg();
000c7a  f7fffffe          BL       ClearMsg
;;;1036   						SetPoint_Extension_Start();
000c7e  f7fffffe          BL       SetPoint_Extension_Start
;;;1037   						PCR_Cycle_Control.CycleValid=EXT_RUN;
000c82  2008              MOVS     r0,#8
000c84  4926              LDR      r1,|L1.3360|
000c86  7008              STRB     r0,[r1,#0]
000c88  e023              B        |L1.3282|
                  |L1.3210|
;;;1038   	
;;;1039   					}else if(AssertMsg(SS2_TMOUT))
000c8a  481f              LDR      r0,|L1.3336|
000c8c  1c40              ADDS     r0,r0,#1
000c8e  7800              LDRB     r0,[r0,#0]  ; MsgStk
000c90  f0100f02          TST      r0,#2
000c94  d01d              BEQ      |L1.3282|
;;;1040   						{
;;;1041   							ClearMsg();
000c96  f7fffffe          BL       ClearMsg
;;;1042   							TickLock &= ~0x2;
000c9a  4820              LDR      r0,|L1.3356|
000c9c  7800              LDRB     r0,[r0,#0]  ; TickLock
000c9e  f0200002          BIC      r0,r0,#2
000ca2  491e              LDR      r1,|L1.3356|
000ca4  7008              STRB     r0,[r1,#0]
;;;1043   							if(PCR_Cycle_Control.TotalStage==Stage_Check())
000ca6  f7fffffe          BL       Stage_Check
000caa  491d              LDR      r1,|L1.3360|
000cac  78c9              LDRB     r1,[r1,#3]  ; PCR_Cycle_Control
000cae  4288              CMP      r0,r1
000cb0  d105              BNE      |L1.3262|
;;;1044   							{				
;;;1045   								Cycle_INC();
000cb2  f7fffffe          BL       Cycle_INC
;;;1046   								Stage_Set(0);
000cb6  2000              MOVS     r0,#0
000cb8  f7fffffe          BL       Stage_Set
000cbc  e001              B        |L1.3266|
                  |L1.3262|
;;;1047   							}
;;;1048   							else 
;;;1049   							{
;;;1050   							 	Stage_INC();	
000cbe  f7fffffe          BL       Stage_INC
                  |L1.3266|
;;;1051   							}
;;;1052   							TempCtrl_Reload_InCycle();
000cc2  f7fffffe          BL       TempCtrl_Reload_InCycle
;;;1053   							TickLock |= 0x2;
000cc6  4815              LDR      r0,|L1.3356|
000cc8  7800              LDRB     r0,[r0,#0]  ; TickLock
000cca  f0400002          ORR      r0,r0,#2
000cce  4913              LDR      r1,|L1.3356|
000cd0  7008              STRB     r0,[r1,#0]
                  |L1.3282|
;;;1054   						}
;;;1055   				break;
000cd2  e03e              B        |L1.3410|
                  |L1.3284|
000cd4  e03e              B        |L1.3412|
                  |L1.3286|
000cd6  e03b              B        |L1.3408|
                  |L1.3288|
                          DCD      TempDelta_2
                  |L1.3292|
                          DCD      RegE_2
                  |L1.3296|
                          DCD      Control_2_Dir
                  |L1.3300|
                          DCD      TempSet_2
                  |L1.3304|
                          DCD      TempCurrent_2
                  |L1.3308|
                          DCD      TempCtrl_Active_2
                  |L1.3312|
                          DCD      Peltier_Swap_Msg
                  |L1.3316|
                          DCD      PID_Err_Rec
                  |L1.3320|
000cf8  00000000
000cfc  bfd00000          DCFD     0xbfd0000000000000 ; -0.25
                  |L1.3328|
000d00  00000000
000d04  3fd00000          DCFD     0x3fd0000000000000 ; 0.25
                  |L1.3336|
                          DCD      ||.data||+0x15
                  |L1.3340|
                          DCD      0x40010804
                  |L1.3344|
                          DCD      0x40010000
                  |L1.3348|
                          DCD      0x40001000
                  |L1.3352|
                          DCD      Sensor_Addr
                  |L1.3356|
                          DCD      TickLock
                  |L1.3360|
                          DCD      PCR_Cycle_Control
                  |L1.3364|
                          DCD      PCR_Cycle_SetPoint
                  |L1.3368|
;;;1056   				
;;;1057   			case EXT_RUN:
;;;1058   					 if(AssertMsg(SS2_TMOUT))
000d28  480e              LDR      r0,|L1.3428|
000d2a  7800              LDRB     r0,[r0,#0]  ; MsgStk
000d2c  f0100f02          TST      r0,#2
000d30  d00d              BEQ      |L1.3406|
;;;1059   					 {
;;;1060   					 	ClearMsg();
000d32  f7fffffe          BL       ClearMsg
;;;1061   			 			//PCR_Cycle_Control.CycleValid=INVALID;
;;;1062   						TempCtrl_Active_2=0;
000d36  2000              MOVS     r0,#0
000d38  490b              LDR      r1,|L1.3432|
000d3a  7008              STRB     r0,[r1,#0]
;;;1063   						TempValid =0;
000d3c  490b              LDR      r1,|L1.3436|
000d3e  7008              STRB     r0,[r1,#0]
;;;1064   						TempControl_2_stop();
000d40  f7fffffe          BL       TempControl_2_stop
;;;1065   						CycleSTS=READY;
000d44  2000              MOVS     r0,#0
000d46  490a              LDR      r1,|L1.3440|
000d48  7008              STRB     r0,[r1,#0]
;;;1066   						TempControl_stop();
000d4a  f7fffffe          BL       TempControl_stop
                  |L1.3406|
;;;1067   					 }
;;;1068   			
;;;1069   					break;
000d4e  e000              B        |L1.3410|
                  |L1.3408|
;;;1070   			default:
;;;1071   	
;;;1072   				break;
000d50  bf00              NOP      
                  |L1.3410|
000d52  bf00              NOP                            ;1022
                  |L1.3412|
;;;1073   		}
;;;1074   //		TickLock=u8temp;
;;;1075   	}
;;;1076   }
000d54  bd10              POP      {r4,pc}
;;;1077   
                          ENDP

                  PopMsg PROC
;;;1078   void PopMsg(u8 msk)
000d56  4903              LDR      r1,|L1.3428|
;;;1079   {
;;;1080   	MsgStk &= ~msk;
000d58  7809              LDRB     r1,[r1,#0]  ; MsgStk
000d5a  4381              BICS     r1,r1,r0
000d5c  4a01              LDR      r2,|L1.3428|
000d5e  7011              STRB     r1,[r2,#0]
;;;1081   }
000d60  4770              BX       lr
;;;1082   
                          ENDP

000d62  0000              DCW      0x0000
                  |L1.3428|
                          DCD      ||.data||+0x16
                  |L1.3432|
                          DCD      TempCtrl_Active_2
                  |L1.3436|
                          DCD      TempValid
                  |L1.3440|
                          DCD      CycleSTS

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PID_Err_Rec
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  I2C_State_Machine
000000  00                DCB      0x00
                  TermpValue
000001  0000              DCB      0x00,0x00
                  I2C_Rx_Cnt
000003  00                DCB      0x00
                  TempCtrl_Active
000004  00                DCB      0x00
                  TempCtrl_Active_2
000005  00                DCB      0x00
                  TempValid
000006  00                DCB      0x00
                  Control_2_Dir
000007  00                DCB      0x00
                  TickLock
000008  0000              DCB      0x00,0x00
                  TempCtrlTime_Sec
00000a  000a              DCW      0x000a
                  TempCtrlTime_Sec_2
00000c  000a              DCW      0x000a
                  TempTickLength
00000e  0000              DCW      0x0000
                  TempTickLength_2
000010  0000              DCW      0x0000
                  Peltier_Swap_Msg
000012  00                DCB      0x00
                  Sensor_Addr
000013  90                DCB      0x90
000014  92                DCB      0x92
                  Pwm_Pos_Lock
000015  01                DCB      0x01
                  MsgStk
000016  0000              DCB      0x00,0x00
                  TempReg
000018  00000000          DCFS     0x00000000 ; 0
                  TempPumpSet
00001c  42d20000          DCFS     0x42d20000 ; 105
                  ||rec||
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  ||Kp||
000024  41a00000          DCFS     0x41a00000 ; 20
000028  41a00000          DCFS     0x41a00000 ; 20
                  ||Ki||
00002c  3cf5c28f          DCFS     0x3cf5c28f ; 0.029999999329447746
000030  3cf5c28f          DCFS     0x3cf5c28f ; 0.029999999329447746
                  ||Kd||
000034  3f800000          DCFS     0x3f800000 ; 1
000038  3f800000          DCFS     0x3f800000 ; 1
                  ||Kl||
00003c  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
000040  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  Ktm
000044  428c0000          DCFS     0x428c0000 ; 70
000048  428c0000          DCFS     0x428c0000 ; 70
                  RegE
                          DCD      0x00000000
                  RegE1
                          DCD      0x00000000
                  RegE2
                          DCD      0x00000000
                  DutyDelta
000058  0000              DCB      0x00,0x00
                  DutyCycle
00005a  0000              DCB      0x00,0x00
                  TempSet
                          DCD      0x00000000
                  TempCurrent
                          DCD      0x00000000
                  TempDelta
                          DCD      0x00000000
                  RegE_2
                          DCD      0x00000000
                  RegE1_2
                          DCD      0x00000000
                  RegE2_2
                          DCD      0x00000000
                  DutyDelta_2
                          DCD      0x00000000
                  DutyCycle_2
                          DCD      0x00000000
                  TempSet_2
                          DCD      0x00000000
                  TempCurrent_2
                          DCD      0x00000000
                  TempDelta_2
                          DCD      0x00000000
