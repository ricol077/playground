; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\24cxx.o --depend=..\OBJ\24cxx.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\24cxx.crf ..\HARDWARE\24CXX\24cxx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  AT24CXX_Init PROC
;;;17     //初始化IIC接口
;;;18     void AT24CXX_Init(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     	IIC_Init();
000002  f7fffffe          BL       IIC_Init
;;;21     }
000006  bd10              POP      {r4,pc}
;;;22     //在AT24CXX指定地址读出一个数据
                          ENDP

                  AT24CXX_ReadOneByte PROC
;;;24     //返回值  :读到的数据
;;;25     u8 AT24CXX_ReadOneByte(u16 ReadAddr)
000008  b570              PUSH     {r4-r6,lr}
;;;26     {				  
00000a  4604              MOV      r4,r0
;;;27     	u8 temp=0;		  	    																 
00000c  2600              MOVS     r6,#0
;;;28         IIC_Start();  
00000e  f7fffffe          BL       IIC_Start
;;;29     	if(EE_TYPE>AT24C16)
000012  bf00              NOP      
;;;30     	{
;;;31     		IIC_Send_Byte(0XA0);	   //发送写命令
;;;32     		IIC_Wait_Ack();
;;;33     		IIC_Send_Byte(ReadAddr>>8);//发送高地址	    
;;;34     	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据 	   
000014  4625              MOV      r5,r4
000016  17e1              ASRS     r1,r4,#31
000018  eb046111          ADD      r1,r4,r1,LSR #24
00001c  1209              ASRS     r1,r1,#8
00001e  22a0              MOVS     r2,#0xa0
000020  eb020141          ADD      r1,r2,r1,LSL #1
000024  b2c8              UXTB     r0,r1
000026  f7fffffe          BL       IIC_Send_Byte
;;;35     	IIC_Wait_Ack(); 
00002a  f7fffffe          BL       IIC_Wait_Ack
;;;36         IIC_Send_Byte(ReadAddr%256);   //发送低地址
00002e  17e1              ASRS     r1,r4,#31
000030  eb046111          ADD      r1,r4,r1,LSR #24
000034  1209              ASRS     r1,r1,#8
000036  eba42101          SUB      r1,r4,r1,LSL #8
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       IIC_Send_Byte
;;;37     	IIC_Wait_Ack();	    
000040  f7fffffe          BL       IIC_Wait_Ack
;;;38     	IIC_Start();  	 	   
000044  f7fffffe          BL       IIC_Start
;;;39     	IIC_Send_Byte(0XA1);           //进入接收模式			   
000048  20a1              MOVS     r0,#0xa1
00004a  f7fffffe          BL       IIC_Send_Byte
;;;40     	IIC_Wait_Ack();	 
00004e  f7fffffe          BL       IIC_Wait_Ack
;;;41         temp=IIC_Read_Byte(0);		   
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       IIC_Read_Byte
000058  4606              MOV      r6,r0
;;;42         IIC_Stop();//产生一个停止条件	    
00005a  f7fffffe          BL       IIC_Stop
;;;43     	return temp;
00005e  4630              MOV      r0,r6
;;;44     }
000060  bd70              POP      {r4-r6,pc}
;;;45     //在AT24CXX指定地址写入一个数据
                          ENDP

                  AT24CXX_WriteOneByte PROC
;;;47     //DataToWrite:要写入的数据
;;;48     void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
000062  b570              PUSH     {r4-r6,lr}
;;;49     {				   	  	    																 
000064  4604              MOV      r4,r0
000066  460d              MOV      r5,r1
;;;50         IIC_Start();  
000068  f7fffffe          BL       IIC_Start
;;;51     	if(EE_TYPE>AT24C16)
00006c  bf00              NOP      
;;;52     	{
;;;53     		IIC_Send_Byte(0XA0);	    //发送写命令
;;;54     		IIC_Wait_Ack();
;;;55     		IIC_Send_Byte(WriteAddr>>8);//发送高地址	  
;;;56     	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据 	 
00006e  4626              MOV      r6,r4
000070  17e1              ASRS     r1,r4,#31
000072  eb046111          ADD      r1,r4,r1,LSR #24
000076  1209              ASRS     r1,r1,#8
000078  22a0              MOVS     r2,#0xa0
00007a  eb020141          ADD      r1,r2,r1,LSL #1
00007e  b2c8              UXTB     r0,r1
000080  f7fffffe          BL       IIC_Send_Byte
;;;57     	IIC_Wait_Ack();	   
000084  f7fffffe          BL       IIC_Wait_Ack
;;;58         IIC_Send_Byte(WriteAddr%256);   //发送低地址
000088  17e1              ASRS     r1,r4,#31
00008a  eb046111          ADD      r1,r4,r1,LSR #24
00008e  1209              ASRS     r1,r1,#8
000090  eba42101          SUB      r1,r4,r1,LSL #8
000094  b2c8              UXTB     r0,r1
000096  f7fffffe          BL       IIC_Send_Byte
;;;59     	IIC_Wait_Ack(); 	 										  		   
00009a  f7fffffe          BL       IIC_Wait_Ack
;;;60     	IIC_Send_Byte(DataToWrite);     //发送字节							   
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       IIC_Send_Byte
;;;61     	IIC_Wait_Ack();  		    	   
0000a4  f7fffffe          BL       IIC_Wait_Ack
;;;62         IIC_Stop();//产生一个停止条件 
0000a8  f7fffffe          BL       IIC_Stop
;;;63     	delay_ms(10);	 
0000ac  200a              MOVS     r0,#0xa
0000ae  f7fffffe          BL       delay_ms
;;;64     }
0000b2  bd70              POP      {r4-r6,pc}
;;;65     //在AT24CXX里面的指定地址开始写入长度为Len的数据
                          ENDP

                  AT24CXX_WriteLenByte PROC
;;;69     //Len        :要写入数据的长度2,4
;;;70     void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
0000b4  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {  	
0000b8  4605              MOV      r5,r0
0000ba  460c              MOV      r4,r1
0000bc  4616              MOV      r6,r2
;;;72     	u8 t;
;;;73     	for(t=0;t<Len;t++)
0000be  2700              MOVS     r7,#0
0000c0  e009              B        |L1.214|
                  |L1.194|
;;;74     	{
;;;75     		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
0000c2  00fa              LSLS     r2,r7,#3
0000c4  fa24f202          LSR      r2,r4,r2
0000c8  b2d1              UXTB     r1,r2
0000ca  19ea              ADDS     r2,r5,r7
0000cc  b290              UXTH     r0,r2
0000ce  f7fffffe          BL       AT24CXX_WriteOneByte
0000d2  1c78              ADDS     r0,r7,#1              ;73
0000d4  b2c7              UXTB     r7,r0                 ;73
                  |L1.214|
0000d6  42b7              CMP      r7,r6                 ;73
0000d8  dbf3              BLT      |L1.194|
;;;76     	}												    
;;;77     }
0000da  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

                  AT24CXX_ReadLenByte PROC
;;;83     //Len        :要读出数据的长度2,4
;;;84     u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
0000de  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {  	
0000e2  4604              MOV      r4,r0
0000e4  460d              MOV      r5,r1
;;;86     	u8 t;
;;;87     	u32 temp=0;
0000e6  2700              MOVS     r7,#0
;;;88     	for(t=0;t<Len;t++)
0000e8  2600              MOVS     r6,#0
0000ea  e009              B        |L1.256|
                  |L1.236|
;;;89     	{
;;;90     		temp<<=8;
0000ec  023f              LSLS     r7,r7,#8
;;;91     		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1); 	 				   
0000ee  1961              ADDS     r1,r4,r5
0000f0  1b89              SUBS     r1,r1,r6
0000f2  1e49              SUBS     r1,r1,#1
0000f4  b288              UXTH     r0,r1
0000f6  f7fffffe          BL       AT24CXX_ReadOneByte
0000fa  4407              ADD      r7,r7,r0
0000fc  1c70              ADDS     r0,r6,#1              ;88
0000fe  b2c6              UXTB     r6,r0                 ;88
                  |L1.256|
000100  42ae              CMP      r6,r5                 ;88
000102  dbf3              BLT      |L1.236|
;;;92     	}
;;;93     	return temp;												    
000104  4638              MOV      r0,r7
;;;94     }
000106  e8bd81f0          POP      {r4-r8,pc}
;;;95     //检查AT24CXX是否正常
                          ENDP

                  AT24CXX_Check PROC
;;;99     //返回0:检测成功
;;;100    u8 AT24CXX_Check(void)
00010a  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	u8 temp;
;;;103    	temp=AT24CXX_ReadOneByte(255);//避免每次开机都写AT24CXX			   
00010c  20ff              MOVS     r0,#0xff
00010e  f7fffffe          BL       AT24CXX_ReadOneByte
000112  4604              MOV      r4,r0
;;;104    	if(temp==0X55)return 0;		   
000114  2c55              CMP      r4,#0x55
000116  d101              BNE      |L1.284|
000118  2000              MOVS     r0,#0
                  |L1.282|
;;;105    	else//排除第一次初始化的情况
;;;106    	{
;;;107    		AT24CXX_WriteOneByte(255,0X55);
;;;108    	    temp=AT24CXX_ReadOneByte(255);	  
;;;109    		if(temp==0X55)return 0;
;;;110    	}
;;;111    	return 1;											  
;;;112    }
00011a  bd10              POP      {r4,pc}
                  |L1.284|
00011c  2155              MOVS     r1,#0x55              ;107
00011e  20ff              MOVS     r0,#0xff              ;107
000120  f7fffffe          BL       AT24CXX_WriteOneByte
000124  20ff              MOVS     r0,#0xff              ;108
000126  f7fffffe          BL       AT24CXX_ReadOneByte
00012a  4604              MOV      r4,r0                 ;108
00012c  2c55              CMP      r4,#0x55              ;109
00012e  d101              BNE      |L1.308|
000130  2000              MOVS     r0,#0                 ;109
000132  e7f2              B        |L1.282|
                  |L1.308|
000134  2001              MOVS     r0,#1                 ;111
000136  e7f0              B        |L1.282|
;;;113    
                          ENDP

                  AT24CXX_Read PROC
;;;117    //NumToRead:要读出数据的个数
;;;118    void AT24CXX_Read(u16 ReadAddr,u8 *pBuffer,u16 NumToRead)
000138  b570              PUSH     {r4-r6,lr}
;;;119    {
00013a  4604              MOV      r4,r0
00013c  460d              MOV      r5,r1
00013e  4616              MOV      r6,r2
;;;120    	while(NumToRead)
000140  e008              B        |L1.340|
                  |L1.322|
;;;121    	{
;;;122    		*pBuffer++=AT24CXX_ReadOneByte(ReadAddr++);	
000142  4620              MOV      r0,r4
000144  1c62              ADDS     r2,r4,#1
000146  b294              UXTH     r4,r2
000148  f7fffffe          BL       AT24CXX_ReadOneByte
00014c  f8050b01          STRB     r0,[r5],#1
;;;123    		NumToRead--;
000150  1e70              SUBS     r0,r6,#1
000152  b286              UXTH     r6,r0
                  |L1.340|
000154  2e00              CMP      r6,#0                 ;120
000156  d1f4              BNE      |L1.322|
;;;124    	}
;;;125    }  
000158  bd70              POP      {r4-r6,pc}
;;;126    //在AT24CXX里面的指定地址开始写入指定个数的数据
                          ENDP

                  AT24CXX_Write PROC
;;;129    //NumToWrite:要写入数据的个数
;;;130    void AT24CXX_Write(u16 WriteAddr,u8 *pBuffer,u16 NumToWrite)
00015a  b570              PUSH     {r4-r6,lr}
;;;131    {
00015c  4604              MOV      r4,r0
00015e  460e              MOV      r6,r1
000160  4615              MOV      r5,r2
;;;132    	while(NumToWrite--)
000162  e006              B        |L1.370|
                  |L1.356|
;;;133    	{
;;;134    		AT24CXX_WriteOneByte(WriteAddr,*pBuffer);
000164  7831              LDRB     r1,[r6,#0]
000166  4620              MOV      r0,r4
000168  f7fffffe          BL       AT24CXX_WriteOneByte
;;;135    		WriteAddr++;
00016c  1c60              ADDS     r0,r4,#1
00016e  b284              UXTH     r4,r0
;;;136    		pBuffer++;
000170  1c76              ADDS     r6,r6,#1
                  |L1.370|
000172  0028              MOVS     r0,r5                 ;132
000174  f1a50101          SUB      r1,r5,#1              ;132
000178  b28d              UXTH     r5,r1                 ;132
00017a  d1f3              BNE      |L1.356|
;;;137    	}
;;;138    }
00017c  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

