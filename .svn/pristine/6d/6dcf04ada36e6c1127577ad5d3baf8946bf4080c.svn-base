; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\timer.o --depend=..\OBJ\timer.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\timer.crf ..\HARDWARE\TIMER\timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;24     static u8 IntCnt=0;
;;;25     void TIM3_IRQHandler(void)
000000  48d0              LDR      r0,|L1.836|
;;;26     { 	
;;;27     	TIM3->CR1&=~(u32)(0x01);
000002  8800              LDRH     r0,[r0,#0]
000004  f0200001          BIC      r0,r0,#1
000008  f04f4180          MOV      r1,#0x40000000
00000c  f8a10400          STRH     r0,[r1,#0x400]
;;;28     	/*	    		  			    
;;;29     	if(TIM3->SR&0X0001)//溢出中断
;;;30     	{
;;;31     		LED1=!LED1;			    				   				     	    	
;;;32     	
;;;33     	*/
;;;34     	
;;;35     	//LED1=!LED1;			   
;;;36     	TIM3->SR&=~(1<<0);//清除中断标志位
000010  4608              MOV      r0,r1
000012  f8b00410          LDRH     r0,[r0,#0x410]
000016  f0200001          BIC      r0,r0,#1
00001a  f8a10410          STRH     r0,[r1,#0x410]
;;;37     
;;;38     	if(BaseCounter>0)
00001e  48ca              LDR      r0,|L1.840|
000020  8800              LDRH     r0,[r0,#0]  ; BaseCounter
000022  2800              CMP      r0,#0
000024  dd05              BLE      |L1.50|
;;;39     		BaseCounter--;
000026  48c8              LDR      r0,|L1.840|
000028  8800              LDRH     r0,[r0,#0]  ; BaseCounter
00002a  1e40              SUBS     r0,r0,#1
00002c  49c6              LDR      r1,|L1.840|
00002e  8008              STRH     r0,[r1,#0]
000030  e002              B        |L1.56|
                  |L1.50|
;;;40     	else
;;;41     		BaseCounter=0;	
000032  2000              MOVS     r0,#0
000034  49c4              LDR      r1,|L1.840|
000036  8008              STRH     r0,[r1,#0]
                  |L1.56|
;;;42     	
;;;43     	if(BaseCounter>0)
000038  48c3              LDR      r0,|L1.840|
00003a  8800              LDRH     r0,[r0,#0]  ; BaseCounter
00003c  2800              CMP      r0,#0
00003e  dd0d              BLE      |L1.92|
;;;44     	{
;;;45     		
;;;46     		TIM3->ARR=PCR_Regs.InteCount;
000040  48c2              LDR      r0,|L1.844|
000042  8940              LDRH     r0,[r0,#0xa]  ; PCR_Regs
000044  49bf              LDR      r1,|L1.836|
000046  312c              ADDS     r1,r1,#0x2c
000048  8008              STRH     r0,[r1,#0]
;;;47     		TIM3->CR1|=(0x01);
00004a  f04f4080          MOV      r0,#0x40000000
00004e  f8b00400          LDRH     r0,[r0,#0x400]
000052  f0400001          ORR      r0,r0,#1
000056  49bb              LDR      r1,|L1.836|
000058  8008              STRH     r0,[r1,#0]
00005a  e031              B        |L1.192|
                  |L1.92|
;;;48     	}
;;;49     	else
;;;50     	{
;;;51     		if(PixReadmMode==TYP_IMAGE||PixReadmMode==TYP_24PIXIMAG)
00005c  48bc              LDR      r0,|L1.848|
00005e  7800              LDRB     r0,[r0,#0]  ; PixReadmMode
000060  2802              CMP      r0,#2
000062  d003              BEQ      |L1.108|
000064  48ba              LDR      r0,|L1.848|
000066  7800              LDRB     r0,[r0,#0]  ; PixReadmMode
000068  2808              CMP      r0,#8
00006a  d126              BNE      |L1.186|
                  |L1.108|
;;;52     		{
;;;53     	
;;;54     			TMR_Int_Flag |=(1<<IntCnt);
00006c  48b9              LDR      r0,|L1.852|
00006e  7801              LDRB     r1,[r0,#0]  ; IntCnt
000070  2001              MOVS     r0,#1
000072  4088              LSLS     r0,r0,r1
000074  49b8              LDR      r1,|L1.856|
000076  8809              LDRH     r1,[r1,#0]  ; TMR_Int_Flag
000078  4308              ORRS     r0,r0,r1
00007a  49b7              LDR      r1,|L1.856|
00007c  8008              STRH     r0,[r1,#0]
;;;55     			IntCnt+=1;
00007e  48b5              LDR      r0,|L1.852|
000080  7800              LDRB     r0,[r0,#0]  ; IntCnt
000082  1c40              ADDS     r0,r0,#1
000084  49b3              LDR      r1,|L1.852|
000086  7008              STRB     r0,[r1,#0]
;;;56     			if(IntCnt<PIX_TOTAL_ROW)
000088  4608              MOV      r0,r1
00008a  7800              LDRB     r0,[r0,#0]  ; IntCnt
00008c  280c              CMP      r0,#0xc
00008e  da10              BGE      |L1.178|
;;;57     			{
;;;58     				TIM3->CNT=TIM3->ARR=PCR_Regs.InteDelayCount;
000090  48ae              LDR      r0,|L1.844|
000092  8980              LDRH     r0,[r0,#0xc]  ; PCR_Regs
000094  49ab              LDR      r1,|L1.836|
000096  312c              ADDS     r1,r1,#0x2c
000098  8008              STRH     r0,[r1,#0]
00009a  f04f4180          MOV      r1,#0x40000000
00009e  f8a10424          STRH     r0,[r1,#0x424]
;;;59     				TIM3->CR1|=(0x01);	
0000a2  4608              MOV      r0,r1
0000a4  f8b00400          LDRH     r0,[r0,#0x400]
0000a8  f0400001          ORR      r0,r0,#1
0000ac  f8a10400          STRH     r0,[r1,#0x400]
0000b0  e006              B        |L1.192|
                  |L1.178|
;;;60     			}		
;;;61     			else
;;;62     				IntCnt=0;
0000b2  2000              MOVS     r0,#0
0000b4  49a7              LDR      r1,|L1.852|
0000b6  7008              STRB     r0,[r1,#0]
0000b8  e002              B        |L1.192|
                  |L1.186|
;;;63     	
;;;64     		}
;;;65     		else
;;;66     			TMR_Int_Flag=1; 
0000ba  2001              MOVS     r0,#1
0000bc  49a6              LDR      r1,|L1.856|
0000be  8008              STRH     r0,[r1,#0]
                  |L1.192|
;;;67     	
;;;68     
;;;69     	}	    
;;;70     }
0000c0  4770              BX       lr
;;;71     //通用定时器3中断初始化
                          ENDP

                  TIM3_Int_Init PROC
;;;75     //这里使用的是定时器3!
;;;76     void TIM3_Int_Init(u16 arr,u16 psc)
0000c2  b570              PUSH     {r4-r6,lr}
;;;77     {
0000c4  4604              MOV      r4,r0
0000c6  460d              MOV      r5,r1
;;;78     	RCC->APB1ENR|=1<<1;	//TIM3时钟使能    
0000c8  48a4              LDR      r0,|L1.860|
0000ca  69c0              LDR      r0,[r0,#0x1c]
0000cc  f0400002          ORR      r0,r0,#2
0000d0  49a2              LDR      r1,|L1.860|
0000d2  61c8              STR      r0,[r1,#0x1c]
;;;79      	TIM3->ARR=arr;  	//设定计数器自动重装值//刚好1ms    
0000d4  489b              LDR      r0,|L1.836|
0000d6  302c              ADDS     r0,r0,#0x2c
0000d8  8004              STRH     r4,[r0,#0]
;;;80     	TIM3->PSC=psc;  	//预分频器7200,得到10Khz的计数时钟		  
0000da  0488              LSLS     r0,r1,#18
0000dc  f8a05428          STRH     r5,[r0,#0x428]
;;;81     	TIM3->DIER|=1<<0;   //允许更新中断	  
0000e0  f8b0040c          LDRH     r0,[r0,#0x40c]
0000e4  f0400001          ORR      r0,r0,#1
0000e8  0489              LSLS     r1,r1,#18
0000ea  f8a1040c          STRH     r0,[r1,#0x40c]
;;;82     	//TIM3->CR1|=0x01;    //使能定时器3
;;;83     
;;;84     	TIM3->CR1|=(0x01<<7);
0000ee  4608              MOV      r0,r1
0000f0  f8b00400          LDRH     r0,[r0,#0x400]
0000f4  f0400080          ORR      r0,r0,#0x80
0000f8  f8a10400          STRH     r0,[r1,#0x400]
;;;85     	TIM3->SR&=~(1<<0);//清除中断标志位
0000fc  4608              MOV      r0,r1
0000fe  f8b00410          LDRH     r0,[r0,#0x410]
000102  f0200001          BIC      r0,r0,#1
000106  f8a10410          STRH     r0,[r1,#0x410]
;;;86     	TIM3->CR1|=(0x01<<4); // count down
00010a  4608              MOV      r0,r1
00010c  f8b00400          LDRH     r0,[r0,#0x400]
000110  f0400010          ORR      r0,r0,#0x10
000114  f8a10400          STRH     r0,[r1,#0x400]
;;;87     	TIM3->CR1|=(0x01<<3); // opm
000118  4608              MOV      r0,r1
00011a  f8b00400          LDRH     r0,[r0,#0x400]
00011e  f0400008          ORR      r0,r0,#8
000122  f8a10400          STRH     r0,[r1,#0x400]
;;;88     	TIM3->CNT=(u16)arr;
000126  4887              LDR      r0,|L1.836|
000128  3024              ADDS     r0,r0,#0x24
00012a  8004              STRH     r4,[r0,#0]
;;;89       	MY_NVIC_Init(1,3,TIM3_IRQChannel,2);//抢占1，子优先级3，组2									 
00012c  2302              MOVS     r3,#2
00012e  221d              MOVS     r2,#0x1d
000130  2103              MOVS     r1,#3
000132  2001              MOVS     r0,#1
000134  f7fffffe          BL       MY_NVIC_Init
;;;90     }
000138  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

                  TIM3_ARR_Update PROC
;;;92     void TIM3_ARR_Update(u16 arr)
00013a  4982              LDR      r1,|L1.836|
;;;93     {
;;;94     
;;;95      	TIM3->ARR=arr;  	 
00013c  312c              ADDS     r1,r1,#0x2c
00013e  8008              STRH     r0,[r1,#0]
;;;96     	TIM3->CNT=arr;							 
000140  f04f4180          MOV      r1,#0x40000000
000144  f8a10424          STRH     r0,[r1,#0x424]
;;;97     }
000148  4770              BX       lr
;;;98     
                          ENDP

                  TIM1_Int_Init PROC
;;;111    
;;;112    void TIM1_Int_Init(u16 arr,u16 psc)
00014a  4a84              LDR      r2,|L1.860|
;;;113    {
;;;114    	RCC->APB2ENR|=1<<11;	//TIM1时钟使能    
00014c  6992              LDR      r2,[r2,#0x18]
00014e  f4426200          ORR      r2,r2,#0x800
000152  4b82              LDR      r3,|L1.860|
000154  619a              STR      r2,[r3,#0x18]
;;;115     	TIM1->ARR=arr;  	//设定计数器自动重装值//刚好1ms    
000156  4a82              LDR      r2,|L1.864|
000158  8010              STRH     r0,[r2,#0]
;;;116    	TIM1->PSC=psc;  	//预分频器7200,得到10Khz的计数时钟		  
00015a  4a82              LDR      r2,|L1.868|
00015c  f8a21c28          STRH     r1,[r2,#0xc28]
;;;117    	//TIM1->DIER|=1<<0;   //允许更新中断	  
;;;118    	//TIM1->CR1|=0x01;    //使能定时器3
;;;119    
;;;120    	TIM1->CR1|=(0x01<<7);
000160  f8b22c00          LDRH     r2,[r2,#0xc00]
000164  f0420280          ORR      r2,r2,#0x80
000168  4b7e              LDR      r3,|L1.868|
00016a  f8a32c00          STRH     r2,[r3,#0xc00]
;;;121    	TIM1->SR&=~(1<<0);//清除中断标志位
00016e  461a              MOV      r2,r3
000170  f8b22c10          LDRH     r2,[r2,#0xc10]
000174  f0220201          BIC      r2,r2,#1
000178  f8a32c10          STRH     r2,[r3,#0xc10]
;;;122    	TIM1->CR1|=(0x01<<4); // count down
00017c  461a              MOV      r2,r3
00017e  f8b22c00          LDRH     r2,[r2,#0xc00]
000182  f0420210          ORR      r2,r2,#0x10
000186  f8a32c00          STRH     r2,[r3,#0xc00]
;;;123    	//TIM2->CR1|=(0x01<<3); // opm
;;;124    	TIM1->CNT=(u16)arr;
00018a  4a75              LDR      r2,|L1.864|
00018c  3a08              SUBS     r2,r2,#8
00018e  8010              STRH     r0,[r2,#0]
;;;125      	//MY_NVIC_Init(1,3,TIM1_UP_IRQChannel,2);//抢占1，子优先级3，组2
;;;126    	TIM1->CCMR1=(0x01<<3); //pre-load enable
000190  2208              MOVS     r2,#8
000192  f8a32c18          STRH     r2,[r3,#0xc18]
;;;127    	TIM1->CCMR1 |= (0x6<<4);
000196  461a              MOV      r2,r3
000198  f8b22c18          LDRH     r2,[r2,#0xc18]
00019c  f0420260          ORR      r2,r2,#0x60
0001a0  f8a32c18          STRH     r2,[r3,#0xc18]
;;;128      	TIM1->CCER  |= (0x1<<0);	      // OCRef active high, output on CH1
0001a4  461a              MOV      r2,r3
0001a6  f8b22c20          LDRH     r2,[r2,#0xc20]
0001aa  f0420201          ORR      r2,r2,#1
0001ae  4b6c              LDR      r3,|L1.864|
0001b0  3b0c              SUBS     r3,r3,#0xc
0001b2  801a              STRH     r2,[r3,#0]
;;;129     	TIM1->CCR1  = 0;				  // count down mode, inactive all cycle when initial								 
0001b4  2200              MOVS     r2,#0
0001b6  4b6a              LDR      r3,|L1.864|
0001b8  3308              ADDS     r3,r3,#8
0001ba  801a              STRH     r2,[r3,#0]
;;;130    }
0001bc  4770              BX       lr
;;;131    
                          ENDP

                  TIM1_ARR_Update PROC
;;;132    void TIM1_ARR_Update(u16 arr)
0001be  4968              LDR      r1,|L1.864|
;;;133    {
;;;134    
;;;135     	TIM1->ARR=arr;  	 
0001c0  8008              STRH     r0,[r1,#0]
;;;136    	TIM1->CNT=arr;							 
0001c2  4968              LDR      r1,|L1.868|
0001c4  f8a10c24          STRH     r0,[r1,#0xc24]
;;;137    }
0001c8  4770              BX       lr
;;;138    
                          ENDP

                  TIM8_Int_Init PROC
;;;139    void TIM8_Int_Init(u16 arr,u16 psc)
0001ca  4a64              LDR      r2,|L1.860|
;;;140    {
;;;141    	RCC->APB2ENR|=1<<13;	//TIM8时钟使能    
0001cc  6992              LDR      r2,[r2,#0x18]
0001ce  f4425200          ORR      r2,r2,#0x2000
0001d2  4b62              LDR      r3,|L1.860|
0001d4  619a              STR      r2,[r3,#0x18]
;;;142     	TIM8->ARR=arr;  	//设定计数器自动重装值//刚好1ms    
0001d6  4a64              LDR      r2,|L1.872|
0001d8  8010              STRH     r0,[r2,#0]
;;;143    	TIM8->PSC=psc;  	//预分频器7200,得到10Khz的计数时钟		  
0001da  4a64              LDR      r2,|L1.876|
0001dc  f8a21428          STRH     r1,[r2,#0x428]
;;;144    	//TIM8->DIER|=1<<0;   //允许更新中断	  
;;;145    	//TIM1->CR1|=0x01;    //使能定时器3
;;;146    
;;;147    	TIM8->CR1|=(0x01<<7);
0001e0  f8b22400          LDRH     r2,[r2,#0x400]
0001e4  f0420280          ORR      r2,r2,#0x80
0001e8  4b60              LDR      r3,|L1.876|
0001ea  f8a32400          STRH     r2,[r3,#0x400]
;;;148    	TIM8->SR&=~(1<<0);//清除中断标志位
0001ee  461a              MOV      r2,r3
0001f0  f8b22410          LDRH     r2,[r2,#0x410]
0001f4  f0220201          BIC      r2,r2,#1
0001f8  f8a32410          STRH     r2,[r3,#0x410]
;;;149    	TIM8->CR1|=(0x01<<4); // count down
0001fc  461a              MOV      r2,r3
0001fe  f8b22400          LDRH     r2,[r2,#0x400]
000202  f0420210          ORR      r2,r2,#0x10
000206  f8a32400          STRH     r2,[r3,#0x400]
;;;150    	//TIM2->CR1|=(0x01<<3); // opm
;;;151    	TIM8->CNT=(u16)arr;
00020a  4a57              LDR      r2,|L1.872|
00020c  3a08              SUBS     r2,r2,#8
00020e  8010              STRH     r0,[r2,#0]
;;;152      	//MY_NVIC_Init(1,3,TIM8_UP_IRQChannel,2);//抢占1，子优先级3，组2
;;;153    	TIM8->CCMR1=(0x01<<3); //pre-load enable
000210  2208              MOVS     r2,#8
000212  f8a32418          STRH     r2,[r3,#0x418]
;;;154    	TIM8->CCMR1 |= (0x6<<4);
000216  461a              MOV      r2,r3
000218  f8b22418          LDRH     r2,[r2,#0x418]
00021c  f0420260          ORR      r2,r2,#0x60
000220  f8a32418          STRH     r2,[r3,#0x418]
;;;155      	TIM8->CCER  |= (0x1<<0);	      // OCRef active high, output on CH1
000224  461a              MOV      r2,r3
000226  f8b22420          LDRH     r2,[r2,#0x420]
00022a  f0420201          ORR      r2,r2,#1
00022e  4b4e              LDR      r3,|L1.872|
000230  3b0c              SUBS     r3,r3,#0xc
000232  801a              STRH     r2,[r3,#0]
;;;156     	TIM8->CCR1  = 0;				  // count down mode, inactive all cycle when initial									 
000234  2200              MOVS     r2,#0
000236  4b4c              LDR      r3,|L1.872|
000238  3308              ADDS     r3,r3,#8
00023a  801a              STRH     r2,[r3,#0]
;;;157    }
00023c  4770              BX       lr
;;;158    
                          ENDP

                  TIM8_ARR_Update PROC
;;;159    void TIM8_ARR_Update(u16 arr)
00023e  494a              LDR      r1,|L1.872|
;;;160    {
;;;161    
;;;162     	TIM8->ARR=arr;  	 
000240  8008              STRH     r0,[r1,#0]
;;;163    	TIM8->CNT=arr;							 
000242  494a              LDR      r1,|L1.876|
000244  f8a10424          STRH     r0,[r1,#0x424]
;;;164    }
000248  4770              BX       lr
;;;165    
                          ENDP

                  TIM6_Int_Init PROC
;;;166    void TIM6_Int_Init(u16 arr,u16 psc)
00024a  b570              PUSH     {r4-r6,lr}
;;;167    {
00024c  4604              MOV      r4,r0
00024e  460d              MOV      r5,r1
;;;168    	RCC->APB1ENR|=1<<4;	//TIM6时钟使能    
000250  4842              LDR      r0,|L1.860|
000252  69c0              LDR      r0,[r0,#0x1c]
000254  f0400010          ORR      r0,r0,#0x10
000258  4940              LDR      r1,|L1.860|
00025a  61c8              STR      r0,[r1,#0x1c]
;;;169     	TIM6->ARR=arr;  	//设定计数器自动重装值//刚好1ms    
00025c  4844              LDR      r0,|L1.880|
00025e  8584              STRH     r4,[r0,#0x2c]
;;;170    	TIM6->PSC=psc;  	//预分频器7200,得到10Khz的计数时钟		  
000260  8505              STRH     r5,[r0,#0x28]
;;;171    	TIM6->DIER|=1<<0;   //允许更新中断	  
000262  8980              LDRH     r0,[r0,#0xc]
000264  f0400001          ORR      r0,r0,#1
000268  4941              LDR      r1,|L1.880|
00026a  8188              STRH     r0,[r1,#0xc]
;;;172    	//TIM1->CR1|=0x01;    //使能定时器3
;;;173    
;;;174    	TIM6->CR1|=(0x01<<7);
00026c  4608              MOV      r0,r1
00026e  8800              LDRH     r0,[r0,#0]
000270  f0400080          ORR      r0,r0,#0x80
000274  8008              STRH     r0,[r1,#0]
;;;175    	TIM6->SR&=~(1<<0);//清除中断标志位
000276  4608              MOV      r0,r1
000278  8a00              LDRH     r0,[r0,#0x10]
00027a  f0200001          BIC      r0,r0,#1
00027e  8208              STRH     r0,[r1,#0x10]
;;;176    	//TIM6->CR1|=(0x01<<4); // no count down i tim6
;;;177    	//TIM6->CNT=(u16)arr;
;;;178      	MY_NVIC_Init(1,3,TIM6_IRQChannel,2);//抢占1，子优先级3，组2									 
000280  2302              MOVS     r3,#2
000282  2236              MOVS     r2,#0x36
000284  2103              MOVS     r1,#3
000286  2001              MOVS     r0,#1
000288  f7fffffe          BL       MY_NVIC_Init
;;;179    }
00028c  bd70              POP      {r4-r6,pc}
;;;180    
                          ENDP

                  TIM6_ARR_Update PROC
;;;181    void TIM6_ARR_Update(u16 arr)
00028e  4938              LDR      r1,|L1.880|
;;;182    {
;;;183    
;;;184     	TIM6->ARR=arr;  	 
000290  8588              STRH     r0,[r1,#0x2c]
;;;185    	TIM6->CNT=arr;							 
000292  8488              STRH     r0,[r1,#0x24]
;;;186    }
000294  4770              BX       lr
;;;187    
                          ENDP

                  TIM7_Int_Init PROC
;;;188    
;;;189    void TIM7_Int_Init(u16 arr,u16 psc)
000296  b570              PUSH     {r4-r6,lr}
;;;190    {
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
;;;191    	RCC->APB1ENR|=1<<5;	//TIM7时钟使能    
00029c  482f              LDR      r0,|L1.860|
00029e  69c0              LDR      r0,[r0,#0x1c]
0002a0  f0400020          ORR      r0,r0,#0x20
0002a4  492d              LDR      r1,|L1.860|
0002a6  61c8              STR      r0,[r1,#0x1c]
;;;192     	TIM7->ARR=arr;  	//设定计数器自动重装值//刚好1ms    
0002a8  4832              LDR      r0,|L1.884|
0002aa  8004              STRH     r4,[r0,#0]
;;;193    	TIM7->PSC=psc;  	//预分频器	  
0002ac  4830              LDR      r0,|L1.880|
0002ae  f8a05428          STRH     r5,[r0,#0x428]
;;;194    	TIM7->DIER|=1<<0;   //允许更新中断	  
0002b2  f8b0040c          LDRH     r0,[r0,#0x40c]
0002b6  f0400001          ORR      r0,r0,#1
0002ba  492d              LDR      r1,|L1.880|
0002bc  f8a1040c          STRH     r0,[r1,#0x40c]
;;;195    
;;;196    	TIM7->CR1|=(0x01<<7);
0002c0  4608              MOV      r0,r1
0002c2  f8b00400          LDRH     r0,[r0,#0x400]
0002c6  f0400080          ORR      r0,r0,#0x80
0002ca  f8a10400          STRH     r0,[r1,#0x400]
;;;197    	TIM7->SR&=~(1<<0);//清除中断标志位
0002ce  4608              MOV      r0,r1
0002d0  f8b00410          LDRH     r0,[r0,#0x410]
0002d4  f0200001          BIC      r0,r0,#1
0002d8  f8a10410          STRH     r0,[r1,#0x410]
;;;198      	MY_NVIC_Init(1,3,TIM7_IRQChannel,2);//抢占1，子优先级3，组2									 
0002dc  2302              MOVS     r3,#2
0002de  2237              MOVS     r2,#0x37
0002e0  2103              MOVS     r1,#3
0002e2  2001              MOVS     r0,#1
0002e4  f7fffffe          BL       MY_NVIC_Init
;;;199    }
0002e8  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

                  TIM7_ARR_Update PROC
;;;201    void TIM7_ARR_Update(u16 arr)
0002ea  4922              LDR      r1,|L1.884|
;;;202    {
;;;203    
;;;204     	TIM7->ARR=arr;  	 
0002ec  8008              STRH     r0,[r1,#0]
;;;205    	TIM7->CNT=arr;							 
0002ee  4920              LDR      r1,|L1.880|
0002f0  f8a10424          STRH     r0,[r1,#0x424]
;;;206    }
0002f4  4770              BX       lr
;;;207    
                          ENDP

                  TIM7_Init PROC
;;;208    void TIM7_Init(void)
0002f6  b510              PUSH     {r4,lr}
;;;209    {
;;;210    	TIM7_Int_Init(100,639);  // tick= 100k/100 = 1ms
0002f8  f240217f          MOV      r1,#0x27f
0002fc  2064              MOVS     r0,#0x64
0002fe  f7fffffe          BL       TIM7_Int_Init
;;;211    	TIM7->CR1|=0x01;
000302  481c              LDR      r0,|L1.884|
000304  382c              SUBS     r0,r0,#0x2c
000306  8800              LDRH     r0,[r0,#0]
000308  f0400001          ORR      r0,r0,#1
00030c  4918              LDR      r1,|L1.880|
00030e  f8a10400          STRH     r0,[r1,#0x400]
;;;212    }
000312  bd10              POP      {r4,pc}
;;;213    
                          ENDP

                  TIM7_Stop PROC
;;;214    void TIM7_Stop(void)
000314  4817              LDR      r0,|L1.884|
;;;215    {
;;;216    	TIM7->CR1&=~0x01;
000316  382c              SUBS     r0,r0,#0x2c
000318  8800              LDRH     r0,[r0,#0]
00031a  f0200001          BIC      r0,r0,#1
00031e  4914              LDR      r1,|L1.880|
000320  f8a10400          STRH     r0,[r1,#0x400]
;;;217    }
000324  4770              BX       lr
;;;218    
                          ENDP

                  TIM7_IRQHandler PROC
;;;219    
;;;220    void TIM7_IRQHandler(void)
000326  4813              LDR      r0,|L1.884|
;;;221    {
;;;222       TIM7->SR&=~(1<<0);
000328  381c              SUBS     r0,r0,#0x1c
00032a  8800              LDRH     r0,[r0,#0]
00032c  f0200001          BIC      r0,r0,#1
000330  490f              LDR      r1,|L1.880|
000332  f8a10410          STRH     r0,[r1,#0x410]
;;;223       Time_LED_Delay++;
000336  4810              LDR      r0,|L1.888|
000338  8800              LDRH     r0,[r0,#0]  ; Time_LED_Delay
00033a  1c40              ADDS     r0,r0,#1
00033c  490e              LDR      r1,|L1.888|
00033e  8008              STRH     r0,[r1,#0]
;;;224    }
000340  4770              BX       lr
;;;225    
                          ENDP

000342  0000              DCW      0x0000
                  |L1.836|
                          DCD      0x40000400
                  |L1.840|
                          DCD      BaseCounter
                  |L1.844|
                          DCD      PCR_Regs
                  |L1.848|
                          DCD      PixReadmMode
                  |L1.852|
                          DCD      ||.data||
                  |L1.856|
                          DCD      TMR_Int_Flag
                  |L1.860|
                          DCD      0x40021000
                  |L1.864|
                          DCD      0x40012c2c
                  |L1.868|
                          DCD      0x40012000
                  |L1.872|
                          DCD      0x4001342c
                  |L1.876|
                          DCD      0x40013000
                  |L1.880|
                          DCD      0x40001000
                  |L1.884|
                          DCD      0x4000142c
                  |L1.888|
                          DCD      Time_LED_Delay

                          AREA ||.data||, DATA, ALIGN=0

                  IntCnt
000000  00                DCB      0x00
