; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\rtc.o --depend=..\OBJ\rtc.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\rtc.crf ..\HARDWARE\RTC\rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_Get_Week PROC
;;;206    //返回值：星期号																						 
;;;207    u8 RTC_Get_Week(u16 year,u8 month,u8 day)
000000  b5f0              PUSH     {r4-r7,lr}
;;;208    {	
000002  4603              MOV      r3,r0
;;;209    	u16 temp2;
;;;210    	u8 yearH,yearL;
;;;211    	
;;;212    	yearH=year/100;	yearL=year%100; 
000004  2064              MOVS     r0,#0x64
000006  fb93f0f0          SDIV     r0,r3,r0
00000a  b2c5              UXTB     r5,r0
00000c  2064              MOVS     r0,#0x64
00000e  fb93f7f0          SDIV     r7,r3,r0
000012  fb003017          MLS      r0,r0,r7,r3
000016  b2c6              UXTB     r6,r0
;;;213    	// 如果为21世纪,年份数加100  
;;;214    	if (yearH>19)yearL+=100;
000018  2d13              CMP      r5,#0x13
00001a  dd02              BLE      |L1.34|
00001c  f1060064          ADD      r0,r6,#0x64
000020  b2c6              UXTB     r6,r0
                  |L1.34|
;;;215    	// 所过闰年数只算1900年之后的  
;;;216    	temp2=yearL+yearL/4;
000022  17f7              ASRS     r7,r6,#31
000024  eb067797          ADD      r7,r6,r7,LSR #30
000028  4630              MOV      r0,r6
00002a  eb0604a7          ADD      r4,r6,r7,ASR #2
;;;217    	temp2=temp2%7; 
00002e  2007              MOVS     r0,#7
000030  fb94f7f0          SDIV     r7,r4,r0
000034  fb004017          MLS      r0,r0,r7,r4
000038  b284              UXTH     r4,r0
;;;218    	temp2=temp2+day+table_week[month-1];
00003a  18a0              ADDS     r0,r4,r2
00003c  1e4f              SUBS     r7,r1,#1
00003e  f8dfc434          LDR      r12,|L1.1140|
000042  f81c7007          LDRB     r7,[r12,r7]
000046  4438              ADD      r0,r0,r7
000048  b284              UXTH     r4,r0
;;;219    	if (yearL%4==0&&month<3)temp2--;
00004a  17f7              ASRS     r7,r6,#31
00004c  eb067797          ADD      r7,r6,r7,LSR #30
000050  10bf              ASRS     r7,r7,#2
000052  ebb60787          SUBS     r7,r6,r7,LSL #2
000056  d103              BNE      |L1.96|
000058  2903              CMP      r1,#3
00005a  da01              BGE      |L1.96|
00005c  1e60              SUBS     r0,r4,#1
00005e  b284              UXTH     r4,r0
                  |L1.96|
;;;220    	return(temp2%7);
000060  2007              MOVS     r0,#7
000062  fb94f7f0          SDIV     r7,r4,r0
000066  fb004017          MLS      r0,r0,r7,r4
00006a  b2c0              UXTB     r0,r0
;;;221    }			  
00006c  bdf0              POP      {r4-r7,pc}
;;;222    
                          ENDP

                  Is_Leap_Year PROC
;;;93     //返回值:该年份是不是闰年.1,是.0,不是
;;;94     u8 Is_Leap_Year(u16 year)
00006e  4601              MOV      r1,r0
;;;95     {			  
;;;96     	if(year%4==0) //必须能被4整除
000070  17ca              ASRS     r2,r1,#31
000072  eb017292          ADD      r2,r1,r2,LSR #30
000076  1092              ASRS     r2,r2,#2
000078  ebb10282          SUBS     r2,r1,r2,LSL #2
00007c  d112              BNE      |L1.164|
;;;97     	{ 
;;;98     		if(year%100==0) 
00007e  2064              MOVS     r0,#0x64
000080  fb91f2f0          SDIV     r2,r1,r0
000084  fb001012          MLS      r0,r0,r2,r1
000088  b950              CBNZ     r0,|L1.160|
;;;99     		{ 
;;;100    			if(year%400==0)return 1;//如果以00结尾,还要能被400整除 	   
00008a  f44f70c8          MOV      r0,#0x190
00008e  fb91f2f0          SDIV     r2,r1,r0
000092  fb001012          MLS      r0,r0,r2,r1
000096  b908              CBNZ     r0,|L1.156|
000098  2001              MOVS     r0,#1
                  |L1.154|
;;;101    			else return 0;   
;;;102    		}else return 1;   
;;;103    	}else return 0;	
;;;104    }	 			   
00009a  4770              BX       lr
                  |L1.156|
00009c  2000              MOVS     r0,#0                 ;101
00009e  e7fc              B        |L1.154|
                  |L1.160|
0000a0  2001              MOVS     r0,#1                 ;102
0000a2  e7fa              B        |L1.154|
                  |L1.164|
0000a4  2000              MOVS     r0,#0                 ;103
0000a6  e7f8              B        |L1.154|
;;;105    //设置时钟
                          ENDP

                  RTC_Get PROC
;;;151    //返回值:0,成功;其他:错误代码.
;;;152    u8 RTC_Get(void)
0000a8  b570              PUSH     {r4-r6,lr}
;;;153    {
;;;154    	static u16 daycnt=0;
;;;155    	u32 timecount=0; 
0000aa  2500              MOVS     r5,#0
;;;156    	u32 temp=0;
0000ac  2600              MOVS     r6,#0
;;;157    	u16 temp1=0;	  
0000ae  2400              MOVS     r4,#0
;;;158     	timecount=RTC->CNTH;//得到计数器中的值(秒钟数)
0000b0  48f1              LDR      r0,|L1.1144|
0000b2  8805              LDRH     r5,[r0,#0]
;;;159    	timecount<<=16;
0000b4  042d              LSLS     r5,r5,#16
;;;160    	timecount+=RTC->CNTL;			 
0000b6  48f1              LDR      r0,|L1.1148|
0000b8  f8b0081c          LDRH     r0,[r0,#0x81c]
0000bc  4405              ADD      r5,r5,r0
;;;161    
;;;162     	temp=timecount/86400;   //得到天数(秒钟数对应的)
0000be  48f0              LDR      r0,|L1.1152|
0000c0  fbb5f6f0          UDIV     r6,r5,r0
;;;163    	if(daycnt!=temp)//超过一天了
0000c4  48ef              LDR      r0,|L1.1156|
0000c6  8800              LDRH     r0,[r0,#0]  ; daycnt
0000c8  42b0              CMP      r0,r6
0000ca  d03c              BEQ      |L1.326|
;;;164    	{	  
;;;165    		daycnt=temp;
0000cc  49ed              LDR      r1,|L1.1156|
0000ce  800e              STRH     r6,[r1,#0]
;;;166    		temp1=1970;	//从1970年开始
0000d0  f24074b2          MOV      r4,#0x7b2
;;;167    		while(temp>=365)
0000d4  e010              B        |L1.248|
                  |L1.214|
;;;168    		{				 
;;;169    			if(Is_Leap_Year(temp1))//是闰年
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       Is_Leap_Year
0000dc  b140              CBZ      r0,|L1.240|
;;;170    			{
;;;171    				if(temp>=366)temp-=366;//闰年的秒钟数
0000de  f5b67fb7          CMP      r6,#0x16e
0000e2  d302              BCC      |L1.234|
0000e4  f5a676b7          SUB      r6,r6,#0x16e
0000e8  e004              B        |L1.244|
                  |L1.234|
;;;172    				else {temp1++;break;}  
0000ea  1c60              ADDS     r0,r4,#1
0000ec  b284              UXTH     r4,r0
0000ee  e006              B        |L1.254|
                  |L1.240|
;;;173    			}
;;;174    			else temp-=365;	  //平年 
0000f0  f2a6166d          SUB      r6,r6,#0x16d
                  |L1.244|
;;;175    			temp1++;  
0000f4  1c60              ADDS     r0,r4,#1
0000f6  b284              UXTH     r4,r0
                  |L1.248|
0000f8  f5b67fb6          CMP      r6,#0x16c             ;167
0000fc  d8eb              BHI      |L1.214|
                  |L1.254|
0000fe  bf00              NOP                            ;172
;;;176    		}   
;;;177    		calendar.w_year=temp1;//得到年份
000100  48e1              LDR      r0,|L1.1160|
000102  8084              STRH     r4,[r0,#4]
;;;178    		temp1=0;
000104  2400              MOVS     r4,#0
;;;179    		while(temp>=28)//超过了一个月
000106  e016              B        |L1.310|
                  |L1.264|
;;;180    		{
;;;181    			if(Is_Leap_Year(calendar.w_year)&&temp1==1)//当年是不是闰年/2月份
000108  49df              LDR      r1,|L1.1160|
00010a  8888              LDRH     r0,[r1,#4]  ; calendar
00010c  f7fffffe          BL       Is_Leap_Year
000110  b130              CBZ      r0,|L1.288|
000112  2c01              CMP      r4,#1
000114  d104              BNE      |L1.288|
;;;182    			{
;;;183    				if(temp>=29)temp-=29;//闰年的秒钟数
000116  2e1d              CMP      r6,#0x1d
000118  d301              BCC      |L1.286|
00011a  3e1d              SUBS     r6,r6,#0x1d
00011c  e009              B        |L1.306|
                  |L1.286|
;;;184    				else break; 
00011e  e00c              B        |L1.314|
                  |L1.288|
;;;185    			}
;;;186    			else 
;;;187    			{
;;;188    				if(temp>=mon_table[temp1])temp-=mon_table[temp1];//平年
000120  48da              LDR      r0,|L1.1164|
000122  5d00              LDRB     r0,[r0,r4]
000124  42b0              CMP      r0,r6
000126  d803              BHI      |L1.304|
000128  48d8              LDR      r0,|L1.1164|
00012a  5d00              LDRB     r0,[r0,r4]
00012c  1a36              SUBS     r6,r6,r0
00012e  e000              B        |L1.306|
                  |L1.304|
;;;189    				else break;
000130  e003              B        |L1.314|
                  |L1.306|
;;;190    			}
;;;191    			temp1++;  
000132  1c60              ADDS     r0,r4,#1
000134  b284              UXTH     r4,r0
                  |L1.310|
000136  2e1c              CMP      r6,#0x1c              ;179
000138  d2e6              BCS      |L1.264|
                  |L1.314|
00013a  bf00              NOP                            ;184
;;;192    		}
;;;193    		calendar.w_month=temp1+1;	//得到月份
00013c  1c60              ADDS     r0,r4,#1
00013e  49d2              LDR      r1,|L1.1160|
000140  7188              STRB     r0,[r1,#6]
;;;194    		calendar.w_date=temp+1;  	//得到日期 
000142  1c70              ADDS     r0,r6,#1
000144  71c8              STRB     r0,[r1,#7]
                  |L1.326|
;;;195    	}
;;;196    	temp=timecount%86400;     		//得到秒钟数   	   
000146  48ce              LDR      r0,|L1.1152|
000148  fbb5f1f0          UDIV     r1,r5,r0
00014c  fb005611          MLS      r6,r0,r1,r5
;;;197    	calendar.hour=temp/3600;     	//小时
000150  f44f6061          MOV      r0,#0xe10
000154  fbb6f0f0          UDIV     r0,r6,r0
000158  49cb              LDR      r1,|L1.1160|
00015a  7008              STRB     r0,[r1,#0]
;;;198    	calendar.min=(temp%3600)/60; 	//分钟	
00015c  f44f6061          MOV      r0,#0xe10
000160  fbb6f1f0          UDIV     r1,r6,r0
000164  fb006011          MLS      r0,r0,r1,r6
000168  213c              MOVS     r1,#0x3c
00016a  fbb0f0f1          UDIV     r0,r0,r1
00016e  49c6              LDR      r1,|L1.1160|
000170  7048              STRB     r0,[r1,#1]
;;;199    	calendar.sec=(temp%3600)%60; 	//秒钟
000172  f44f6061          MOV      r0,#0xe10
000176  fbb6f1f0          UDIV     r1,r6,r0
00017a  fb006011          MLS      r0,r0,r1,r6
00017e  213c              MOVS     r1,#0x3c
000180  fbb0f2f1          UDIV     r2,r0,r1
000184  fb010012          MLS      r0,r1,r2,r0
000188  49bf              LDR      r1,|L1.1160|
00018a  7088              STRB     r0,[r1,#2]
;;;200    	calendar.week=RTC_Get_Week(calendar.w_year,calendar.w_month,calendar.w_date);//获取星期   
00018c  460b              MOV      r3,r1
00018e  79da              LDRB     r2,[r3,#7]  ; calendar
000190  7999              LDRB     r1,[r3,#6]  ; calendar
000192  8898              LDRH     r0,[r3,#4]  ; calendar
000194  f7fffffe          BL       RTC_Get_Week
000198  49bb              LDR      r1,|L1.1160|
00019a  7208              STRB     r0,[r1,#8]
;;;201    	return 0;
00019c  2000              MOVS     r0,#0
;;;202    }	 
00019e  bd70              POP      {r4-r6,pc}
;;;203    //获得现在是星期几
                          ENDP

                  RTC_Set PROC
;;;115    //返回值：设置结果。0，成功；1，失败。
;;;116    u8 RTC_Set(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)
0001a0  e92d4ff0          PUSH     {r4-r11,lr}
;;;117    {
0001a4  4604              MOV      r4,r0
0001a6  460d              MOV      r5,r1
0001a8  4616              MOV      r6,r2
0001aa  461f              MOV      r7,r3
0001ac  e9dd8909          LDRD     r8,r9,[sp,#0x24]
;;;118    	u16 t;
;;;119    	u32 seccount=0;
0001b0  f04f0b00          MOV      r11,#0
;;;120    	if(syear<1970||syear>2099)return 1;	   
0001b4  f24070b2          MOV      r0,#0x7b2
0001b8  4284              CMP      r4,r0
0001ba  db03              BLT      |L1.452|
0001bc  f6400033          MOV      r0,#0x833
0001c0  4284              CMP      r4,r0
0001c2  dd02              BLE      |L1.458|
                  |L1.452|
0001c4  2001              MOVS     r0,#1
                  |L1.454|
;;;121    	for(t=1970;t<syear;t++)	//把所有年份的秒钟相加
;;;122    	{
;;;123    		if(Is_Leap_Year(t))seccount+=31622400;//闰年的秒钟数
;;;124    		else seccount+=31536000;			  //平年的秒钟数
;;;125    	}
;;;126    	smon-=1;
;;;127    	for(t=0;t<smon;t++)	   //把前面月份的秒钟数相加
;;;128    	{
;;;129    		seccount+=(u32)mon_table[t]*86400;//月份秒钟数相加
;;;130    		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;//闰年2月份增加一天的秒钟数	   
;;;131    	}
;;;132    	seccount+=(u32)(sday-1)*86400;//把前面日期的秒钟数相加 
;;;133    	seccount+=(u32)hour*3600;//小时秒钟数
;;;134        seccount+=(u32)min*60;	 //分钟秒钟数
;;;135    	seccount+=sec;//最后的秒钟加上去
;;;136    													    
;;;137    	//设置时钟
;;;138        RCC->APB1ENR|=1<<28;//使能电源时钟
;;;139        RCC->APB1ENR|=1<<27;//使能备份时钟
;;;140    	PWR->CR|=1<<8;    //取消备份区写保护
;;;141    	//上面三步是必须的!
;;;142    	RTC->CRL|=1<<4;   //允许配置 
;;;143    	RTC->CNTL=seccount&0xffff;
;;;144    	RTC->CNTH=seccount>>16;
;;;145    	RTC->CRL&=~(1<<4);//配置更新
;;;146    	while(!(RTC->CRL&(1<<5)));//等待RTC寄存器操作完成 
;;;147    	RTC_Get();//设置完之后更新一下数据 	
;;;148    	return 0;	    
;;;149    }
0001c6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.458|
0001ca  f2407ab2          MOV      r10,#0x7b2            ;121
0001ce  e00c              B        |L1.490|
                  |L1.464|
0001d0  4650              MOV      r0,r10                ;123
0001d2  f7fffffe          BL       Is_Leap_Year
0001d6  b110              CBZ      r0,|L1.478|
0001d8  48ad              LDR      r0,|L1.1168|
0001da  4483              ADD      r11,r11,r0            ;123
0001dc  e001              B        |L1.482|
                  |L1.478|
0001de  48ad              LDR      r0,|L1.1172|
0001e0  4483              ADD      r11,r11,r0            ;124
                  |L1.482|
0001e2  f10a0001          ADD      r0,r10,#1             ;121
0001e6  fa1ffa80          UXTH     r10,r0                ;121
                  |L1.490|
0001ea  45a2              CMP      r10,r4                ;121
0001ec  dbf0              BLT      |L1.464|
0001ee  1e68              SUBS     r0,r5,#1              ;126
0001f0  b2c5              UXTB     r5,r0                 ;126
0001f2  f04f0a00          MOV      r10,#0                ;127
0001f6  e014              B        |L1.546|
                  |L1.504|
0001f8  48a4              LDR      r0,|L1.1164|
0001fa  f810000a          LDRB     r0,[r0,r10]           ;129
0001fe  f24021a3          MOV      r1,#0x2a3             ;129
000202  4348              MULS     r0,r1,r0              ;129
000204  eb0b1bc0          ADD      r11,r11,r0,LSL #7     ;129
000208  4620              MOV      r0,r4                 ;130
00020a  f7fffffe          BL       Is_Leap_Year
00020e  b120              CBZ      r0,|L1.538|
000210  f1ba0f01          CMP      r10,#1                ;130
000214  d101              BNE      |L1.538|
000216  489a              LDR      r0,|L1.1152|
000218  4483              ADD      r11,r11,r0            ;130
                  |L1.538|
00021a  f10a0001          ADD      r0,r10,#1             ;127
00021e  fa1ffa80          UXTH     r10,r0                ;127
                  |L1.546|
000222  45aa              CMP      r10,r5                ;127
000224  dbe8              BLT      |L1.504|
000226  1e70              SUBS     r0,r6,#1              ;132
000228  f24021a3          MOV      r1,#0x2a3             ;132
00022c  4348              MULS     r0,r1,r0              ;132
00022e  eb0b1bc0          ADD      r11,r11,r0,LSL #7     ;132
000232  ebc71047          RSB      r0,r7,r7,LSL #5       ;133
000236  ebc02007          RSB      r0,r0,r7,LSL #8       ;133
00023a  eb0b1b00          ADD      r11,r11,r0,LSL #4     ;133
00023e  ebc81008          RSB      r0,r8,r8,LSL #4       ;134
000242  eb0b0b80          ADD      r11,r11,r0,LSL #2     ;134
000246  44cb              ADD      r11,r11,r9            ;135
000248  4893              LDR      r0,|L1.1176|
00024a  69c0              LDR      r0,[r0,#0x1c]         ;138
00024c  f0405080          ORR      r0,r0,#0x10000000     ;138
000250  4991              LDR      r1,|L1.1176|
000252  61c8              STR      r0,[r1,#0x1c]         ;138
000254  4608              MOV      r0,r1                 ;139
000256  69c0              LDR      r0,[r0,#0x1c]         ;139
000258  f0406000          ORR      r0,r0,#0x8000000      ;139
00025c  61c8              STR      r0,[r1,#0x1c]         ;139
00025e  488f              LDR      r0,|L1.1180|
000260  6800              LDR      r0,[r0,#0]            ;140
000262  f4407080          ORR      r0,r0,#0x100          ;140
000266  498d              LDR      r1,|L1.1180|
000268  6008              STR      r0,[r1,#0]            ;140
00026a  4883              LDR      r0,|L1.1144|
00026c  3814              SUBS     r0,r0,#0x14           ;142
00026e  8800              LDRH     r0,[r0,#0]            ;142
000270  f0400010          ORR      r0,r0,#0x10           ;142
000274  4981              LDR      r1,|L1.1148|
000276  f8a10804          STRH     r0,[r1,#0x804]        ;142
00027a  497f              LDR      r1,|L1.1144|
00027c  1d09              ADDS     r1,r1,#4              ;143
00027e  f8a1b000          STRH     r11,[r1,#0]           ;143
000282  ea4f401b          LSR      r0,r11,#16            ;144
000286  497d              LDR      r1,|L1.1148|
000288  f8a10818          STRH     r0,[r1,#0x818]        ;144
00028c  4608              MOV      r0,r1                 ;145
00028e  f8b00804          LDRH     r0,[r0,#0x804]        ;145
000292  f0200010          BIC      r0,r0,#0x10           ;145
000296  f8a10804          STRH     r0,[r1,#0x804]        ;145
00029a  bf00              NOP                            ;146
                  |L1.668|
00029c  4876              LDR      r0,|L1.1144|
00029e  3814              SUBS     r0,r0,#0x14           ;146
0002a0  8800              LDRH     r0,[r0,#0]            ;146
0002a2  f0100f20          TST      r0,#0x20              ;146
0002a6  d0f9              BEQ      |L1.668|
0002a8  f7fffffe          BL       RTC_Get
0002ac  2000              MOVS     r0,#0                 ;148
0002ae  e78a              B        |L1.454|
;;;150    //得到当前的时间，结果保存在calendar结构体里面
                          ENDP

                  RTC_Init PROC
;;;24     //其他:错误代码
;;;25     u8 RTC_Init(void)
0002b0  b51c              PUSH     {r2-r4,lr}
;;;26     {
;;;27     	//检查是不是第一次配置时钟
;;;28     	u8 temp=0;
0002b2  2400              MOVS     r4,#0
;;;29     	if(BKP->DR1!=0X5050)//第一次配置
0002b4  487a              LDR      r0,|L1.1184|
0002b6  8800              LDRH     r0,[r0,#0]
0002b8  f5a041a0          SUB      r1,r0,#0x5000
0002bc  3950              SUBS     r1,r1,#0x50
0002be  d07e              BEQ      |L1.958|
;;;30     	{	 
;;;31     	  	RCC->APB1ENR|=1<<28;     //使能电源时钟	    
0002c0  4875              LDR      r0,|L1.1176|
0002c2  69c0              LDR      r0,[r0,#0x1c]
0002c4  f0405080          ORR      r0,r0,#0x10000000
0002c8  4973              LDR      r1,|L1.1176|
0002ca  61c8              STR      r0,[r1,#0x1c]
;;;32     		RCC->APB1ENR|=1<<27;     //使能备份时钟	    
0002cc  4608              MOV      r0,r1
0002ce  69c0              LDR      r0,[r0,#0x1c]
0002d0  f0406000          ORR      r0,r0,#0x8000000
0002d4  61c8              STR      r0,[r1,#0x1c]
;;;33     		PWR->CR|=1<<8;           //取消备份区写保护
0002d6  4871              LDR      r0,|L1.1180|
0002d8  6800              LDR      r0,[r0,#0]
0002da  f4407080          ORR      r0,r0,#0x100
0002de  496f              LDR      r1,|L1.1180|
0002e0  6008              STR      r0,[r1,#0]
;;;34     		RCC->BDCR|=1<<16;        //备份区域软复位	   
0002e2  486d              LDR      r0,|L1.1176|
0002e4  6a00              LDR      r0,[r0,#0x20]
0002e6  f4403080          ORR      r0,r0,#0x10000
0002ea  496b              LDR      r1,|L1.1176|
0002ec  6208              STR      r0,[r1,#0x20]
;;;35     		RCC->BDCR&=~(1<<16);     //备份区域软复位结束	  	 
0002ee  4608              MOV      r0,r1
0002f0  6a00              LDR      r0,[r0,#0x20]
0002f2  f4203080          BIC      r0,r0,#0x10000
0002f6  6208              STR      r0,[r1,#0x20]
;;;36     	    RCC->BDCR|=1<<0;         //开启外部低速振荡器 
0002f8  4608              MOV      r0,r1
0002fa  6a00              LDR      r0,[r0,#0x20]
0002fc  f0400001          ORR      r0,r0,#1
000300  6208              STR      r0,[r1,#0x20]
;;;37     	    while((!(RCC->BDCR&0X02))&&temp<250)//等待外部时钟就绪	 
000302  e004              B        |L1.782|
                  |L1.772|
;;;38     		{
;;;39     			temp++;
000304  1c60              ADDS     r0,r4,#1
000306  b2c4              UXTB     r4,r0
;;;40     			delay_ms(10);
000308  200a              MOVS     r0,#0xa
00030a  f7fffffe          BL       delay_ms
                  |L1.782|
00030e  4862              LDR      r0,|L1.1176|
000310  6a00              LDR      r0,[r0,#0x20]         ;37
000312  f0100f02          TST      r0,#2                 ;37
000316  d101              BNE      |L1.796|
000318  2cfa              CMP      r4,#0xfa              ;37
00031a  dbf3              BLT      |L1.772|
                  |L1.796|
;;;41     		};
;;;42     		if(temp>=250)return 1;//初始化时钟失败,晶振有问题	    
00031c  2cfa              CMP      r4,#0xfa
00031e  db01              BLT      |L1.804|
000320  2001              MOVS     r0,#1
                  |L1.802|
;;;43     
;;;44     		RCC->BDCR|=1<<8; //LSI作为RTC时钟 	    
;;;45     		RCC->BDCR|=1<<15;//RTC时钟使能	  
;;;46     	  	while(!(RTC->CRL&(1<<5)));//等待RTC寄存器操作完成	 
;;;47         	while(!(RTC->CRL&(1<<3)));//等待RTC寄存器同步  
;;;48         	RTC->CRH|=0X01;  		  //允许秒中断
;;;49         	while(!(RTC->CRL&(1<<5)));//等待RTC寄存器操作完成	 
;;;50     		RTC->CRL|=1<<4;              //允许配置	 
;;;51     		 
;;;52     		RTC->PRLH=0X0000;
;;;53     		RTC->PRLL=32767;          //时钟周期设置(有待观察,看是否跑慢了?)理论值：32767										 
;;;54     											    
;;;55     		RTC_Set(2012,9,7,13,16,55);  //设置时间	  
;;;56     		RTC->CRL&=~(1<<4);           //配置更新
;;;57     		while(!(RTC->CRL&(1<<5)));   //等待RTC寄存器操作完成		 									  
;;;58     		BKP->DR1=0X5050;  
;;;59     	 	printf("FIRST TIME\n");
;;;60     	}else//系统继续计时
;;;61     	{
;;;62         	while(!(RTC->CRL&(1<<3)));//等待RTC寄存器同步  
;;;63         	RTC->CRH|=0X01;  		  //允许秒中断
;;;64         	while(!(RTC->CRL&(1<<5)));//等待RTC寄存器操作完成
;;;65     		printf("OK\n");
;;;66     	}		    				  
;;;67     	MY_NVIC_Init(0,0,RTC_IRQChannel,2);//优先级设置    
;;;68     	RTC_Get();//更新时间 
;;;69     	return 0; //ok
;;;70     }		 				    
000322  bd1c              POP      {r2-r4,pc}
                  |L1.804|
000324  485c              LDR      r0,|L1.1176|
000326  6a00              LDR      r0,[r0,#0x20]         ;44
000328  f4407080          ORR      r0,r0,#0x100          ;44
00032c  495a              LDR      r1,|L1.1176|
00032e  6208              STR      r0,[r1,#0x20]         ;44
000330  4608              MOV      r0,r1                 ;45
000332  6a00              LDR      r0,[r0,#0x20]         ;45
000334  f4404000          ORR      r0,r0,#0x8000         ;45
000338  6208              STR      r0,[r1,#0x20]         ;45
00033a  bf00              NOP                            ;46
                  |L1.828|
00033c  484e              LDR      r0,|L1.1144|
00033e  3814              SUBS     r0,r0,#0x14           ;46
000340  8800              LDRH     r0,[r0,#0]            ;46
000342  f0100f20          TST      r0,#0x20              ;46
000346  d0f9              BEQ      |L1.828|
000348  bf00              NOP                            ;47
                  |L1.842|
00034a  484b              LDR      r0,|L1.1144|
00034c  3814              SUBS     r0,r0,#0x14           ;47
00034e  8800              LDRH     r0,[r0,#0]            ;47
000350  f0100f08          TST      r0,#8                 ;47
000354  d0f9              BEQ      |L1.842|
000356  4848              LDR      r0,|L1.1144|
000358  3818              SUBS     r0,r0,#0x18           ;48
00035a  8800              LDRH     r0,[r0,#0]            ;48
00035c  f0400001          ORR      r0,r0,#1              ;48
000360  4946              LDR      r1,|L1.1148|
000362  f8a10800          STRH     r0,[r1,#0x800]        ;48
000366  bf00              NOP                            ;49
                  |L1.872|
000368  4843              LDR      r0,|L1.1144|
00036a  3814              SUBS     r0,r0,#0x14           ;49
00036c  8800              LDRH     r0,[r0,#0]            ;49
00036e  f0100f20          TST      r0,#0x20              ;49
000372  d0f9              BEQ      |L1.872|
000374  4840              LDR      r0,|L1.1144|
000376  3814              SUBS     r0,r0,#0x14           ;50
000378  8800              LDRH     r0,[r0,#0]            ;50
00037a  f0400010          ORR      r0,r0,#0x10           ;50
00037e  493f              LDR      r1,|L1.1148|
000380  f8a10804          STRH     r0,[r1,#0x804]        ;50
000384  2000              MOVS     r0,#0                 ;52
000386  493c              LDR      r1,|L1.1144|
000388  3910              SUBS     r1,r1,#0x10           ;52
00038a  8008              STRH     r0,[r1,#0]            ;52
00038c  f64770ff          MOV      r0,#0x7fff            ;53
000390  493a              LDR      r1,|L1.1148|
000392  f8a1080c          STRH     r0,[r1,#0x80c]        ;53
000396  2337              MOVS     r3,#0x37              ;55
000398  2210              MOVS     r2,#0x10              ;55
00039a  e9cd2300          STRD     r2,r3,[sp,#0]         ;55
00039e  230d              MOVS     r3,#0xd               ;55
0003a0  2207              MOVS     r2,#7                 ;55
0003a2  2109              MOVS     r1,#9                 ;55
0003a4  f24070dc          MOV      r0,#0x7dc             ;55
0003a8  f7fffffe          BL       RTC_Set
0003ac  4833              LDR      r0,|L1.1148|
0003ae  f8b00804          LDRH     r0,[r0,#0x804]        ;56
0003b2  f0200010          BIC      r0,r0,#0x10           ;56
0003b6  4931              LDR      r1,|L1.1148|
0003b8  f8a10804          STRH     r0,[r1,#0x804]        ;56
0003bc  e000              B        |L1.960|
                  |L1.958|
0003be  e00e              B        |L1.990|
                  |L1.960|
0003c0  bf00              NOP                            ;57
                  |L1.962|
0003c2  482d              LDR      r0,|L1.1144|
0003c4  3814              SUBS     r0,r0,#0x14           ;57
0003c6  8800              LDRH     r0,[r0,#0]            ;57
0003c8  f0100f20          TST      r0,#0x20              ;57
0003cc  d0f9              BEQ      |L1.962|
0003ce  f2450050          MOV      r0,#0x5050            ;58
0003d2  4933              LDR      r1,|L1.1184|
0003d4  8008              STRH     r0,[r1,#0]            ;58
0003d6  a033              ADR      r0,|L1.1188|
0003d8  f7fffffe          BL       __2printf
0003dc  e018              B        |L1.1040|
                  |L1.990|
0003de  bf00              NOP                            ;62
                  |L1.992|
0003e0  4825              LDR      r0,|L1.1144|
0003e2  3814              SUBS     r0,r0,#0x14           ;62
0003e4  8800              LDRH     r0,[r0,#0]            ;62
0003e6  f0100f08          TST      r0,#8                 ;62
0003ea  d0f9              BEQ      |L1.992|
0003ec  4822              LDR      r0,|L1.1144|
0003ee  3818              SUBS     r0,r0,#0x18           ;63
0003f0  8800              LDRH     r0,[r0,#0]            ;63
0003f2  f0400001          ORR      r0,r0,#1              ;63
0003f6  4921              LDR      r1,|L1.1148|
0003f8  f8a10800          STRH     r0,[r1,#0x800]        ;63
0003fc  bf00              NOP                            ;64
                  |L1.1022|
0003fe  481e              LDR      r0,|L1.1144|
000400  3814              SUBS     r0,r0,#0x14           ;64
000402  8800              LDRH     r0,[r0,#0]            ;64
000404  f0100f20          TST      r0,#0x20              ;64
000408  d0f9              BEQ      |L1.1022|
00040a  a029              ADR      r0,|L1.1200|
00040c  f7fffffe          BL       __2printf
                  |L1.1040|
000410  2302              MOVS     r3,#2                 ;67
000412  2203              MOVS     r2,#3                 ;67
000414  2100              MOVS     r1,#0                 ;67
000416  4608              MOV      r0,r1                 ;67
000418  f7fffffe          BL       MY_NVIC_Init
00041c  f7fffffe          BL       RTC_Get
000420  2000              MOVS     r0,#0                 ;69
000422  e77e              B        |L1.802|
;;;71     //RTC时钟中断
                          ENDP

                  RTC_IRQHandler PROC
;;;72     //每秒触发一次  	 
;;;73     void RTC_IRQHandler(void)
000424  b500              PUSH     {lr}
;;;74     {		 
;;;75     	if(RTC->CRL&0x0001)//秒钟中断
000426  4814              LDR      r0,|L1.1144|
000428  3814              SUBS     r0,r0,#0x14
00042a  8800              LDRH     r0,[r0,#0]
00042c  f0100f01          TST      r0,#1
000430  d001              BEQ      |L1.1078|
;;;76     	{							
;;;77     		RTC_Get();//更新时间   
000432  f7fffffe          BL       RTC_Get
                  |L1.1078|
;;;78     		//printf("sec:%d\r\n",calendar.sec);
;;;79      	}
;;;80     	if(RTC->CRL&0x0002)//闹钟中断
000436  4810              LDR      r0,|L1.1144|
000438  3814              SUBS     r0,r0,#0x14
00043a  8800              LDRH     r0,[r0,#0]
00043c  f0100f02          TST      r0,#2
000440  d007              BEQ      |L1.1106|
;;;81     	{
;;;82     		RTC->CRL&=~(0x0002);		//清闹钟中断	  
000442  480d              LDR      r0,|L1.1144|
000444  3814              SUBS     r0,r0,#0x14
000446  8800              LDRH     r0,[r0,#0]
000448  f0200002          BIC      r0,r0,#2
00044c  490b              LDR      r1,|L1.1148|
00044e  f8a10804          STRH     r0,[r1,#0x804]
                  |L1.1106|
;;;83       		//printf("Alarm!\n");		   
;;;84       	} 				  								 
;;;85         RTC->CRL&=0X0FFA;         //清除溢出，秒钟中断标志
000452  4809              LDR      r0,|L1.1144|
000454  3814              SUBS     r0,r0,#0x14
000456  8800              LDRH     r0,[r0,#0]
000458  f64071fa          MOV      r1,#0xffa
00045c  4008              ANDS     r0,r0,r1
00045e  4907              LDR      r1,|L1.1148|
000460  f8a10804          STRH     r0,[r1,#0x804]
;;;86     	while(!(RTC->CRL&(1<<5)));//等待RTC寄存器操作完成	  	    						 	   	 
000464  bf00              NOP      
                  |L1.1126|
000466  4804              LDR      r0,|L1.1144|
000468  3814              SUBS     r0,r0,#0x14
00046a  8800              LDRH     r0,[r0,#0]
00046c  f0100f20          TST      r0,#0x20
000470  d0f9              BEQ      |L1.1126|
;;;87     }
000472  bd00              POP      {pc}
;;;88     //判断是否是闰年函数
                          ENDP

                  |L1.1140|
                          DCD      table_week
                  |L1.1144|
                          DCD      0x40002818
                  |L1.1148|
                          DCD      0x40002000
                  |L1.1152|
                          DCD      0x00015180
                  |L1.1156|
                          DCD      ||.data||
                  |L1.1160|
                          DCD      calendar
                  |L1.1164|
                          DCD      mon_table
                  |L1.1168|
                          DCD      0x01e28500
                  |L1.1172|
                          DCD      0x01e13380
                  |L1.1176|
                          DCD      0x40021000
                  |L1.1180|
                          DCD      0x40007000
                  |L1.1184|
                          DCD      0x40006c04
                  |L1.1188|
0004a4  46495253542054494d450a00        DCB      "FIRST TIME\n",0
                  |L1.1200|
0004b0  4f4b0a00          DCB      "OK\n",0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  calendar
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  table_week
000000  00030306          DCB      0x00,0x03,0x03,0x06
000004  01040602          DCB      0x01,0x04,0x06,0x02
000008  05000305          DCB      0x05,0x00,0x03,0x05
                  mon_table
00000c  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000010  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000014  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.data||, DATA, ALIGN=1

                  daycnt
000000  0000              DCW      0x0000
