; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\usb_pwr.o --depend=..\OBJ\usb_pwr.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\usb_pwr.crf ..\USB\CONFIG\usb_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PowerOn PROC
;;;49     *******************************************************************************/
;;;50     RESULT PowerOn(void)
000000  2101              MOVS     r1,#1
;;;51     {
;;;52       u16 wRegVal;					   
;;;53       //USB_Cable_Config(ENABLE);//使能1.5K上拉 
;;;54       /*** CNTR_PWDN = 0 ***/
;;;55       wRegVal = CNTR_FRES;
;;;56       _SetCNTR(wRegVal);	 
000002  484f              LDR      r0,|L1.320|
000004  6001              STR      r1,[r0,#0]
;;;57       /*** CNTR_FRES = 0 ***/
;;;58       wInterrupt_Mask = 0;
000006  2000              MOVS     r0,#0
000008  4a4e              LDR      r2,|L1.324|
00000a  8010              STRH     r0,[r2,#0]
;;;59       _SetCNTR(wInterrupt_Mask);
00000c  4610              MOV      r0,r2
00000e  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000010  4a4d              LDR      r2,|L1.328|
000012  f8c20c40          STR      r0,[r2,#0xc40]
;;;60       /*** Clear pending interrupts ***/
;;;61       _SetISTR(0);
000016  2000              MOVS     r0,#0
000018  4a49              LDR      r2,|L1.320|
00001a  1d12              ADDS     r2,r2,#4
00001c  6010              STR      r0,[r2,#0]
;;;62       /*** Set interrupt mask ***/
;;;63       wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
00001e  f44f50e0          MOV      r0,#0x1c00
000022  4a48              LDR      r2,|L1.324|
000024  8010              STRH     r0,[r2,#0]
;;;64       _SetCNTR(wInterrupt_Mask);	 
000026  4610              MOV      r0,r2
000028  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
00002a  4a47              LDR      r2,|L1.328|
00002c  f8c20c40          STR      r0,[r2,#0xc40]
;;;65       return USB_SUCCESS;
000030  2000              MOVS     r0,#0
;;;66     }
000032  4770              BX       lr
;;;67     
                          ENDP

                  PowerOff PROC
;;;74     *******************************************************************************/
;;;75     RESULT PowerOff()
000034  2001              MOVS     r0,#1
;;;76     {
;;;77       /* disable all ints and force USB reset */
;;;78       _SetCNTR(CNTR_FRES);
000036  4942              LDR      r1,|L1.320|
000038  6008              STR      r0,[r1,#0]
;;;79       /* clear interrupt status register */
;;;80       _SetISTR(0);				 
00003a  2000              MOVS     r0,#0
00003c  4942              LDR      r1,|L1.328|
00003e  f8c10c44          STR      r0,[r1,#0xc44]
;;;81       /* Disable the Pull-Up*/
;;;82       //USB_Cable_Config(DISABLE);//禁止1.5K上拉
;;;83       /* switch-off device */
;;;84       _SetCNTR(CNTR_FRES + CNTR_PDWN);
000042  2003              MOVS     r0,#3
000044  493e              LDR      r1,|L1.320|
000046  6008              STR      r0,[r1,#0]
;;;85       /* sw variables reset */
;;;86       /* ... */
;;;87     
;;;88       return USB_SUCCESS;
000048  2000              MOVS     r0,#0
;;;89     }
00004a  4770              BX       lr
;;;90     
                          ENDP

                  Suspend PROC
;;;97     *******************************************************************************/
;;;98     void Suspend(void)
00004c  b510              PUSH     {r4,lr}
;;;99     {
;;;100      u16 wCNTR;
;;;101      /* suspend preparation */
;;;102      /* ... */
;;;103    
;;;104      /* macrocell enters suspend mode */
;;;105      wCNTR = _GetCNTR();
00004e  483c              LDR      r0,|L1.320|
000050  6800              LDR      r0,[r0,#0]
000052  b284              UXTH     r4,r0
;;;106      wCNTR |= CNTR_FSUSP;
000054  f0440408          ORR      r4,r4,#8
;;;107      _SetCNTR(wCNTR);
000058  483b              LDR      r0,|L1.328|
00005a  f8c04c40          STR      r4,[r0,#0xc40]
;;;108    
;;;109      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;110      /* power reduction */
;;;111      /* ... on connected devices */
;;;112    
;;;113    
;;;114      /* force low-power mode in the macrocell */
;;;115      wCNTR = _GetCNTR();
00005e  4838              LDR      r0,|L1.320|
000060  6800              LDR      r0,[r0,#0]
000062  b284              UXTH     r4,r0
;;;116      wCNTR |= CNTR_LPMODE;
000064  f0440404          ORR      r4,r4,#4
;;;117      _SetCNTR(wCNTR);
000068  4837              LDR      r0,|L1.328|
00006a  f8c04c40          STR      r4,[r0,#0xc40]
;;;118    
;;;119      /* switch-off the clocks */
;;;120      /* ... */
;;;121      Enter_LowPowerMode();
00006e  f7fffffe          BL       Enter_LowPowerMode
;;;122    
;;;123    }
000072  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  Resume_Init PROC
;;;131    *******************************************************************************/
;;;132    void Resume_Init(void)
000074  b510              PUSH     {r4,lr}
;;;133    {
;;;134      u16 wCNTR;
;;;135    
;;;136      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;137      /* restart the clocks */
;;;138      /* ...  */
;;;139    
;;;140      /* CNTR_LPMODE = 0 */
;;;141      wCNTR = _GetCNTR();
000076  4832              LDR      r0,|L1.320|
000078  6800              LDR      r0,[r0,#0]
00007a  b284              UXTH     r4,r0
;;;142      wCNTR &= (~CNTR_LPMODE);
00007c  f0240404          BIC      r4,r4,#4
;;;143      _SetCNTR(wCNTR);
000080  4831              LDR      r0,|L1.328|
000082  f8c04c40          STR      r4,[r0,#0xc40]
;;;144    
;;;145      /* restore full power */
;;;146      /* ... on connected devices */
;;;147      Leave_LowPowerMode();
000086  f7fffffe          BL       Leave_LowPowerMode
;;;148    
;;;149      /* reset FSUSP bit */
;;;150      _SetCNTR(IMR_MSK);
00008a  f44f403f          MOV      r0,#0xbf00
00008e  492c              LDR      r1,|L1.320|
000090  6008              STR      r0,[r1,#0]
;;;151    
;;;152      /* reverse suspend preparation */
;;;153      /* ... */
;;;154    
;;;155    }
000092  bd10              POP      {r4,pc}
;;;156    
                          ENDP

                  Resume PROC
;;;168    *******************************************************************************/
;;;169    void Resume(RESUME_STATE eResumeSetVal)
000094  b570              PUSH     {r4-r6,lr}
;;;170    {
000096  4604              MOV      r4,r0
;;;171      u16 wCNTR;
;;;172    
;;;173      if (eResumeSetVal != RESUME_ESOF)
000098  2c07              CMP      r4,#7
00009a  d001              BEQ      |L1.160|
;;;174        ResumeS.eState = eResumeSetVal;
00009c  482b              LDR      r0,|L1.332|
00009e  7004              STRB     r4,[r0,#0]
                  |L1.160|
;;;175    
;;;176      switch (ResumeS.eState)
0000a0  482a              LDR      r0,|L1.332|
0000a2  7800              LDRB     r0,[r0,#0]  ; ResumeS
0000a4  2808              CMP      r0,#8
0000a6  d243              BCS      |L1.304|
0000a8  e8dff000          TBB      [pc,r0]
0000ac  040a1016          DCB      0x04,0x0a,0x10,0x16
0000b0  212f4344          DCB      0x21,0x2f,0x43,0x44
;;;177      {
;;;178        case RESUME_EXTERNAL:
;;;179          Resume_Init();
0000b4  f7fffffe          BL       Resume_Init
;;;180          ResumeS.eState = RESUME_OFF;
0000b8  2006              MOVS     r0,#6
0000ba  4924              LDR      r1,|L1.332|
0000bc  7008              STRB     r0,[r1,#0]
;;;181          break;
0000be  e03d              B        |L1.316|
;;;182        case RESUME_INTERNAL:
;;;183          Resume_Init();
0000c0  f7fffffe          BL       Resume_Init
;;;184          ResumeS.eState = RESUME_START;
0000c4  2004              MOVS     r0,#4
0000c6  4921              LDR      r1,|L1.332|
0000c8  7008              STRB     r0,[r1,#0]
;;;185          break;
0000ca  e037              B        |L1.316|
;;;186        case RESUME_LATER:
;;;187          ResumeS.bESOFcnt = 2;
0000cc  2002              MOVS     r0,#2
0000ce  491f              LDR      r1,|L1.332|
0000d0  7048              STRB     r0,[r1,#1]
;;;188          ResumeS.eState = RESUME_WAIT;
0000d2  2003              MOVS     r0,#3
0000d4  7008              STRB     r0,[r1,#0]
;;;189          break;
0000d6  e031              B        |L1.316|
;;;190        case RESUME_WAIT:
;;;191          ResumeS.bESOFcnt--;
0000d8  481c              LDR      r0,|L1.332|
0000da  7840              LDRB     r0,[r0,#1]  ; ResumeS
0000dc  1e40              SUBS     r0,r0,#1
0000de  491b              LDR      r1,|L1.332|
0000e0  7048              STRB     r0,[r1,#1]
;;;192          if (ResumeS.bESOFcnt == 0)
0000e2  4608              MOV      r0,r1
0000e4  7840              LDRB     r0,[r0,#1]  ; ResumeS
0000e6  b908              CBNZ     r0,|L1.236|
;;;193            ResumeS.eState = RESUME_START;
0000e8  2004              MOVS     r0,#4
0000ea  7008              STRB     r0,[r1,#0]
                  |L1.236|
;;;194          break;
0000ec  e026              B        |L1.316|
;;;195        case RESUME_START:
;;;196          wCNTR = _GetCNTR();
0000ee  4814              LDR      r0,|L1.320|
0000f0  6800              LDR      r0,[r0,#0]
0000f2  b285              UXTH     r5,r0
;;;197          wCNTR |= CNTR_RESUME;
0000f4  f0450510          ORR      r5,r5,#0x10
;;;198          _SetCNTR(wCNTR);
0000f8  4813              LDR      r0,|L1.328|
0000fa  f8c05c40          STR      r5,[r0,#0xc40]
;;;199          ResumeS.eState = RESUME_ON;
0000fe  2005              MOVS     r0,#5
000100  4912              LDR      r1,|L1.332|
000102  7008              STRB     r0,[r1,#0]
;;;200          ResumeS.bESOFcnt = 10;
000104  200a              MOVS     r0,#0xa
000106  7048              STRB     r0,[r1,#1]
;;;201          break;
000108  e018              B        |L1.316|
;;;202        case RESUME_ON:
;;;203          ResumeS.bESOFcnt--;
00010a  4810              LDR      r0,|L1.332|
00010c  7840              LDRB     r0,[r0,#1]  ; ResumeS
00010e  1e40              SUBS     r0,r0,#1
000110  490e              LDR      r1,|L1.332|
000112  7048              STRB     r0,[r1,#1]
;;;204          if (ResumeS.bESOFcnt == 0)
000114  4608              MOV      r0,r1
000116  7840              LDRB     r0,[r0,#1]  ; ResumeS
000118  b948              CBNZ     r0,|L1.302|
;;;205          {
;;;206            wCNTR = _GetCNTR();
00011a  4809              LDR      r0,|L1.320|
00011c  6800              LDR      r0,[r0,#0]
00011e  b285              UXTH     r5,r0
;;;207            wCNTR &= (~CNTR_RESUME);
000120  f0250510          BIC      r5,r5,#0x10
;;;208            _SetCNTR(wCNTR);
000124  4808              LDR      r0,|L1.328|
000126  f8c05c40          STR      r5,[r0,#0xc40]
;;;209            ResumeS.eState = RESUME_OFF;
00012a  2006              MOVS     r0,#6
00012c  7008              STRB     r0,[r1,#0]
                  |L1.302|
;;;210          }
;;;211          break;
00012e  e005              B        |L1.316|
                  |L1.304|
;;;212        case RESUME_OFF:
000130  bf00              NOP      
;;;213        case RESUME_ESOF:
000132  bf00              NOP      
;;;214        default:
;;;215          ResumeS.eState = RESUME_OFF;
000134  2006              MOVS     r0,#6
000136  4905              LDR      r1,|L1.332|
000138  7008              STRB     r0,[r1,#0]
;;;216          break;
00013a  bf00              NOP      
                  |L1.316|
00013c  bf00              NOP                            ;181
;;;217      }
;;;218    }
00013e  bd70              POP      {r4-r6,pc}
;;;219    
                          ENDP

                  |L1.320|
                          DCD      0x40005c40
                  |L1.324|
                          DCD      wInterrupt_Mask
                  |L1.328|
                          DCD      0x40005000
                  |L1.332|
                          DCD      ResumeS

                          AREA ||.data||, DATA, ALIGN=2

                  bDeviceState
                          DCD      0x00000000
                  fSuspendEnabled
000004  01                DCB      0x01
                  ResumeS
000005  0000              DCB      0x00,0x00
