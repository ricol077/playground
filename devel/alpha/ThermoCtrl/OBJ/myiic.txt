; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\myiic.o --depend=..\OBJ\myiic.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\myiic.crf ..\HARDWARE\24CXX\myiic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IIC_Init PROC
;;;16     //初始化IIC
;;;17     void IIC_Init(void)
000000  48a2              LDR      r0,|L1.652|
;;;18     {					     
;;;19      	RCC->APB2ENR|=1<<3;//先使能外设IO PORTB时钟 							 
000002  6980              LDR      r0,[r0,#0x18]
000004  f0400008          ORR      r0,r0,#8
000008  49a0              LDR      r1,|L1.652|
00000a  6188              STR      r0,[r1,#0x18]
;;;20     	GPIOB->CRH&=0XFFFF00FF;//PB1/11 推挽输出
00000c  48a0              LDR      r0,|L1.656|
00000e  6800              LDR      r0,[r0,#0]
000010  f420407f          BIC      r0,r0,#0xff00
000014  499f              LDR      r1,|L1.660|
000016  f8c10c04          STR      r0,[r1,#0xc04]
;;;21     	GPIOB->CRH|=0X00003300;	   
00001a  4608              MOV      r0,r1
00001c  f8d00c04          LDR      r0,[r0,#0xc04]
000020  f440504c          ORR      r0,r0,#0x3300
000024  f8c10c04          STR      r0,[r1,#0xc04]
;;;22     	GPIOB->ODR|=3<<10;     //PB10,11 输出高
000028  4608              MOV      r0,r1
00002a  f8d00c0c          LDR      r0,[r0,#0xc0c]
00002e  f4406040          ORR      r0,r0,#0xc00
000032  f8c10c0c          STR      r0,[r1,#0xc0c]
;;;23     }
000036  4770              BX       lr
;;;24     //产生IIC起始信号
                          ENDP

                  IIC_Start PROC
;;;25     void IIC_Start(void)
000038  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	SDA_OUT();     //sda线输出
00003a  4895              LDR      r0,|L1.656|
00003c  6800              LDR      r0,[r0,#0]
00003e  f4204070          BIC      r0,r0,#0xf000
000042  4994              LDR      r1,|L1.660|
000044  f8c10c04          STR      r0,[r1,#0xc04]
000048  4608              MOV      r0,r1
00004a  f8d00c04          LDR      r0,[r0,#0xc04]
00004e  f4405040          ORR      r0,r0,#0x3000
000052  498f              LDR      r1,|L1.656|
000054  6008              STR      r0,[r1,#0]
;;;28     	IIC_SDA=1;	  	  
000056  2001              MOVS     r0,#1
000058  498f              LDR      r1,|L1.664|
00005a  6008              STR      r0,[r1,#0]
;;;29     	IIC_SCL=1;
00005c  498f              LDR      r1,|L1.668|
00005e  f8c101a8          STR      r0,[r1,#0x1a8]
;;;30     	delay_us(4);
000062  2004              MOVS     r0,#4
000064  f7fffffe          BL       delay_us
;;;31      	IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
000068  2000              MOVS     r0,#0
00006a  498c              LDR      r1,|L1.668|
00006c  f8c101ac          STR      r0,[r1,#0x1ac]
;;;32     	delay_us(4);
000070  2004              MOVS     r0,#4
000072  f7fffffe          BL       delay_us
;;;33     	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
000076  2000              MOVS     r0,#0
000078  4988              LDR      r1,|L1.668|
00007a  f8c101a8          STR      r0,[r1,#0x1a8]
;;;34     }	  
00007e  bd10              POP      {r4,pc}
;;;35     //产生IIC停止信号
                          ENDP

                  IIC_Stop PROC
;;;36     void IIC_Stop(void)
000080  b510              PUSH     {r4,lr}
;;;37     {
;;;38     	SDA_OUT();//sda线输出
000082  4883              LDR      r0,|L1.656|
000084  6800              LDR      r0,[r0,#0]
000086  f4204070          BIC      r0,r0,#0xf000
00008a  4982              LDR      r1,|L1.660|
00008c  f8c10c04          STR      r0,[r1,#0xc04]
000090  4608              MOV      r0,r1
000092  f8d00c04          LDR      r0,[r0,#0xc04]
000096  f4405040          ORR      r0,r0,#0x3000
00009a  497d              LDR      r1,|L1.656|
00009c  6008              STR      r0,[r1,#0]
;;;39     	IIC_SCL=0;
00009e  2000              MOVS     r0,#0
0000a0  497d              LDR      r1,|L1.664|
0000a2  1f09              SUBS     r1,r1,#4
0000a4  6008              STR      r0,[r1,#0]
;;;40     	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
0000a6  497d              LDR      r1,|L1.668|
0000a8  f8c101ac          STR      r0,[r1,#0x1ac]
;;;41      	delay_us(4);
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       delay_us
;;;42     	IIC_SCL=1; 
0000b2  2001              MOVS     r0,#1
0000b4  4978              LDR      r1,|L1.664|
0000b6  1f09              SUBS     r1,r1,#4
0000b8  6008              STR      r0,[r1,#0]
;;;43     	IIC_SDA=1;//发送I2C总线结束信号
0000ba  4978              LDR      r1,|L1.668|
0000bc  f8c101ac          STR      r0,[r1,#0x1ac]
;;;44     	delay_us(4);							   	
0000c0  2004              MOVS     r0,#4
0000c2  f7fffffe          BL       delay_us
;;;45     }
0000c6  bd10              POP      {r4,pc}
;;;46     //等待应答信号到来
                          ENDP

                  IIC_Wait_Ack PROC
;;;48     //        0，接收应答成功
;;;49     u8 IIC_Wait_Ack(void)
0000c8  b510              PUSH     {r4,lr}
;;;50     {
;;;51     	u8 ucErrTime=0;
0000ca  2400              MOVS     r4,#0
;;;52     	SDA_IN();      //SDA设置为输入  
0000cc  4870              LDR      r0,|L1.656|
0000ce  6800              LDR      r0,[r0,#0]
0000d0  f4204070          BIC      r0,r0,#0xf000
0000d4  496f              LDR      r1,|L1.660|
0000d6  f8c10c04          STR      r0,[r1,#0xc04]
0000da  4608              MOV      r0,r1
0000dc  f8d00c04          LDR      r0,[r0,#0xc04]
0000e0  f4404000          ORR      r0,r0,#0x8000
0000e4  496a              LDR      r1,|L1.656|
0000e6  6008              STR      r0,[r1,#0]
;;;53     	IIC_SDA=1;delay_us(1);	   
0000e8  2001              MOVS     r0,#1
0000ea  496b              LDR      r1,|L1.664|
0000ec  6008              STR      r0,[r1,#0]
0000ee  f7fffffe          BL       delay_us
;;;54     	IIC_SCL=1;delay_us(1);	 
0000f2  2001              MOVS     r0,#1
0000f4  4969              LDR      r1,|L1.668|
0000f6  f8c101a8          STR      r0,[r1,#0x1a8]
0000fa  f7fffffe          BL       delay_us
;;;55     	while(READ_SDA)
0000fe  e007              B        |L1.272|
                  |L1.256|
;;;56     	{
;;;57     		ucErrTime++;
000100  1c60              ADDS     r0,r4,#1
000102  b2c4              UXTB     r4,r0
;;;58     		if(ucErrTime>250)
000104  2cfa              CMP      r4,#0xfa
000106  dd03              BLE      |L1.272|
;;;59     		{
;;;60     			IIC_Stop();
000108  f7fffffe          BL       IIC_Stop
;;;61     			return 1;
00010c  2001              MOVS     r0,#1
                  |L1.270|
;;;62     		}
;;;63     	}
;;;64     	IIC_SCL=0;//时钟输出0 	   
;;;65     	return 0;  
;;;66     } 
00010e  bd10              POP      {r4,pc}
                  |L1.272|
000110  4861              LDR      r0,|L1.664|
000112  3880              SUBS     r0,r0,#0x80           ;55
000114  6800              LDR      r0,[r0,#0]            ;55
000116  2800              CMP      r0,#0                 ;55
000118  d1f2              BNE      |L1.256|
00011a  495f              LDR      r1,|L1.664|
00011c  1f09              SUBS     r1,r1,#4              ;64
00011e  6008              STR      r0,[r1,#0]            ;64
000120  e7f5              B        |L1.270|
;;;67     //产生ACK应答
                          ENDP

                  IIC_Ack PROC
;;;68     void IIC_Ack(void)
000122  b510              PUSH     {r4,lr}
;;;69     {
;;;70     	IIC_SCL=0;
000124  2000              MOVS     r0,#0
000126  495c              LDR      r1,|L1.664|
000128  1f09              SUBS     r1,r1,#4
00012a  6008              STR      r0,[r1,#0]
;;;71     	SDA_OUT();
00012c  4859              LDR      r0,|L1.660|
00012e  f8d00c04          LDR      r0,[r0,#0xc04]
000132  f4204070          BIC      r0,r0,#0xf000
000136  4957              LDR      r1,|L1.660|
000138  f8c10c04          STR      r0,[r1,#0xc04]
00013c  4608              MOV      r0,r1
00013e  f8d00c04          LDR      r0,[r0,#0xc04]
000142  f4405040          ORR      r0,r0,#0x3000
000146  4952              LDR      r1,|L1.656|
000148  6008              STR      r0,[r1,#0]
;;;72     	IIC_SDA=0;
00014a  2000              MOVS     r0,#0
00014c  4953              LDR      r1,|L1.668|
00014e  f8c101ac          STR      r0,[r1,#0x1ac]
;;;73     	delay_us(2);
000152  2002              MOVS     r0,#2
000154  f7fffffe          BL       delay_us
;;;74     	IIC_SCL=1;
000158  2001              MOVS     r0,#1
00015a  4950              LDR      r1,|L1.668|
00015c  f8c101a8          STR      r0,[r1,#0x1a8]
;;;75     	delay_us(2);
000160  2002              MOVS     r0,#2
000162  f7fffffe          BL       delay_us
;;;76     	IIC_SCL=0;
000166  2000              MOVS     r0,#0
000168  494c              LDR      r1,|L1.668|
00016a  f8c101a8          STR      r0,[r1,#0x1a8]
;;;77     }
00016e  bd10              POP      {r4,pc}
;;;78     //不产生ACK应答		    
                          ENDP

                  IIC_NAck PROC
;;;79     void IIC_NAck(void)
000170  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	IIC_SCL=0;
000172  2000              MOVS     r0,#0
000174  4948              LDR      r1,|L1.664|
000176  1f09              SUBS     r1,r1,#4
000178  6008              STR      r0,[r1,#0]
;;;82     	SDA_OUT();
00017a  4846              LDR      r0,|L1.660|
00017c  f8d00c04          LDR      r0,[r0,#0xc04]
000180  f4204070          BIC      r0,r0,#0xf000
000184  4943              LDR      r1,|L1.660|
000186  f8c10c04          STR      r0,[r1,#0xc04]
00018a  4608              MOV      r0,r1
00018c  f8d00c04          LDR      r0,[r0,#0xc04]
000190  f4405040          ORR      r0,r0,#0x3000
000194  493e              LDR      r1,|L1.656|
000196  6008              STR      r0,[r1,#0]
;;;83     	IIC_SDA=1;
000198  2001              MOVS     r0,#1
00019a  4940              LDR      r1,|L1.668|
00019c  f8c101ac          STR      r0,[r1,#0x1ac]
;;;84     	delay_us(2);
0001a0  2002              MOVS     r0,#2
0001a2  f7fffffe          BL       delay_us
;;;85     	IIC_SCL=1;
0001a6  2001              MOVS     r0,#1
0001a8  493c              LDR      r1,|L1.668|
0001aa  f8c101a8          STR      r0,[r1,#0x1a8]
;;;86     	delay_us(2);
0001ae  2002              MOVS     r0,#2
0001b0  f7fffffe          BL       delay_us
;;;87     	IIC_SCL=0;
0001b4  2000              MOVS     r0,#0
0001b6  4939              LDR      r1,|L1.668|
0001b8  f8c101a8          STR      r0,[r1,#0x1a8]
;;;88     }					 				     
0001bc  bd10              POP      {r4,pc}
;;;89     //IIC发送一个字节
                          ENDP

                  IIC_Send_Byte PROC
;;;92     //0，无应答			  
;;;93     void IIC_Send_Byte(u8 txd)
0001be  b570              PUSH     {r4-r6,lr}
;;;94     {                        
0001c0  4605              MOV      r5,r0
;;;95         u8 t;   
;;;96     	SDA_OUT(); 	    
0001c2  4833              LDR      r0,|L1.656|
0001c4  6800              LDR      r0,[r0,#0]
0001c6  f4204070          BIC      r0,r0,#0xf000
0001ca  4932              LDR      r1,|L1.660|
0001cc  f8c10c04          STR      r0,[r1,#0xc04]
0001d0  4608              MOV      r0,r1
0001d2  f8d00c04          LDR      r0,[r0,#0xc04]
0001d6  f4405040          ORR      r0,r0,#0x3000
0001da  492d              LDR      r1,|L1.656|
0001dc  6008              STR      r0,[r1,#0]
;;;97         IIC_SCL=0;//拉低时钟开始数据传输
0001de  2000              MOVS     r0,#0
0001e0  492d              LDR      r1,|L1.664|
0001e2  1f09              SUBS     r1,r1,#4
0001e4  6008              STR      r0,[r1,#0]
;;;98         for(t=0;t<8;t++)
0001e6  2400              MOVS     r4,#0
0001e8  e017              B        |L1.538|
                  |L1.490|
;;;99         {              
;;;100            IIC_SDA=(txd&0x80)>>7;
0001ea  09e8              LSRS     r0,r5,#7
0001ec  492a              LDR      r1,|L1.664|
0001ee  6008              STR      r0,[r1,#0]
;;;101            txd<<=1; 	  
0001f0  0668              LSLS     r0,r5,#25
0001f2  0e05              LSRS     r5,r0,#24
;;;102    		delay_us(2);   //对TEA5767这三个延时都是必须的
0001f4  2002              MOVS     r0,#2
0001f6  f7fffffe          BL       delay_us
;;;103    		IIC_SCL=1;
0001fa  2001              MOVS     r0,#1
0001fc  4927              LDR      r1,|L1.668|
0001fe  f8c101a8          STR      r0,[r1,#0x1a8]
;;;104    		delay_us(2); 
000202  2002              MOVS     r0,#2
000204  f7fffffe          BL       delay_us
;;;105    		IIC_SCL=0;	
000208  2000              MOVS     r0,#0
00020a  4923              LDR      r1,|L1.664|
00020c  1f09              SUBS     r1,r1,#4
00020e  6008              STR      r0,[r1,#0]
;;;106    		delay_us(2);
000210  2002              MOVS     r0,#2
000212  f7fffffe          BL       delay_us
000216  1c60              ADDS     r0,r4,#1              ;98
000218  b2c4              UXTB     r4,r0                 ;98
                  |L1.538|
00021a  2c08              CMP      r4,#8                 ;98
00021c  dbe5              BLT      |L1.490|
;;;107        }	 
;;;108    } 	    
00021e  bd70              POP      {r4-r6,pc}
;;;109    //读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
                          ENDP

                  IIC_Read_Byte PROC
;;;110    u8 IIC_Read_Byte(unsigned char ack)
000220  b570              PUSH     {r4-r6,lr}
;;;111    {
000222  4604              MOV      r4,r0
;;;112    	unsigned char i,receive=0;
000224  2500              MOVS     r5,#0
;;;113    	SDA_IN();//SDA设置为输入
000226  481a              LDR      r0,|L1.656|
000228  6800              LDR      r0,[r0,#0]
00022a  f4204070          BIC      r0,r0,#0xf000
00022e  4919              LDR      r1,|L1.660|
000230  f8c10c04          STR      r0,[r1,#0xc04]
000234  4608              MOV      r0,r1
000236  f8d00c04          LDR      r0,[r0,#0xc04]
00023a  f4404000          ORR      r0,r0,#0x8000
00023e  f8c10c04          STR      r0,[r1,#0xc04]
;;;114        for(i=0;i<8;i++ )
000242  2600              MOVS     r6,#0
000244  e017              B        |L1.630|
                  |L1.582|
;;;115    	{
;;;116            IIC_SCL=0; 
000246  2000              MOVS     r0,#0
000248  4913              LDR      r1,|L1.664|
00024a  1f09              SUBS     r1,r1,#4
00024c  6008              STR      r0,[r1,#0]
;;;117            delay_us(2);
00024e  2002              MOVS     r0,#2
000250  f7fffffe          BL       delay_us
;;;118    		IIC_SCL=1;
000254  2001              MOVS     r0,#1
000256  4911              LDR      r1,|L1.668|
000258  f8c101a8          STR      r0,[r1,#0x1a8]
;;;119            receive<<=1;
00025c  0668              LSLS     r0,r5,#25
00025e  0e05              LSRS     r5,r0,#24
;;;120            if(READ_SDA)receive++;   
000260  480d              LDR      r0,|L1.664|
000262  3880              SUBS     r0,r0,#0x80
000264  6800              LDR      r0,[r0,#0]
000266  b108              CBZ      r0,|L1.620|
000268  1c68              ADDS     r0,r5,#1
00026a  b2c5              UXTB     r5,r0
                  |L1.620|
;;;121    		delay_us(1); 
00026c  2001              MOVS     r0,#1
00026e  f7fffffe          BL       delay_us
000272  1c70              ADDS     r0,r6,#1              ;114
000274  b2c6              UXTB     r6,r0                 ;114
                  |L1.630|
000276  2e08              CMP      r6,#8                 ;114
000278  dbe5              BLT      |L1.582|
;;;122        }					 
;;;123        if (!ack)
00027a  b914              CBNZ     r4,|L1.642|
;;;124            IIC_NAck();//发送nACK
00027c  f7fffffe          BL       IIC_NAck
000280  e001              B        |L1.646|
                  |L1.642|
;;;125        else
;;;126            IIC_Ack(); //发送ACK   
000282  f7fffffe          BL       IIC_Ack
                  |L1.646|
;;;127        return receive;
000286  4628              MOV      r0,r5
;;;128    }
000288  bd70              POP      {r4-r6,pc}
;;;129    
                          ENDP

00028a  0000              DCW      0x0000
                  |L1.652|
                          DCD      0x40021000
                  |L1.656|
                          DCD      0x40010c04
                  |L1.660|
                          DCD      0x40010000
                  |L1.664|
                          DCD      0x422181ac
                  |L1.668|
                          DCD      0x42218000
