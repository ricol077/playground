; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\usb_istr.o --depend=..\OBJ\usb_istr.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\usb_istr.crf ..\USB\CONFIG\usb_istr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;62     *******************************************************************************/
;;;63     void USB_Istr(void)
000000  b510              PUSH     {r4,lr}
;;;64     {		  
;;;65       wIstr = _GetISTR();
000002  4837              LDR      r0,|L1.224|
000004  6800              LDR      r0,[r0,#0]
000006  4937              LDR      r1,|L1.228|
000008  8008              STRH     r0,[r1,#0]
;;;66     
;;;67     #if (IMR_MSK & ISTR_RESET)
;;;68       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00000a  4608              MOV      r0,r1
00000c  8800              LDRH     r0,[r0,#0]  ; wIstr
00000e  f4006080          AND      r0,r0,#0x400
000012  4935              LDR      r1,|L1.232|
000014  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000016  4208              TST      r0,r1
000018  d006              BEQ      |L1.40|
;;;69       {
;;;70         _SetISTR((u16)CLR_RESET);
00001a  f64f30ff          MOV      r0,#0xfbff
00001e  4930              LDR      r1,|L1.224|
000020  6008              STR      r0,[r1,#0]
;;;71         Device_Property.Reset();
000022  4932              LDR      r1,|L1.236|
000024  6848              LDR      r0,[r1,#4]  ; Device_Property
000026  4780              BLX      r0
                  |L1.40|
;;;72     #ifdef RESET_CALLBACK
;;;73         RESET_Callback();
;;;74     #endif
;;;75       }
;;;76     #endif
;;;77       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;78     #if (IMR_MSK & ISTR_DOVR)
;;;79       if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;80       {
;;;81         _SetISTR((u16)CLR_DOVR);
;;;82     #ifdef DOVR_CALLBACK
;;;83         DOVR_Callback();
;;;84     #endif
;;;85       }
;;;86     #endif
;;;87       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;88     #if (IMR_MSK & ISTR_ERR)
;;;89       if (wIstr & ISTR_ERR & wInterrupt_Mask)
000028  482e              LDR      r0,|L1.228|
00002a  8800              LDRH     r0,[r0,#0]  ; wIstr
00002c  f4005000          AND      r0,r0,#0x2000
000030  492d              LDR      r1,|L1.232|
000032  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000034  4208              TST      r0,r1
000036  d003              BEQ      |L1.64|
;;;90       {
;;;91         _SetISTR((u16)CLR_ERR);
000038  f64d70ff          MOV      r0,#0xdfff
00003c  4928              LDR      r1,|L1.224|
00003e  6008              STR      r0,[r1,#0]
                  |L1.64|
;;;92     #ifdef ERR_CALLBACK
;;;93         ERR_Callback();
;;;94     #endif
;;;95       }
;;;96     #endif
;;;97       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;98     #if (IMR_MSK & ISTR_WKUP)
;;;99       if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000040  4828              LDR      r0,|L1.228|
000042  8800              LDRH     r0,[r0,#0]  ; wIstr
000044  f4005080          AND      r0,r0,#0x1000
000048  4927              LDR      r1,|L1.232|
00004a  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00004c  4208              TST      r0,r1
00004e  d006              BEQ      |L1.94|
;;;100      {
;;;101        _SetISTR((u16)CLR_WKUP);
000050  f64e70ff          MOV      r0,#0xefff
000054  4922              LDR      r1,|L1.224|
000056  6008              STR      r0,[r1,#0]
;;;102        Resume(RESUME_EXTERNAL);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       Resume
                  |L1.94|
;;;103    #ifdef WKUP_CALLBACK
;;;104        WKUP_Callback();
;;;105    #endif
;;;106      }
;;;107    #endif
;;;108      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;109    #if (IMR_MSK & ISTR_SUSP)
;;;110      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
00005e  4821              LDR      r0,|L1.228|
000060  8800              LDRH     r0,[r0,#0]  ; wIstr
000062  f4006000          AND      r0,r0,#0x800
000066  4920              LDR      r1,|L1.232|
000068  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00006a  4208              TST      r0,r1
00006c  d00c              BEQ      |L1.136|
;;;111      {
;;;112    
;;;113        /* check if SUSPEND is possible */
;;;114        if (fSuspendEnabled)
00006e  4820              LDR      r0,|L1.240|
000070  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
000072  b110              CBZ      r0,|L1.122|
;;;115        {
;;;116          Suspend();
000074  f7fffffe          BL       Suspend
000078  e002              B        |L1.128|
                  |L1.122|
;;;117        }
;;;118        else
;;;119        {
;;;120          /* if not possible then resume after xx ms */
;;;121          Resume(RESUME_LATER);
00007a  2002              MOVS     r0,#2
00007c  f7fffffe          BL       Resume
                  |L1.128|
;;;122        }
;;;123        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;124        _SetISTR((u16)CLR_SUSP);
000080  f24f70ff          MOV      r0,#0xf7ff
000084  4916              LDR      r1,|L1.224|
000086  6008              STR      r0,[r1,#0]
                  |L1.136|
;;;125    #ifdef SUSP_CALLBACK
;;;126        SUSP_Callback();
;;;127    #endif
;;;128      }
;;;129    #endif
;;;130      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;131    #if (IMR_MSK & ISTR_SOF)
;;;132      if (wIstr & ISTR_SOF & wInterrupt_Mask)
000088  4816              LDR      r0,|L1.228|
00008a  8800              LDRH     r0,[r0,#0]  ; wIstr
00008c  f4007000          AND      r0,r0,#0x200
000090  4915              LDR      r1,|L1.232|
000092  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000094  4208              TST      r0,r1
000096  d008              BEQ      |L1.170|
;;;133      {
;;;134        _SetISTR((u16)CLR_SOF);
000098  f64f50ff          MOV      r0,#0xfdff
00009c  4910              LDR      r1,|L1.224|
00009e  6008              STR      r0,[r1,#0]
;;;135        bIntPackSOF++;
0000a0  4814              LDR      r0,|L1.244|
0000a2  7800              LDRB     r0,[r0,#0]  ; bIntPackSOF
0000a4  1c40              ADDS     r0,r0,#1
0000a6  4913              LDR      r1,|L1.244|
0000a8  7008              STRB     r0,[r1,#0]
                  |L1.170|
;;;136    
;;;137    #ifdef SOF_CALLBACK
;;;138        SOF_Callback();
;;;139    #endif
;;;140      }
;;;141    #endif
;;;142      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;143    #if (IMR_MSK & ISTR_ESOF)
;;;144      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
0000aa  480e              LDR      r0,|L1.228|
0000ac  8800              LDRH     r0,[r0,#0]  ; wIstr
0000ae  f4007080          AND      r0,r0,#0x100
0000b2  490d              LDR      r1,|L1.232|
0000b4  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000b6  4208              TST      r0,r1
0000b8  d006              BEQ      |L1.200|
;;;145      {
;;;146        _SetISTR((u16)CLR_ESOF);
0000ba  f64f60ff          MOV      r0,#0xfeff
0000be  4908              LDR      r1,|L1.224|
0000c0  6008              STR      r0,[r1,#0]
;;;147        /* resume handling timing is made with ESOFs */
;;;148        Resume(RESUME_ESOF); /* request without change of the machine state */
0000c2  2007              MOVS     r0,#7
0000c4  f7fffffe          BL       Resume
                  |L1.200|
;;;149    
;;;150    #ifdef ESOF_CALLBACK
;;;151        ESOF_Callback();
;;;152    #endif
;;;153      }
;;;154    #endif
;;;155      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;156    #if (IMR_MSK & ISTR_CTR)
;;;157      if (wIstr & ISTR_CTR & wInterrupt_Mask)
0000c8  4806              LDR      r0,|L1.228|
0000ca  8800              LDRH     r0,[r0,#0]  ; wIstr
0000cc  f4004000          AND      r0,r0,#0x8000
0000d0  4905              LDR      r1,|L1.232|
0000d2  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
0000d4  4208              TST      r0,r1
0000d6  d001              BEQ      |L1.220|
;;;158      {
;;;159        /* servicing of the endpoint correct transfer interrupt */
;;;160        /* clear of the CTR flag into the sub */
;;;161        CTR_LP();
0000d8  f7fffffe          BL       CTR_LP
                  |L1.220|
;;;162    #ifdef CTR_CALLBACK
;;;163        CTR_Callback();
;;;164    #endif
;;;165      }
;;;166    #endif
;;;167    } /* USB_Istr */
0000dc  bd10              POP      {r4,pc}
;;;168    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      0x40005c44
                  |L1.228|
                          DCD      wIstr
                  |L1.232|
                          DCD      wInterrupt_Mask
                  |L1.236|
                          DCD      Device_Property
                  |L1.240|
                          DCD      fSuspendEnabled
                  |L1.244|
                          DCD      bIntPackSOF

                          AREA ||.data||, DATA, ALIGN=2

                  bIntPackSOF
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  pEpInt_IN
                          DCD      NOP_Process
                          DCD      EP2_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  pEpInt_OUT
                          DCD      EP1_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  wIstr
00003c  0000              DCB      0x00,0x00
