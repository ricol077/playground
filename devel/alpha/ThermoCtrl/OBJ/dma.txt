; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\dma.o --depend=..\OBJ\dma.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\dma.crf ..\HARDWARE\DMA\dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MYDMA_Config PROC
;;;23     //cndtr:数据传输量  
;;;24     void MYDMA_Config(DMA_Channel_TypeDef*DMA_CHx,u32 cpar,u32 cmar,u16 cndtr)
000000  b570              PUSH     {r4-r6,lr}
;;;25     {
;;;26     	u32 DR_Base;  //做缓冲用,不知道为什么.非要不可
;;;27     	RCC->AHBENR|=1<<0;//开启DMA1时钟
000002  4d19              LDR      r5,|L1.104|
000004  696d              LDR      r5,[r5,#0x14]
000006  f0450501          ORR      r5,r5,#1
00000a  4e17              LDR      r6,|L1.104|
00000c  6175              STR      r5,[r6,#0x14]
;;;28     	DR_Base=cpar;
00000e  460c              MOV      r4,r1
;;;29     	DMA_CHx->CPAR=DR_Base; 	 //DMA1 外设地址 
000010  4621              MOV      r1,r4
000012  6084              STR      r4,[r0,#8]
;;;30     	DMA_CHx->CMAR=(u32)cmar; //DMA1,存储器地址
000014  60c2              STR      r2,[r0,#0xc]
;;;31     	DMA1_MEM_LEN=cndtr;      //保存DMA传输数据量
000016  4d15              LDR      r5,|L1.108|
000018  802b              STRH     r3,[r5,#0]
;;;32     	DMA_CHx->CNDTR=cndtr;    //DMA1,传输数据量
00001a  6043              STR      r3,[r0,#4]
;;;33     	DMA_CHx->CCR=0X00000000;//复位
00001c  2500              MOVS     r5,#0
00001e  6005              STR      r5,[r0,#0]
;;;34     	DMA_CHx->CCR|=1<<4;  //从存储器读
000020  6805              LDR      r5,[r0,#0]
000022  f0450510          ORR      r5,r5,#0x10
000026  6005              STR      r5,[r0,#0]
;;;35     	DMA_CHx->CCR|=0<<5;  //普通模式
000028  6805              LDR      r5,[r0,#0]
00002a  6005              STR      r5,[r0,#0]
;;;36     	DMA_CHx->CCR|=0<<6;  //外设地址非增量模式
00002c  6805              LDR      r5,[r0,#0]
00002e  6005              STR      r5,[r0,#0]
;;;37     	DMA_CHx->CCR|=1<<7;  //存储器增量模式
000030  6805              LDR      r5,[r0,#0]
000032  f0450580          ORR      r5,r5,#0x80
000036  6005              STR      r5,[r0,#0]
;;;38     	DMA_CHx->CCR|=0<<8;  //外设数据宽度为8位
000038  6805              LDR      r5,[r0,#0]
00003a  6005              STR      r5,[r0,#0]
;;;39     	DMA_CHx->CCR|=0<<10; //存储器数据宽度8位
00003c  6805              LDR      r5,[r0,#0]
00003e  6005              STR      r5,[r0,#0]
;;;40     	DMA_CHx->CCR|=1<<12; //中等优先级
000040  6805              LDR      r5,[r0,#0]
000042  f4455580          ORR      r5,r5,#0x1000
000046  6005              STR      r5,[r0,#0]
;;;41     	DMA_CHx->CCR|=0<<14; //非存储器到存储器模式		  	
000048  6805              LDR      r5,[r0,#0]
00004a  6005              STR      r5,[r0,#0]
;;;42     } 
00004c  bd70              POP      {r4-r6,pc}
;;;43     //开启一次DMA传输
                          ENDP

                  MYDMA_Enable PROC
;;;44     void MYDMA_Enable(DMA_Channel_TypeDef*DMA_CHx)
00004e  6801              LDR      r1,[r0,#0]
;;;45     {
;;;46     	DMA_CHx->CCR&=~(1<<0);       //关闭DMA传输 
000050  f0210101          BIC      r1,r1,#1
000054  6001              STR      r1,[r0,#0]
;;;47     	DMA_CHx->CNDTR=DMA1_MEM_LEN; //DMA1,传输数据量 
000056  4905              LDR      r1,|L1.108|
000058  8809              LDRH     r1,[r1,#0]  ; DMA1_MEM_LEN
00005a  6041              STR      r1,[r0,#4]
;;;48     	DMA_CHx->CCR|=1<<0;          //开启DMA传输
00005c  6801              LDR      r1,[r0,#0]
00005e  f0410101          ORR      r1,r1,#1
000062  6001              STR      r1,[r0,#0]
;;;49     }	  
000064  4770              BX       lr
;;;50     
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      0x40021000
                  |L1.108|
                          DCD      DMA1_MEM_LEN

                          AREA ||.data||, DATA, ALIGN=1

                  DMA1_MEM_LEN
000000  0000              DCB      0x00,0x00
