; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o..\OBJ\usb_core.o --depend=..\OBJ\usb_core.d --device=DARMSTM --apcs=interwork -O0 -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USMART -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\KEY -I..\HARDWARE\EXTI -I..\HARDWARE\WDG -I..\HARDWARE\TIMER -I..\HARDWARE\TPAD -I..\HARDWARE\OLED -I..\HARDWARE\LCD -I..\HARDWARE\RTC -I..\HARDWARE\WKUP -I..\HARDWARE\ADC -I..\HARDWARE\DAC -I..\HARDWARE\DMA -I..\HARDWARE\24CXX -I..\HARDWARE\SPI -I..\HARDWARE\FLASH -I..\USER -I..\USB\LIB -I..\USB\CONFIG -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=..\OBJ\usb_core.crf ..\USB\LIB\usb_core.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Standard_GetConfiguration PROC
;;;55     *******************************************************************************/
;;;56     u8 *Standard_GetConfiguration(u16 Length)
000000  b510              PUSH     {r4,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58       if (Length == 0)
000004  b92c              CBNZ     r4,|L1.18|
;;;59       {
;;;60         pInformation->Ctrl_Info.Usb_wLength =
000006  2001              MOVS     r0,#1
000008  49fa              LDR      r1,|L1.1012|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]
;;;61           sizeof(pInformation->Current_Configuration);
;;;62         return 0;
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;63       }
;;;64       pUser_Standard_Requests->User_GetConfiguration();
;;;65       return (u8 *)&pInformation->Current_Configuration;
;;;66     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  49f9              LDR      r1,|L1.1016|
000014  6809              LDR      r1,[r1,#0]            ;64  ; pUser_Standard_Requests
000016  6808              LDR      r0,[r1,#0]            ;64
000018  4780              BLX      r0                    ;64
00001a  48f6              LDR      r0,|L1.1012|
00001c  6800              LDR      r0,[r0,#0]            ;65  ; pInformation
00001e  300a              ADDS     r0,r0,#0xa            ;65
000020  e7f6              B        |L1.16|
;;;67     
                          ENDP

                  Standard_SetConfiguration PROC
;;;76     *******************************************************************************/
;;;77     RESULT Standard_SetConfiguration(void)
000022  b510              PUSH     {r4,lr}
;;;78     {
;;;79     
;;;80       if ((pInformation->USBwValue0 <=
000024  48f3              LDR      r0,|L1.1012|
000026  6800              LDR      r0,[r0,#0]  ; pInformation
000028  78c0              LDRB     r0,[r0,#3]
00002a  49f4              LDR      r1,|L1.1020|
00002c  7849              LDRB     r1,[r1,#1]  ; Device_Table
00002e  4288              CMP      r0,r1
000030  dc13              BGT      |L1.90|
;;;81           Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
000032  48f0              LDR      r0,|L1.1012|
000034  6800              LDR      r0,[r0,#0]  ; pInformation
000036  7880              LDRB     r0,[r0,#2]
000038  b978              CBNZ     r0,|L1.90|
;;;82           && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
00003a  48ee              LDR      r0,|L1.1012|
00003c  6800              LDR      r0,[r0,#0]  ; pInformation
00003e  8880              LDRH     r0,[r0,#4]
000040  b958              CBNZ     r0,|L1.90|
;;;83       {
;;;84         pInformation->Current_Configuration = pInformation->USBwValue0;
000042  48ec              LDR      r0,|L1.1012|
000044  6800              LDR      r0,[r0,#0]  ; pInformation
000046  78c0              LDRB     r0,[r0,#3]
000048  49ea              LDR      r1,|L1.1012|
00004a  6809              LDR      r1,[r1,#0]  ; pInformation
00004c  7288              STRB     r0,[r1,#0xa]
;;;85         pUser_Standard_Requests->User_SetConfiguration();
00004e  49ea              LDR      r1,|L1.1016|
000050  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
000052  6848              LDR      r0,[r1,#4]
000054  4780              BLX      r0
;;;86         return USB_SUCCESS;
000056  2000              MOVS     r0,#0
                  |L1.88|
;;;87       }
;;;88       else
;;;89       {
;;;90         return USB_UNSUPPORT;
;;;91       }
;;;92     }
000058  bd10              POP      {r4,pc}
                  |L1.90|
00005a  2002              MOVS     r0,#2                 ;90
00005c  e7fc              B        |L1.88|
;;;93     
                          ENDP

                  Standard_GetInterface PROC
;;;101    *******************************************************************************/
;;;102    u8 *Standard_GetInterface(u16 Length)
00005e  b510              PUSH     {r4,lr}
;;;103    {
000060  4604              MOV      r4,r0
;;;104      if (Length == 0)
000062  b92c              CBNZ     r4,|L1.112|
;;;105      {
;;;106        pInformation->Ctrl_Info.Usb_wLength =
000064  2001              MOVS     r0,#1
000066  49e3              LDR      r1,|L1.1012|
000068  6809              LDR      r1,[r1,#0]  ; pInformation
00006a  8208              STRH     r0,[r1,#0x10]
;;;107          sizeof(pInformation->Current_AlternateSetting);
;;;108        return 0;
00006c  2000              MOVS     r0,#0
                  |L1.110|
;;;109      }
;;;110      pUser_Standard_Requests->User_GetInterface();
;;;111      return (u8 *)&pInformation->Current_AlternateSetting;
;;;112    }
00006e  bd10              POP      {r4,pc}
                  |L1.112|
000070  49e1              LDR      r1,|L1.1016|
000072  6809              LDR      r1,[r1,#0]            ;110  ; pUser_Standard_Requests
000074  6888              LDR      r0,[r1,#8]            ;110
000076  4780              BLX      r0                    ;110
000078  48de              LDR      r0,|L1.1012|
00007a  6800              LDR      r0,[r0,#0]            ;111  ; pInformation
00007c  300c              ADDS     r0,r0,#0xc            ;111
00007e  e7f6              B        |L1.110|
;;;113    
                          ENDP

                  Standard_SetInterface PROC
;;;122    *******************************************************************************/
;;;123    RESULT Standard_SetInterface(void)
000080  b510              PUSH     {r4,lr}
;;;124    {
;;;125      RESULT Re;
;;;126      /*Test if the specified Interface and Alternate Setting are supported by
;;;127        the application Firmware*/
;;;128      Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
000082  4bdc              LDR      r3,|L1.1012|
000084  681b              LDR      r3,[r3,#0]  ; pInformation
000086  78d9              LDRB     r1,[r3,#3]
000088  4bda              LDR      r3,|L1.1012|
00008a  681b              LDR      r3,[r3,#0]  ; pInformation
00008c  7958              LDRB     r0,[r3,#5]
00008e  4bdc              LDR      r3,|L1.1024|
000090  681b              LDR      r3,[r3,#0]  ; pProperty
000092  699a              LDR      r2,[r3,#0x18]
000094  4790              BLX      r2
000096  4604              MOV      r4,r0
;;;129    
;;;130      if (pInformation->Current_Configuration != 0)
000098  48d6              LDR      r0,|L1.1012|
00009a  6800              LDR      r0,[r0,#0]  ; pInformation
00009c  7a80              LDRB     r0,[r0,#0xa]
00009e  b1e8              CBZ      r0,|L1.220|
;;;131      {
;;;132        if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
0000a0  b93c              CBNZ     r4,|L1.178|
0000a2  48d4              LDR      r0,|L1.1012|
0000a4  6800              LDR      r0,[r0,#0]  ; pInformation
0000a6  7900              LDRB     r0,[r0,#4]
0000a8  b918              CBNZ     r0,|L1.178|
;;;133            || (pInformation->USBwValue1 != 0))
0000aa  48d2              LDR      r0,|L1.1012|
0000ac  6800              LDR      r0,[r0,#0]  ; pInformation
0000ae  7880              LDRB     r0,[r0,#2]
0000b0  b108              CBZ      r0,|L1.182|
                  |L1.178|
;;;134        {
;;;135          return  USB_UNSUPPORT;
0000b2  2002              MOVS     r0,#2
                  |L1.180|
;;;136        }
;;;137        else if (Re == USB_SUCCESS)
;;;138        {
;;;139          pUser_Standard_Requests->User_SetInterface();
;;;140          pInformation->Current_Interface = pInformation->USBwIndex0;
;;;141          pInformation->Current_AlternateSetting = pInformation->USBwValue0;
;;;142          return USB_SUCCESS;
;;;143        }
;;;144    
;;;145      }
;;;146    
;;;147      return USB_UNSUPPORT;
;;;148    }
0000b4  bd10              POP      {r4,pc}
                  |L1.182|
0000b6  b98c              CBNZ     r4,|L1.220|
0000b8  49cf              LDR      r1,|L1.1016|
0000ba  6809              LDR      r1,[r1,#0]            ;139  ; pUser_Standard_Requests
0000bc  68c8              LDR      r0,[r1,#0xc]          ;139
0000be  4780              BLX      r0                    ;139
0000c0  48cc              LDR      r0,|L1.1012|
0000c2  6800              LDR      r0,[r0,#0]            ;140  ; pInformation
0000c4  7940              LDRB     r0,[r0,#5]            ;140
0000c6  49cb              LDR      r1,|L1.1012|
0000c8  6809              LDR      r1,[r1,#0]            ;140  ; pInformation
0000ca  72c8              STRB     r0,[r1,#0xb]          ;140
0000cc  48c9              LDR      r0,|L1.1012|
0000ce  6800              LDR      r0,[r0,#0]            ;141  ; pInformation
0000d0  78c0              LDRB     r0,[r0,#3]            ;141
0000d2  49c8              LDR      r1,|L1.1012|
0000d4  6809              LDR      r1,[r1,#0]            ;141  ; pInformation
0000d6  7308              STRB     r0,[r1,#0xc]          ;141
0000d8  2000              MOVS     r0,#0                 ;142
0000da  e7eb              B        |L1.180|
                  |L1.220|
0000dc  2002              MOVS     r0,#2                 ;147
0000de  e7e9              B        |L1.180|
;;;149    
                          ENDP

                  Standard_GetStatus PROC
;;;157    *******************************************************************************/
;;;158    u8 *Standard_GetStatus(u16 Length)
0000e0  b510              PUSH     {r4,lr}
;;;159    {
0000e2  4604              MOV      r4,r0
;;;160      if (Length == 0)
0000e4  b92c              CBNZ     r4,|L1.242|
;;;161      {
;;;162        pInformation->Ctrl_Info.Usb_wLength = 2;
0000e6  2002              MOVS     r0,#2
0000e8  49c2              LDR      r1,|L1.1012|
0000ea  6809              LDR      r1,[r1,#0]  ; pInformation
0000ec  8208              STRH     r0,[r1,#0x10]
;;;163        return 0;
0000ee  2000              MOVS     r0,#0
                  |L1.240|
;;;164      }
;;;165    
;;;166      StatusInfo.w = 0;
;;;167      /* Reset Status Information */
;;;168    
;;;169      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;170      {
;;;171        /*Get Device Status */
;;;172        u8 Feature = pInformation->Current_Feature;
;;;173    
;;;174        /* Remote Wakeup enabled */
;;;175        if (ValBit(Feature, 5))
;;;176        {
;;;177          SetBit(StatusInfo0, 1);
;;;178        }
;;;179    
;;;180        /* Bus-powered */
;;;181        if (ValBit(Feature, 6))
;;;182        {
;;;183          ClrBit(StatusInfo0, 0);
;;;184        }
;;;185        else /* Self-powered */
;;;186        {
;;;187          SetBit(StatusInfo0, 0);
;;;188        }
;;;189      }
;;;190      /*Interface Status*/
;;;191      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;192      {
;;;193        return (u8 *)&StatusInfo;
;;;194      }
;;;195      /*Get EndPoint Status*/
;;;196      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;197      {
;;;198        u8 Related_Endpoint;
;;;199        u8 wIndex0 = pInformation->USBwIndex0;
;;;200    
;;;201        Related_Endpoint = (wIndex0 & 0x0f);
;;;202        if (ValBit(wIndex0, 7))
;;;203        {
;;;204          /* IN endpoint */
;;;205          if (_GetTxStallStatus(Related_Endpoint))
;;;206          {
;;;207            SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
;;;208          }
;;;209        }
;;;210        else
;;;211        {
;;;212          /* OUT endpoint */
;;;213          if (_GetRxStallStatus(Related_Endpoint))
;;;214          {
;;;215            SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
;;;216          }
;;;217        }
;;;218    
;;;219      }
;;;220      else
;;;221      {
;;;222        return NULL;
;;;223      }
;;;224      pUser_Standard_Requests->User_GetStatus();
;;;225      return (u8 *)&StatusInfo;
;;;226    }
0000f0  bd10              POP      {r4,pc}
                  |L1.242|
0000f2  2000              MOVS     r0,#0                 ;166
0000f4  49c3              LDR      r1,|L1.1028|
0000f6  8008              STRH     r0,[r1,#0]            ;166
0000f8  48be              LDR      r0,|L1.1012|
0000fa  6800              LDR      r0,[r0,#0]            ;169  ; pInformation
0000fc  7800              LDRB     r0,[r0,#0]            ;169
0000fe  f0100f7f          TST      r0,#0x7f              ;169
000102  d11c              BNE      |L1.318|
000104  49bb              LDR      r1,|L1.1012|
000106  6809              LDR      r1,[r1,#0]            ;172  ; pInformation
000108  7a48              LDRB     r0,[r1,#9]            ;172
00010a  f0100f20          TST      r0,#0x20              ;175
00010e  d005              BEQ      |L1.284|
000110  49bc              LDR      r1,|L1.1028|
000112  7809              LDRB     r1,[r1,#0]            ;177  ; StatusInfo
000114  f0410102          ORR      r1,r1,#2              ;177
000118  4aba              LDR      r2,|L1.1028|
00011a  7011              STRB     r1,[r2,#0]            ;177
                  |L1.284|
00011c  f0100f40          TST      r0,#0x40              ;181
000120  d006              BEQ      |L1.304|
000122  49b8              LDR      r1,|L1.1028|
000124  7809              LDRB     r1,[r1,#0]            ;183  ; StatusInfo
000126  f00101fe          AND      r1,r1,#0xfe           ;183
00012a  4ab6              LDR      r2,|L1.1028|
00012c  7011              STRB     r1,[r2,#0]            ;183
00012e  e005              B        |L1.316|
                  |L1.304|
000130  49b4              LDR      r1,|L1.1028|
000132  7809              LDRB     r1,[r1,#0]            ;187  ; StatusInfo
000134  f0410101          ORR      r1,r1,#1              ;187
000138  4ab2              LDR      r2,|L1.1028|
00013a  7011              STRB     r1,[r2,#0]            ;187
                  |L1.316|
00013c  e03a              B        |L1.436|
                  |L1.318|
00013e  48ad              LDR      r0,|L1.1012|
000140  6800              LDR      r0,[r0,#0]            ;191  ; pInformation
000142  7800              LDRB     r0,[r0,#0]            ;191
000144  f000007f          AND      r0,r0,#0x7f           ;191
000148  2801              CMP      r0,#1                 ;191
00014a  d101              BNE      |L1.336|
00014c  48ad              LDR      r0,|L1.1028|
00014e  e7cf              B        |L1.240|
                  |L1.336|
000150  48a8              LDR      r0,|L1.1012|
000152  6800              LDR      r0,[r0,#0]            ;196  ; pInformation
000154  7800              LDRB     r0,[r0,#0]            ;196
000156  f000007f          AND      r0,r0,#0x7f           ;196
00015a  2802              CMP      r0,#2                 ;196
00015c  d128              BNE      |L1.432|
00015e  4aa5              LDR      r2,|L1.1012|
000160  6812              LDR      r2,[r2,#0]            ;199  ; pInformation
000162  7951              LDRB     r1,[r2,#5]            ;199
000164  f001000f          AND      r0,r1,#0xf            ;201
000168  f0110f80          TST      r1,#0x80              ;202
00016c  d00f              BEQ      |L1.398|
00016e  4aa6              LDR      r2,|L1.1032|
000170  eb020280          ADD      r2,r2,r0,LSL #2       ;205
000174  f8d22c00          LDR      r2,[r2,#0xc00]        ;205
000178  f0020230          AND      r2,r2,#0x30           ;205
00017c  2a10              CMP      r2,#0x10              ;205
00017e  d116              BNE      |L1.430|
000180  4aa0              LDR      r2,|L1.1028|
000182  7812              LDRB     r2,[r2,#0]            ;207  ; StatusInfo
000184  f0420201          ORR      r2,r2,#1              ;207
000188  4b9e              LDR      r3,|L1.1028|
00018a  701a              STRB     r2,[r3,#0]            ;207
00018c  e00f              B        |L1.430|
                  |L1.398|
00018e  4a9e              LDR      r2,|L1.1032|
000190  eb020280          ADD      r2,r2,r0,LSL #2       ;213
000194  f8d22c00          LDR      r2,[r2,#0xc00]        ;213
000198  f4025240          AND      r2,r2,#0x3000         ;213
00019c  f5b25f80          CMP      r2,#0x1000            ;213
0001a0  d105              BNE      |L1.430|
0001a2  4a98              LDR      r2,|L1.1028|
0001a4  7812              LDRB     r2,[r2,#0]            ;215  ; StatusInfo
0001a6  f0420201          ORR      r2,r2,#1              ;215
0001aa  4b96              LDR      r3,|L1.1028|
0001ac  701a              STRB     r2,[r3,#0]            ;215
                  |L1.430|
0001ae  e001              B        |L1.436|
                  |L1.432|
0001b0  2000              MOVS     r0,#0                 ;222
0001b2  e79d              B        |L1.240|
                  |L1.436|
0001b4  4990              LDR      r1,|L1.1016|
0001b6  6809              LDR      r1,[r1,#0]            ;224  ; pUser_Standard_Requests
0001b8  6908              LDR      r0,[r1,#0x10]         ;224
0001ba  4780              BLX      r0                    ;224
0001bc  4891              LDR      r0,|L1.1028|
0001be  e797              B        |L1.240|
;;;227    
                          ENDP

                  Standard_ClearFeature PROC
;;;235    *******************************************************************************/
;;;236    RESULT Standard_ClearFeature(void)
0001c0  e92d47f0          PUSH     {r4-r10,lr}
;;;237    {
;;;238      u32     Type_Rec = Type_Recipient;
0001c4  488b              LDR      r0,|L1.1012|
0001c6  6800              LDR      r0,[r0,#0]  ; pInformation
0001c8  7800              LDRB     r0,[r0,#0]
0001ca  f000047f          AND      r4,r0,#0x7f
;;;239      u32     Status;
;;;240    
;;;241    
;;;242      if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
0001ce  b954              CBNZ     r4,|L1.486|
;;;243      {/*Device Clear Feature*/
;;;244        ClrBit(pInformation->Current_Feature, 5);
0001d0  4888              LDR      r0,|L1.1012|
0001d2  6800              LDR      r0,[r0,#0]  ; pInformation
0001d4  7a40              LDRB     r0,[r0,#9]
0001d6  f00000df          AND      r0,r0,#0xdf
0001da  4986              LDR      r1,|L1.1012|
0001dc  6809              LDR      r1,[r1,#0]  ; pInformation
0001de  7248              STRB     r0,[r1,#9]
;;;245        return USB_SUCCESS;
0001e0  2000              MOVS     r0,#0
                  |L1.482|
;;;246      }
;;;247      else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;248      {/*EndPoint Clear Feature*/
;;;249        DEVICE* pDev;
;;;250        u32 Related_Endpoint;
;;;251        u32 wIndex0;
;;;252        u32 rEP;
;;;253    
;;;254        if ((pInformation->USBwValue != ENDPOINT_STALL)
;;;255            || (pInformation->USBwIndex1 != 0))
;;;256        {
;;;257          return USB_UNSUPPORT;
;;;258        }
;;;259    
;;;260        pDev = &Device_Table;
;;;261        wIndex0 = pInformation->USBwIndex0;
;;;262        rEP = wIndex0 & ~0x80;
;;;263        Related_Endpoint = ENDP0 + rEP;
;;;264    
;;;265        if (ValBit(pInformation->USBwIndex0, 7))
;;;266        {
;;;267          /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;268          is Disabled*/
;;;269          Status = _GetEPTxStatus(Related_Endpoint);
;;;270        }
;;;271        else
;;;272        {
;;;273          Status = _GetEPRxStatus(Related_Endpoint);
;;;274        }
;;;275    
;;;276        if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
;;;277            || (pInformation->Current_Configuration == 0))
;;;278        {
;;;279          return USB_UNSUPPORT;
;;;280        }
;;;281    
;;;282    
;;;283        if (wIndex0 & 0x80)
;;;284        {
;;;285          /* IN endpoint */
;;;286          if (_GetTxStallStatus(Related_Endpoint ))
;;;287          {
;;;288            ClearDTOG_TX(Related_Endpoint);
;;;289            SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
;;;290          }
;;;291        }
;;;292        else
;;;293        {
;;;294          /* OUT endpoint */
;;;295          if (_GetRxStallStatus(Related_Endpoint))
;;;296          {
;;;297            if (Related_Endpoint == ENDP0)
;;;298            {
;;;299              /* After clear the STALL, enable the default endpoint receiver */
;;;300              SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
;;;301              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
;;;302            }
;;;303            else
;;;304            {
;;;305              ClearDTOG_RX(Related_Endpoint);
;;;306              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
;;;307            }
;;;308          }
;;;309        }
;;;310        pUser_Standard_Requests->User_ClearFeature();
;;;311        return USB_SUCCESS;
;;;312      }
;;;313    
;;;314      return USB_UNSUPPORT;
;;;315    }
0001e2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.486|
0001e6  2c02              CMP      r4,#2                 ;247
0001e8  d17e              BNE      |L1.744|
0001ea  4882              LDR      r0,|L1.1012|
0001ec  6800              LDR      r0,[r0,#0]            ;254  ; pInformation
0001ee  8840              LDRH     r0,[r0,#2]            ;254
0001f0  b918              CBNZ     r0,|L1.506|
0001f2  4880              LDR      r0,|L1.1012|
0001f4  6800              LDR      r0,[r0,#0]            ;255  ; pInformation
0001f6  7900              LDRB     r0,[r0,#4]            ;255
0001f8  b108              CBZ      r0,|L1.510|
                  |L1.506|
0001fa  2002              MOVS     r0,#2                 ;257
0001fc  e7f1              B        |L1.482|
                  |L1.510|
0001fe  4e7f              LDR      r6,|L1.1020|
000200  487c              LDR      r0,|L1.1012|
000202  6800              LDR      r0,[r0,#0]            ;261  ; pInformation
000204  f8908005          LDRB     r8,[r0,#5]            ;261
000208  f0280980          BIC      r9,r8,#0x80           ;262
00020c  464f              MOV      r7,r9                 ;263
00020e  4879              LDR      r0,|L1.1012|
000210  6800              LDR      r0,[r0,#0]            ;265  ; pInformation
000212  7940              LDRB     r0,[r0,#5]            ;265
000214  f0100f80          TST      r0,#0x80              ;265
000218  d007              BEQ      |L1.554|
00021a  487b              LDR      r0,|L1.1032|
00021c  eb000087          ADD      r0,r0,r7,LSL #2       ;269
000220  f8d00c00          LDR      r0,[r0,#0xc00]        ;269
000224  f0000530          AND      r5,r0,#0x30           ;269
000228  e006              B        |L1.568|
                  |L1.554|
00022a  4877              LDR      r0,|L1.1032|
00022c  eb000087          ADD      r0,r0,r7,LSL #2       ;273
000230  f8d00c00          LDR      r0,[r0,#0xc00]        ;273
000234  f4005540          AND      r5,r0,#0x3000         ;273
                  |L1.568|
000238  7830              LDRB     r0,[r6,#0]            ;276
00023a  4548              CMP      r0,r9                 ;276
00023c  d904              BLS      |L1.584|
00023e  b11d              CBZ      r5,|L1.584|
000240  486c              LDR      r0,|L1.1012|
000242  6800              LDR      r0,[r0,#0]            ;277  ; pInformation
000244  7a80              LDRB     r0,[r0,#0xa]          ;277
000246  b908              CBNZ     r0,|L1.588|
                  |L1.584|
000248  2002              MOVS     r0,#2                 ;279
00024a  e7ca              B        |L1.482|
                  |L1.588|
00024c  f0180f80          TST      r8,#0x80              ;283
000250  d010              BEQ      |L1.628|
000252  486d              LDR      r0,|L1.1032|
000254  eb000087          ADD      r0,r0,r7,LSL #2       ;286
000258  f8d00c00          LDR      r0,[r0,#0xc00]        ;286
00025c  f0000030          AND      r0,r0,#0x30           ;286
000260  2810              CMP      r0,#0x10              ;286
000262  d145              BNE      |L1.752|
000264  b2f8              UXTB     r0,r7                 ;288
000266  f7fffffe          BL       ClearDTOG_TX
00026a  2130              MOVS     r1,#0x30              ;289
00026c  b2f8              UXTB     r0,r7                 ;289
00026e  f7fffffe          BL       SetEPTxStatus
000272  e03d              B        |L1.752|
                  |L1.628|
000274  4864              LDR      r0,|L1.1032|
000276  eb000087          ADD      r0,r0,r7,LSL #2       ;295
00027a  f8d00c00          LDR      r0,[r0,#0xc00]        ;295
00027e  f4005040          AND      r0,r0,#0x3000         ;295
000282  f5b05f80          CMP      r0,#0x1000            ;295
000286  d133              BNE      |L1.752|
000288  b9cf              CBNZ     r7,|L1.702|
00028a  4860              LDR      r0,|L1.1036|
00028c  f890102c          LDRB     r1,[r0,#0x2c]         ;300  ; Device_Property
000290  b2f8              UXTB     r0,r7                 ;300
000292  f7fffffe          BL       SetEPRxCount
000296  495c              LDR      r1,|L1.1032|
000298  eb010187          ADD      r1,r1,r7,LSL #2       ;301
00029c  f8d11c00          LDR      r1,[r1,#0xc00]        ;301
0002a0  b289              UXTH     r1,r1                 ;301
0002a2  f64b728f          MOV      r2,#0xbf8f            ;301
0002a6  ea010002          AND      r0,r1,r2              ;301
0002aa  f4805080          EOR      r0,r0,#0x1000         ;301
0002ae  f4805000          EOR      r0,r0,#0x2000         ;301
0002b2  4955              LDR      r1,|L1.1032|
0002b4  eb010187          ADD      r1,r1,r7,LSL #2       ;301
0002b8  f8c10c00          STR      r0,[r1,#0xc00]        ;301
0002bc  e018              B        |L1.752|
                  |L1.702|
0002be  b2f8              UXTB     r0,r7                 ;305
0002c0  f7fffffe          BL       ClearDTOG_RX
0002c4  4950              LDR      r1,|L1.1032|
0002c6  eb010187          ADD      r1,r1,r7,LSL #2       ;306
0002ca  f8d11c00          LDR      r1,[r1,#0xc00]        ;306
0002ce  b289              UXTH     r1,r1                 ;306
0002d0  f64b728f          MOV      r2,#0xbf8f            ;306
0002d4  ea010002          AND      r0,r1,r2              ;306
0002d8  f4805080          EOR      r0,r0,#0x1000         ;306
0002dc  f4805000          EOR      r0,r0,#0x2000         ;306
0002e0  4949              LDR      r1,|L1.1032|
0002e2  eb010187          ADD      r1,r1,r7,LSL #2       ;306
0002e6  e000              B        |L1.746|
                  |L1.744|
0002e8  e008              B        |L1.764|
                  |L1.746|
0002ea  f8c10c00          STR      r0,[r1,#0xc00]        ;306
0002ee  bf00              NOP                            ;306
                  |L1.752|
0002f0  4941              LDR      r1,|L1.1016|
0002f2  6809              LDR      r1,[r1,#0]            ;310  ; pUser_Standard_Requests
0002f4  6948              LDR      r0,[r1,#0x14]         ;310
0002f6  4780              BLX      r0                    ;310
0002f8  2000              MOVS     r0,#0                 ;311
0002fa  e772              B        |L1.482|
                  |L1.764|
0002fc  bf00              NOP                            ;312
0002fe  2002              MOVS     r0,#2                 ;314
000300  e76f              B        |L1.482|
;;;316    
                          ENDP

                  Standard_SetEndPointFeature PROC
;;;324    *******************************************************************************/
;;;325    RESULT Standard_SetEndPointFeature(void)
000302  e92d41f0          PUSH     {r4-r8,lr}
;;;326    {
;;;327      u32    wIndex0;
;;;328      u32    Related_Endpoint;
;;;329      u32    rEP;
;;;330      u32   Status;
;;;331    
;;;332      wIndex0 = pInformation->USBwIndex0;
000306  483b              LDR      r0,|L1.1012|
000308  6800              LDR      r0,[r0,#0]  ; pInformation
00030a  7944              LDRB     r4,[r0,#5]
;;;333      rEP = wIndex0 & ~0x80;
00030c  f0240680          BIC      r6,r4,#0x80
;;;334      Related_Endpoint = ENDP0 + rEP;
000310  4635              MOV      r5,r6
;;;335    
;;;336      if (ValBit(pInformation->USBwIndex0, 7))
000312  4838              LDR      r0,|L1.1012|
000314  6800              LDR      r0,[r0,#0]  ; pInformation
000316  7940              LDRB     r0,[r0,#5]
000318  f0100f80          TST      r0,#0x80
00031c  d007              BEQ      |L1.814|
;;;337      {
;;;338        /* get Status of endpoint & stall the request if the related_ENdpoint
;;;339        is Disabled*/
;;;340        Status = _GetEPTxStatus(Related_Endpoint);
00031e  483a              LDR      r0,|L1.1032|
000320  eb000085          ADD      r0,r0,r5,LSL #2
000324  f8d00c00          LDR      r0,[r0,#0xc00]
000328  f0000730          AND      r7,r0,#0x30
00032c  e006              B        |L1.828|
                  |L1.814|
;;;341      }
;;;342      else
;;;343      {
;;;344        Status = _GetEPRxStatus(Related_Endpoint);
00032e  4836              LDR      r0,|L1.1032|
000330  eb000085          ADD      r0,r0,r5,LSL #2
000334  f8d00c00          LDR      r0,[r0,#0xc00]
000338  f4005740          AND      r7,r0,#0x3000
                  |L1.828|
;;;345      }
;;;346    
;;;347      if (Related_Endpoint >= Device_Table.Total_Endpoint
00033c  482f              LDR      r0,|L1.1020|
00033e  7800              LDRB     r0,[r0,#0]  ; Device_Table
000340  42a8              CMP      r0,r5
000342  d908              BLS      |L1.854|
;;;348          || pInformation->USBwValue != 0 || Status == 0
000344  482b              LDR      r0,|L1.1012|
000346  6800              LDR      r0,[r0,#0]  ; pInformation
000348  8840              LDRH     r0,[r0,#2]
00034a  b920              CBNZ     r0,|L1.854|
00034c  b11f              CBZ      r7,|L1.854|
;;;349          || pInformation->Current_Configuration == 0)
00034e  4829              LDR      r0,|L1.1012|
000350  6800              LDR      r0,[r0,#0]  ; pInformation
000352  7a80              LDRB     r0,[r0,#0xa]
000354  b910              CBNZ     r0,|L1.860|
                  |L1.854|
;;;350      {
;;;351        return USB_UNSUPPORT;
000356  2002              MOVS     r0,#2
                  |L1.856|
;;;352      }
;;;353      else
;;;354      {
;;;355        if (wIndex0 & 0x80)
;;;356        {
;;;357          /* IN endpoint */
;;;358          _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
;;;359        }
;;;360    
;;;361        else
;;;362        {
;;;363          /* OUT endpoint */
;;;364          _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
;;;365        }
;;;366      }
;;;367      pUser_Standard_Requests->User_SetEndPointFeature();
;;;368      return USB_SUCCESS;
;;;369    }
000358  e8bd81f0          POP      {r4-r8,pc}
                  |L1.860|
00035c  f0140f80          TST      r4,#0x80              ;355
000360  d012              BEQ      |L1.904|
000362  4929              LDR      r1,|L1.1032|
000364  eb010185          ADD      r1,r1,r5,LSL #2       ;358
000368  f8d11c00          LDR      r1,[r1,#0xc00]        ;358
00036c  b289              UXTH     r1,r1                 ;358
00036e  f64872bf          MOV      r2,#0x8fbf            ;358
000372  ea010002          AND      r0,r1,r2              ;358
000376  f0800010          EOR      r0,r0,#0x10           ;358
00037a  bf00              NOP                            ;358
00037c  4922              LDR      r1,|L1.1032|
00037e  eb010185          ADD      r1,r1,r5,LSL #2       ;358
000382  f8c10c00          STR      r0,[r1,#0xc00]        ;358
000386  e012              B        |L1.942|
                  |L1.904|
000388  491f              LDR      r1,|L1.1032|
00038a  eb010185          ADD      r1,r1,r5,LSL #2       ;364
00038e  f8d11c00          LDR      r1,[r1,#0xc00]        ;364
000392  b289              UXTH     r1,r1                 ;364
000394  f64b728f          MOV      r2,#0xbf8f            ;364
000398  ea010002          AND      r0,r1,r2              ;364
00039c  f4805080          EOR      r0,r0,#0x1000         ;364
0003a0  bf00              NOP                            ;364
0003a2  4919              LDR      r1,|L1.1032|
0003a4  eb010185          ADD      r1,r1,r5,LSL #2       ;364
0003a8  f8c10c00          STR      r0,[r1,#0xc00]        ;364
0003ac  bf00              NOP                            ;364
                  |L1.942|
0003ae  4912              LDR      r1,|L1.1016|
0003b0  6809              LDR      r1,[r1,#0]            ;367  ; pUser_Standard_Requests
0003b2  6988              LDR      r0,[r1,#0x18]         ;367
0003b4  4780              BLX      r0                    ;367
0003b6  2000              MOVS     r0,#0                 ;368
0003b8  e7ce              B        |L1.856|
;;;370    
                          ENDP

                  Standard_SetDeviceFeature PROC
;;;378    *******************************************************************************/
;;;379    RESULT Standard_SetDeviceFeature(void)
0003ba  b510              PUSH     {r4,lr}
;;;380    {
;;;381      SetBit(pInformation->Current_Feature, 5);
0003bc  480d              LDR      r0,|L1.1012|
0003be  6800              LDR      r0,[r0,#0]  ; pInformation
0003c0  7a40              LDRB     r0,[r0,#9]
0003c2  f0400020          ORR      r0,r0,#0x20
0003c6  490b              LDR      r1,|L1.1012|
0003c8  6809              LDR      r1,[r1,#0]  ; pInformation
0003ca  7248              STRB     r0,[r1,#9]
;;;382      pUser_Standard_Requests->User_SetDeviceFeature();
0003cc  490a              LDR      r1,|L1.1016|
0003ce  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
0003d0  69c8              LDR      r0,[r1,#0x1c]
0003d2  4780              BLX      r0
;;;383      return USB_SUCCESS;
0003d4  2000              MOVS     r0,#0
;;;384    }
0003d6  bd10              POP      {r4,pc}
;;;385    
                          ENDP

                  Standard_GetDescriptorData PROC
;;;404    *******************************************************************************/
;;;405    u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
0003d8  b510              PUSH     {r4,lr}
;;;406    {
0003da  4602              MOV      r2,r0
;;;407      u32  wOffset;
;;;408    
;;;409      wOffset = pInformation->Ctrl_Info.Usb_wOffset;
0003dc  4805              LDR      r0,|L1.1012|
0003de  6800              LDR      r0,[r0,#0]  ; pInformation
0003e0  8a43              LDRH     r3,[r0,#0x12]
;;;410      if (Length == 0)
0003e2  b9aa              CBNZ     r2,|L1.1040|
;;;411      {
;;;412        pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
0003e4  8888              LDRH     r0,[r1,#4]
0003e6  1ac0              SUBS     r0,r0,r3
0003e8  4c02              LDR      r4,|L1.1012|
0003ea  6824              LDR      r4,[r4,#0]  ; pInformation
0003ec  8220              STRH     r0,[r4,#0x10]
;;;413        return 0;
0003ee  2000              MOVS     r0,#0
                  |L1.1008|
;;;414      }
;;;415    
;;;416      return pDesc->Descriptor + wOffset;
;;;417    }
0003f0  bd10              POP      {r4,pc}
0003f2  0000              DCW      0x0000
                  |L1.1012|
                          DCD      pInformation
                  |L1.1016|
                          DCD      pUser_Standard_Requests
                  |L1.1020|
                          DCD      Device_Table
                  |L1.1024|
                          DCD      pProperty
                  |L1.1028|
                          DCD      StatusInfo
                  |L1.1032|
                          DCD      0x40005000
                  |L1.1036|
                          DCD      Device_Property
                  |L1.1040|
000410  6808              LDR      r0,[r1,#0]            ;416
000412  4418              ADD      r0,r0,r3              ;416
000414  e7ec              B        |L1.1008|
;;;418    
                          ENDP

                  DataStageOut PROC
;;;425    *******************************************************************************/
;;;426    void DataStageOut(void)
000416  e92d41f0          PUSH     {r4-r8,lr}
;;;427    {
;;;428      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
00041a  48ff              LDR      r0,|L1.2072|
00041c  6800              LDR      r0,[r0,#0]  ; pInformation
00041e  f1000410          ADD      r4,r0,#0x10
;;;429      u32 save_rLength;
;;;430    
;;;431      save_rLength = pEPinfo->Usb_rLength;
000422  8825              LDRH     r5,[r4,#0]
;;;432    
;;;433      if (pEPinfo->CopyData && save_rLength)
000424  68a0              LDR      r0,[r4,#8]
000426  b1c0              CBZ      r0,|L1.1114|
000428  b1bd              CBZ      r5,|L1.1114|
;;;434      {
;;;435        u8 *Buffer;
;;;436        u32 Length;
;;;437    
;;;438        Length = pEPinfo->PacketSize;
00042a  88a6              LDRH     r6,[r4,#4]
;;;439        if (Length > save_rLength)
00042c  42ae              CMP      r6,r5
00042e  d900              BLS      |L1.1074|
;;;440        {
;;;441          Length = save_rLength;
000430  462e              MOV      r6,r5
                  |L1.1074|
;;;442        }
;;;443    
;;;444        Buffer = (*pEPinfo->CopyData)(Length);
000432  b2b0              UXTH     r0,r6
000434  68a1              LDR      r1,[r4,#8]
000436  4788              BLX      r1
000438  4607              MOV      r7,r0
;;;445        pEPinfo->Usb_rLength -= Length;
00043a  8820              LDRH     r0,[r4,#0]
00043c  1b80              SUBS     r0,r0,r6
00043e  8020              STRH     r0,[r4,#0]
;;;446        pEPinfo->Usb_rOffset += Length;
000440  8860              LDRH     r0,[r4,#2]
000442  4430              ADD      r0,r0,r6
000444  8060              STRH     r0,[r4,#2]
;;;447    
;;;448        PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
000446  2000              MOVS     r0,#0
000448  f7fffffe          BL       GetEPRxAddr
00044c  4680              MOV      r8,r0
00044e  b2b2              UXTH     r2,r6
000450  4601              MOV      r1,r0
000452  4638              MOV      r0,r7
000454  f7fffffe          BL       PMAToUserBufferCopy
;;;449      }
000458  bf00              NOP      
                  |L1.1114|
;;;450    
;;;451      if (pEPinfo->Usb_rLength != 0)
00045a  8820              LDRH     r0,[r4,#0]
00045c  b150              CBZ      r0,|L1.1140|
;;;452      {
;;;453        vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
00045e  f44f5040          MOV      r0,#0x3000
000462  49ee              LDR      r1,|L1.2076|
000464  8008              STRH     r0,[r1,#0]
;;;454        SetEPTxCount(ENDP0, 0);
000466  2100              MOVS     r1,#0
000468  4608              MOV      r0,r1
00046a  f7fffffe          BL       SetEPTxCount
;;;455        vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
00046e  2030              MOVS     r0,#0x30
000470  49eb              LDR      r1,|L1.2080|
000472  8008              STRH     r0,[r1,#0]
                  |L1.1140|
;;;456      }
;;;457      /* Set the next State*/
;;;458      if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
000474  8820              LDRH     r0,[r4,#0]
000476  88a1              LDRH     r1,[r4,#4]
000478  4288              CMP      r0,r1
00047a  db04              BLT      |L1.1158|
;;;459      {
;;;460        pInformation->ControlState = OUT_DATA;
00047c  2003              MOVS     r0,#3
00047e  49e6              LDR      r1,|L1.2072|
000480  6809              LDR      r1,[r1,#0]  ; pInformation
000482  7208              STRB     r0,[r1,#8]
000484  e018              B        |L1.1208|
                  |L1.1158|
;;;461      }
;;;462      else
;;;463      {
;;;464        if (pEPinfo->Usb_rLength > 0)
000486  8820              LDRH     r0,[r4,#0]
000488  2800              CMP      r0,#0
00048a  dd04              BLE      |L1.1174|
;;;465        {
;;;466          pInformation->ControlState = LAST_OUT_DATA;
00048c  2005              MOVS     r0,#5
00048e  49e2              LDR      r1,|L1.2072|
000490  6809              LDR      r1,[r1,#0]  ; pInformation
000492  7208              STRB     r0,[r1,#8]
000494  e010              B        |L1.1208|
                  |L1.1174|
;;;467        }
;;;468        else if (pEPinfo->Usb_rLength == 0)
000496  8820              LDRH     r0,[r4,#0]
000498  b970              CBNZ     r0,|L1.1208|
;;;469        {
;;;470          pInformation->ControlState = WAIT_STATUS_IN;
00049a  2006              MOVS     r0,#6
00049c  49de              LDR      r1,|L1.2072|
00049e  6809              LDR      r1,[r1,#0]  ; pInformation
0004a0  7208              STRB     r0,[r1,#8]
;;;471          USB_StatusIn();
0004a2  2100              MOVS     r1,#0
0004a4  48df              LDR      r0,|L1.2084|
0004a6  6800              LDR      r0,[r0,#0]
0004a8  b280              UXTH     r0,r0
0004aa  1c80              ADDS     r0,r0,#2
0004ac  4ade              LDR      r2,|L1.2088|
0004ae  f8421010          STR      r1,[r2,r0,LSL #1]
0004b2  2030              MOVS     r0,#0x30
0004b4  49da              LDR      r1,|L1.2080|
0004b6  8008              STRH     r0,[r1,#0]
                  |L1.1208|
;;;472        }
;;;473      }
;;;474    }
0004b8  e8bd81f0          POP      {r4-r8,pc}
;;;475    
                          ENDP

                  DataStageIn PROC
;;;482    *******************************************************************************/
;;;483    void DataStageIn(void)
0004bc  e92d47f0          PUSH     {r4-r10,lr}
;;;484    {
;;;485      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
0004c0  48d5              LDR      r0,|L1.2072|
0004c2  6800              LDR      r0,[r0,#0]  ; pInformation
0004c4  f1000410          ADD      r4,r0,#0x10
;;;486      u32 save_wLength = pEPinfo->Usb_wLength;
0004c8  8825              LDRH     r5,[r4,#0]
;;;487      u32 ControlState = pInformation->ControlState;
0004ca  48d3              LDR      r0,|L1.2072|
0004cc  6800              LDR      r0,[r0,#0]  ; pInformation
0004ce  7a06              LDRB     r6,[r0,#8]
;;;488    
;;;489      u8 *DataBuffer;
;;;490      u32 Length;
;;;491    
;;;492      if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
0004d0  b9d5              CBNZ     r5,|L1.1288|
0004d2  2e04              CMP      r6,#4
0004d4  d118              BNE      |L1.1288|
;;;493      {
;;;494        if(Data_Mul_MaxPacketSize == TRUE)
0004d6  48d5              LDR      r0,|L1.2092|
0004d8  7800              LDRB     r0,[r0,#0]  ; Data_Mul_MaxPacketSize
0004da  2801              CMP      r0,#1
0004dc  d10f              BNE      |L1.1278|
;;;495        {
;;;496          /* No more data to send and empty packet */
;;;497          Send0LengthData();
0004de  2100              MOVS     r1,#0
0004e0  48d0              LDR      r0,|L1.2084|
0004e2  6800              LDR      r0,[r0,#0]
0004e4  b280              UXTH     r0,r0
0004e6  1c80              ADDS     r0,r0,#2
0004e8  4acf              LDR      r2,|L1.2088|
0004ea  f8421010          STR      r1,[r2,r0,LSL #1]
0004ee  2030              MOVS     r0,#0x30
0004f0  49cb              LDR      r1,|L1.2080|
0004f2  8008              STRH     r0,[r1,#0]
;;;498          ControlState = LAST_IN_DATA;
0004f4  bf00              NOP      
;;;499          Data_Mul_MaxPacketSize = FALSE;
0004f6  2000              MOVS     r0,#0
0004f8  49cc              LDR      r1,|L1.2092|
0004fa  7008              STRB     r0,[r1,#0]
0004fc  e003              B        |L1.1286|
                  |L1.1278|
;;;500        }
;;;501        else 
;;;502        {
;;;503          /* No more data to send so STALL the TX Status*/
;;;504          ControlState = WAIT_STATUS_OUT;
0004fe  2607              MOVS     r6,#7
;;;505          vSetEPTxStatus(EP_TX_STALL);
000500  2010              MOVS     r0,#0x10
000502  49c7              LDR      r1,|L1.2080|
000504  8008              STRH     r0,[r1,#0]
                  |L1.1286|
;;;506        }
;;;507        
;;;508        goto Expect_Status_Out;
000506  e027              B        |L1.1368|
                  |L1.1288|
;;;509      }
;;;510    
;;;511      Length = pEPinfo->PacketSize;
000508  88a7              LDRH     r7,[r4,#4]
;;;512      ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
00050a  42bd              CMP      r5,r7
00050c  d801              BHI      |L1.1298|
00050e  2004              MOVS     r0,#4
000510  e000              B        |L1.1300|
                  |L1.1298|
000512  2002              MOVS     r0,#2
                  |L1.1300|
000514  4606              MOV      r6,r0
;;;513    
;;;514      if (Length > save_wLength)
000516  42af              CMP      r7,r5
000518  d900              BLS      |L1.1308|
;;;515      {
;;;516        Length = save_wLength;
00051a  462f              MOV      r7,r5
                  |L1.1308|
;;;517      }
;;;518    
;;;519      DataBuffer = (*pEPinfo->CopyData)(Length);
00051c  b2b8              UXTH     r0,r7
00051e  68a1              LDR      r1,[r4,#8]
000520  4788              BLX      r1
000522  4680              MOV      r8,r0
;;;520    
;;;521      UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
000524  2000              MOVS     r0,#0
000526  f7fffffe          BL       GetEPTxAddr
00052a  4681              MOV      r9,r0
00052c  b2ba              UXTH     r2,r7
00052e  4601              MOV      r1,r0
000530  4640              MOV      r0,r8
000532  f7fffffe          BL       UserToPMABufferCopy
;;;522    
;;;523      SetEPTxCount(ENDP0, Length);
000536  b2b9              UXTH     r1,r7
000538  2000              MOVS     r0,#0
00053a  f7fffffe          BL       SetEPTxCount
;;;524    
;;;525      pEPinfo->Usb_wLength -= Length;
00053e  8820              LDRH     r0,[r4,#0]
000540  1bc0              SUBS     r0,r0,r7
000542  8020              STRH     r0,[r4,#0]
;;;526      pEPinfo->Usb_wOffset += Length;
000544  8860              LDRH     r0,[r4,#2]
000546  4438              ADD      r0,r0,r7
000548  8060              STRH     r0,[r4,#2]
;;;527      vSetEPTxStatus(EP_TX_VALID);
00054a  2030              MOVS     r0,#0x30
00054c  49b4              LDR      r1,|L1.2080|
00054e  8008              STRH     r0,[r1,#0]
;;;528    
;;;529      USB_StatusOut();/* Expect the host to abort the data IN stage */
000550  0200              LSLS     r0,r0,#8
000552  49b2              LDR      r1,|L1.2076|
000554  8008              STRH     r0,[r1,#0]
;;;530    
;;;531    Expect_Status_Out:
000556  bf00              NOP      
                  |L1.1368|
;;;532      pInformation->ControlState = ControlState;
000558  49af              LDR      r1,|L1.2072|
00055a  6809              LDR      r1,[r1,#0]  ; pInformation
00055c  720e              STRB     r6,[r1,#8]
;;;533    }
00055e  e8bd87f0          POP      {r4-r10,pc}
;;;534    
                          ENDP

                  NoData_Setup0 PROC
;;;541    *******************************************************************************/
;;;542    void NoData_Setup0(void)
000562  b570              PUSH     {r4-r6,lr}
;;;543    {
;;;544      RESULT Result = USB_UNSUPPORT;
000564  2402              MOVS     r4,#2
;;;545      u32 RequestNo = pInformation->USBbRequest;
000566  48ac              LDR      r0,|L1.2072|
000568  6800              LDR      r0,[r0,#0]  ; pInformation
00056a  7845              LDRB     r5,[r0,#1]
;;;546      u32 ControlState;
;;;547    
;;;548      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00056c  48aa              LDR      r0,|L1.2072|
00056e  6800              LDR      r0,[r0,#0]  ; pInformation
000570  7800              LDRB     r0,[r0,#0]
000572  f0100f7f          TST      r0,#0x7f
000576  d14a              BNE      |L1.1550|
;;;549      {
;;;550        /* Device Request*/
;;;551        /* SET_CONFIGURATION*/
;;;552        if (RequestNo == SET_CONFIGURATION)
000578  2d09              CMP      r5,#9
00057a  d103              BNE      |L1.1412|
;;;553        {
;;;554          Result = Standard_SetConfiguration();
00057c  f7fffffe          BL       Standard_SetConfiguration
000580  4604              MOV      r4,r0
000582  e065              B        |L1.1616|
                  |L1.1412|
;;;555        }
;;;556    
;;;557        /*SET ADDRESS*/
;;;558        else if (RequestNo == SET_ADDRESS)
000584  2d05              CMP      r5,#5
000586  d114              BNE      |L1.1458|
;;;559        {
;;;560          if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
000588  48a3              LDR      r0,|L1.2072|
00058a  6800              LDR      r0,[r0,#0]  ; pInformation
00058c  78c0              LDRB     r0,[r0,#3]
00058e  287f              CMP      r0,#0x7f
000590  dc0b              BGT      |L1.1450|
000592  48a1              LDR      r0,|L1.2072|
000594  6800              LDR      r0,[r0,#0]  ; pInformation
000596  7880              LDRB     r0,[r0,#2]
000598  b938              CBNZ     r0,|L1.1450|
;;;561              || (pInformation->USBwIndex != 0)
00059a  489f              LDR      r0,|L1.2072|
00059c  6800              LDR      r0,[r0,#0]  ; pInformation
00059e  8880              LDRH     r0,[r0,#4]
0005a0  b918              CBNZ     r0,|L1.1450|
;;;562              || (pInformation->Current_Configuration != 0))
0005a2  489d              LDR      r0,|L1.2072|
0005a4  6800              LDR      r0,[r0,#0]  ; pInformation
0005a6  7a80              LDRB     r0,[r0,#0xa]
0005a8  b108              CBZ      r0,|L1.1454|
                  |L1.1450|
;;;563            /* Device Address should be 127 or less*/
;;;564          {
;;;565            ControlState = STALLED;
0005aa  2608              MOVS     r6,#8
;;;566            goto exit_NoData_Setup0;
0005ac  e06b              B        |L1.1670|
                  |L1.1454|
;;;567          }
;;;568          else
;;;569          {
;;;570            Result = USB_SUCCESS;
0005ae  2400              MOVS     r4,#0
0005b0  e04e              B        |L1.1616|
                  |L1.1458|
;;;571          }
;;;572        }
;;;573        /*SET FEATURE for Device*/
;;;574        else if (RequestNo == SET_FEATURE)
0005b2  2d03              CMP      r5,#3
0005b4  d114              BNE      |L1.1504|
;;;575        {
;;;576          if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
0005b6  4898              LDR      r0,|L1.2072|
0005b8  6800              LDR      r0,[r0,#0]  ; pInformation
0005ba  78c0              LDRB     r0,[r0,#3]
0005bc  2801              CMP      r0,#1
0005be  d10d              BNE      |L1.1500|
;;;577              && (pInformation->USBwIndex == 0)
0005c0  4895              LDR      r0,|L1.2072|
0005c2  6800              LDR      r0,[r0,#0]  ; pInformation
0005c4  8880              LDRH     r0,[r0,#4]
0005c6  b948              CBNZ     r0,|L1.1500|
;;;578              && (ValBit(pInformation->Current_Feature, 5)))
0005c8  4893              LDR      r0,|L1.2072|
0005ca  6800              LDR      r0,[r0,#0]  ; pInformation
0005cc  7a40              LDRB     r0,[r0,#9]
0005ce  f0100f20          TST      r0,#0x20
0005d2  d003              BEQ      |L1.1500|
;;;579          {
;;;580            Result = Standard_SetDeviceFeature();
0005d4  f7fffffe          BL       Standard_SetDeviceFeature
0005d8  4604              MOV      r4,r0
0005da  e039              B        |L1.1616|
                  |L1.1500|
;;;581          }
;;;582          else
;;;583          {
;;;584            Result = USB_UNSUPPORT;
0005dc  2402              MOVS     r4,#2
0005de  e037              B        |L1.1616|
                  |L1.1504|
;;;585          }
;;;586        }
;;;587        /*Clear FEATURE for Device */
;;;588        else if (RequestNo == CLEAR_FEATURE)
0005e0  2d01              CMP      r5,#1
0005e2  d135              BNE      |L1.1616|
;;;589        {
;;;590          if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
0005e4  488c              LDR      r0,|L1.2072|
0005e6  6800              LDR      r0,[r0,#0]  ; pInformation
0005e8  78c0              LDRB     r0,[r0,#3]
0005ea  2801              CMP      r0,#1
0005ec  d10d              BNE      |L1.1546|
;;;591              && pInformation->USBwIndex == 0
0005ee  488a              LDR      r0,|L1.2072|
0005f0  6800              LDR      r0,[r0,#0]  ; pInformation
0005f2  8880              LDRH     r0,[r0,#4]
0005f4  b948              CBNZ     r0,|L1.1546|
;;;592              && ValBit(pInformation->Current_Feature, 5))
0005f6  4888              LDR      r0,|L1.2072|
0005f8  6800              LDR      r0,[r0,#0]  ; pInformation
0005fa  7a40              LDRB     r0,[r0,#9]
0005fc  f0100f20          TST      r0,#0x20
000600  d003              BEQ      |L1.1546|
;;;593          {
;;;594            Result = Standard_ClearFeature();
000602  f7fffffe          BL       Standard_ClearFeature
000606  4604              MOV      r4,r0
000608  e022              B        |L1.1616|
                  |L1.1546|
;;;595          }
;;;596          else
;;;597          {
;;;598            Result = USB_UNSUPPORT;
00060a  2402              MOVS     r4,#2
00060c  e020              B        |L1.1616|
                  |L1.1550|
;;;599          }
;;;600        }
;;;601    
;;;602      }
;;;603    
;;;604      /* Interface Request*/
;;;605      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
00060e  4882              LDR      r0,|L1.2072|
000610  6800              LDR      r0,[r0,#0]  ; pInformation
000612  7800              LDRB     r0,[r0,#0]
000614  f000007f          AND      r0,r0,#0x7f
000618  2801              CMP      r0,#1
00061a  d105              BNE      |L1.1576|
;;;606      {
;;;607        /*SET INTERFACE*/
;;;608        if (RequestNo == SET_INTERFACE)
00061c  2d0b              CMP      r5,#0xb
00061e  d117              BNE      |L1.1616|
;;;609        {
;;;610          Result = Standard_SetInterface();
000620  f7fffffe          BL       Standard_SetInterface
000624  4604              MOV      r4,r0
000626  e013              B        |L1.1616|
                  |L1.1576|
;;;611        }
;;;612      }
;;;613    
;;;614      /* EndPoint Request*/
;;;615      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
000628  487b              LDR      r0,|L1.2072|
00062a  6800              LDR      r0,[r0,#0]  ; pInformation
00062c  7800              LDRB     r0,[r0,#0]
00062e  f000007f          AND      r0,r0,#0x7f
000632  2802              CMP      r0,#2
000634  d10b              BNE      |L1.1614|
;;;616      {
;;;617        /*CLEAR FEATURE for EndPoint*/
;;;618        if (RequestNo == CLEAR_FEATURE)
000636  2d01              CMP      r5,#1
000638  d103              BNE      |L1.1602|
;;;619        {
;;;620          Result = Standard_ClearFeature();
00063a  f7fffffe          BL       Standard_ClearFeature
00063e  4604              MOV      r4,r0
000640  e006              B        |L1.1616|
                  |L1.1602|
;;;621        }
;;;622        /* SET FEATURE for EndPoint*/
;;;623        else if (RequestNo == SET_FEATURE)
000642  2d03              CMP      r5,#3
000644  d104              BNE      |L1.1616|
;;;624        {
;;;625          Result = Standard_SetEndPointFeature();
000646  f7fffffe          BL       Standard_SetEndPointFeature
00064a  4604              MOV      r4,r0
00064c  e000              B        |L1.1616|
                  |L1.1614|
;;;626        }
;;;627      }
;;;628      else
;;;629      {
;;;630        Result = USB_UNSUPPORT;
00064e  2402              MOVS     r4,#2
                  |L1.1616|
;;;631      }
;;;632    
;;;633    
;;;634      if (Result != USB_SUCCESS)
000650  b14c              CBZ      r4,|L1.1638|
;;;635      {
;;;636        Result = (*pProperty->Class_NoData_Setup)(RequestNo);
000652  4877              LDR      r0,|L1.2096|
000654  6800              LDR      r0,[r0,#0]  ; pProperty
000656  6941              LDR      r1,[r0,#0x14]
000658  b2e8              UXTB     r0,r5
00065a  4788              BLX      r1
00065c  4604              MOV      r4,r0
;;;637        if (Result == USB_NOT_READY)
00065e  2c03              CMP      r4,#3
000660  d101              BNE      |L1.1638|
;;;638        {
;;;639          ControlState = PAUSE;
000662  2609              MOVS     r6,#9
;;;640          goto exit_NoData_Setup0;
000664  e00f              B        |L1.1670|
                  |L1.1638|
;;;641        }
;;;642      }
;;;643    
;;;644      if (Result != USB_SUCCESS)
000666  b10c              CBZ      r4,|L1.1644|
;;;645      {
;;;646        ControlState = STALLED;
000668  2608              MOVS     r6,#8
;;;647        goto exit_NoData_Setup0;
00066a  e00c              B        |L1.1670|
                  |L1.1644|
;;;648      }
;;;649    
;;;650      ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
00066c  2606              MOVS     r6,#6
;;;651    
;;;652      USB_StatusIn();
00066e  2100              MOVS     r1,#0
000670  486c              LDR      r0,|L1.2084|
000672  6800              LDR      r0,[r0,#0]
000674  b280              UXTH     r0,r0
000676  1c80              ADDS     r0,r0,#2
000678  4a6b              LDR      r2,|L1.2088|
00067a  f8421010          STR      r1,[r2,r0,LSL #1]
00067e  2030              MOVS     r0,#0x30
000680  4967              LDR      r1,|L1.2080|
000682  8008              STRH     r0,[r1,#0]
;;;653    
;;;654    exit_NoData_Setup0:
000684  bf00              NOP      
                  |L1.1670|
;;;655      pInformation->ControlState = ControlState;
000686  4964              LDR      r1,|L1.2072|
000688  6809              LDR      r1,[r1,#0]  ; pInformation
00068a  720e              STRB     r6,[r1,#8]
;;;656      return;
;;;657    }
00068c  bd70              POP      {r4-r6,pc}
;;;658    
                          ENDP

                  Data_Setup0 PROC
;;;665    *******************************************************************************/
;;;666    void Data_Setup0(void)
00068e  e92d5ff0          PUSH     {r4-r12,lr}
;;;667    {
;;;668      u8 *(*CopyRoutine)(u16);
;;;669      RESULT Result;
;;;670      u32 Request_No = pInformation->USBbRequest;
000692  4861              LDR      r0,|L1.2072|
000694  6800              LDR      r0,[r0,#0]  ; pInformation
000696  7846              LDRB     r6,[r0,#1]
;;;671    
;;;672      u32 Related_Endpoint, Reserved;
;;;673      u32 wOffset, Status;
;;;674    
;;;675    
;;;676    
;;;677      CopyRoutine = NULL;
000698  2400              MOVS     r4,#0
;;;678      wOffset = 0;
00069a  46a1              MOV      r9,r4
;;;679    
;;;680      if (Request_No == GET_DESCRIPTOR)
00069c  2e06              CMP      r6,#6
00069e  d11a              BNE      |L1.1750|
;;;681      {
;;;682        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
0006a0  485d              LDR      r0,|L1.2072|
0006a2  6800              LDR      r0,[r0,#0]  ; pInformation
0006a4  7800              LDRB     r0,[r0,#0]
0006a6  f0100f7f          TST      r0,#0x7f
0006aa  d113              BNE      |L1.1748|
;;;683        {
;;;684          u8 wValue1 = pInformation->USBwValue1;
0006ac  495a              LDR      r1,|L1.2072|
0006ae  6809              LDR      r1,[r1,#0]  ; pInformation
0006b0  7888              LDRB     r0,[r1,#2]
;;;685          if (wValue1 == DEVICE_DESCRIPTOR)
0006b2  2801              CMP      r0,#1
0006b4  d103              BNE      |L1.1726|
;;;686          {
;;;687            CopyRoutine = pProperty->GetDeviceDescriptor;
0006b6  495e              LDR      r1,|L1.2096|
0006b8  6809              LDR      r1,[r1,#0]  ; pProperty
0006ba  69cc              LDR      r4,[r1,#0x1c]
0006bc  e00a              B        |L1.1748|
                  |L1.1726|
;;;688          }
;;;689          else if (wValue1 == CONFIG_DESCRIPTOR)
0006be  2802              CMP      r0,#2
0006c0  d103              BNE      |L1.1738|
;;;690          {
;;;691            CopyRoutine = pProperty->GetConfigDescriptor;
0006c2  495b              LDR      r1,|L1.2096|
0006c4  6809              LDR      r1,[r1,#0]  ; pProperty
0006c6  6a0c              LDR      r4,[r1,#0x20]
0006c8  e004              B        |L1.1748|
                  |L1.1738|
;;;692          }
;;;693          else if (wValue1 == STRING_DESCRIPTOR)
0006ca  2803              CMP      r0,#3
0006cc  d102              BNE      |L1.1748|
;;;694          {
;;;695            CopyRoutine = pProperty->GetStringDescriptor;
0006ce  4958              LDR      r1,|L1.2096|
0006d0  6809              LDR      r1,[r1,#0]  ; pProperty
0006d2  6a4c              LDR      r4,[r1,#0x24]
                  |L1.1748|
;;;696          }  /* End of GET_DESCRIPTOR */
;;;697        }
0006d4  e099              B        |L1.2058|
                  |L1.1750|
;;;698      }
;;;699    
;;;700      /*GET STATUS*/
;;;701      else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
0006d6  2e00              CMP      r6,#0
0006d8  d167              BNE      |L1.1962|
0006da  484f              LDR      r0,|L1.2072|
0006dc  6800              LDR      r0,[r0,#0]  ; pInformation
0006de  8840              LDRH     r0,[r0,#2]
0006e0  2800              CMP      r0,#0
0006e2  d162              BNE      |L1.1962|
;;;702               && (pInformation->USBwLength == 0x0002)
0006e4  484c              LDR      r0,|L1.2072|
0006e6  6800              LDR      r0,[r0,#0]  ; pInformation
0006e8  88c0              LDRH     r0,[r0,#6]
0006ea  2802              CMP      r0,#2
0006ec  d15d              BNE      |L1.1962|
;;;703               && (pInformation->USBwIndex1 == 0))
0006ee  484a              LDR      r0,|L1.2072|
0006f0  6800              LDR      r0,[r0,#0]  ; pInformation
0006f2  7900              LDRB     r0,[r0,#4]
0006f4  2800              CMP      r0,#0
0006f6  d158              BNE      |L1.1962|
;;;704      {
;;;705        /* GET STATUS for Device*/
;;;706        if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
0006f8  4847              LDR      r0,|L1.2072|
0006fa  6800              LDR      r0,[r0,#0]  ; pInformation
0006fc  7800              LDRB     r0,[r0,#0]
0006fe  f0100f7f          TST      r0,#0x7f
000702  d106              BNE      |L1.1810|
;;;707            && (pInformation->USBwIndex == 0))
000704  4844              LDR      r0,|L1.2072|
000706  6800              LDR      r0,[r0,#0]  ; pInformation
000708  8880              LDRH     r0,[r0,#4]
00070a  b910              CBNZ     r0,|L1.1810|
;;;708        {
;;;709          CopyRoutine = Standard_GetStatus;
00070c  f2af642f          ADR      r4,Standard_GetStatus + 1
000710  e07b              B        |L1.2058|
                  |L1.1810|
;;;710        }
;;;711    
;;;712        /* GET STATUS for Interface*/
;;;713        else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000712  4841              LDR      r0,|L1.2072|
000714  6800              LDR      r0,[r0,#0]  ; pInformation
000716  7800              LDRB     r0,[r0,#0]
000718  f000007f          AND      r0,r0,#0x7f
00071c  2801              CMP      r0,#1
00071e  d111              BNE      |L1.1860|
;;;714        {
;;;715          if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
000720  493d              LDR      r1,|L1.2072|
000722  6809              LDR      r1,[r1,#0]  ; pInformation
000724  7948              LDRB     r0,[r1,#5]
000726  4942              LDR      r1,|L1.2096|
000728  6809              LDR      r1,[r1,#0]  ; pProperty
00072a  698a              LDR      r2,[r1,#0x18]
00072c  2100              MOVS     r1,#0
00072e  4790              BLX      r2
000730  2800              CMP      r0,#0
000732  d16a              BNE      |L1.2058|
;;;716              && (pInformation->Current_Configuration != 0))
000734  4838              LDR      r0,|L1.2072|
000736  6800              LDR      r0,[r0,#0]  ; pInformation
000738  7a80              LDRB     r0,[r0,#0xa]
00073a  2800              CMP      r0,#0
00073c  d065              BEQ      |L1.2058|
;;;717          {
;;;718            CopyRoutine = Standard_GetStatus;
00073e  f2af645f          ADR      r4,Standard_GetStatus + 1
000742  e062              B        |L1.2058|
                  |L1.1860|
;;;719          }
;;;720        }
;;;721    
;;;722        /* GET STATUS for EndPoint*/
;;;723        else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
000744  4834              LDR      r0,|L1.2072|
000746  6800              LDR      r0,[r0,#0]  ; pInformation
000748  7800              LDRB     r0,[r0,#0]
00074a  f000007f          AND      r0,r0,#0x7f
00074e  2802              CMP      r0,#2
000750  d15b              BNE      |L1.2058|
;;;724        {
;;;725          Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
000752  4831              LDR      r0,|L1.2072|
000754  6800              LDR      r0,[r0,#0]  ; pInformation
000756  7940              LDRB     r0,[r0,#5]
000758  f000070f          AND      r7,r0,#0xf
;;;726          Reserved = pInformation->USBwIndex0 & 0x70;
00075c  482e              LDR      r0,|L1.2072|
00075e  6800              LDR      r0,[r0,#0]  ; pInformation
000760  7940              LDRB     r0,[r0,#5]
000762  f0000870          AND      r8,r0,#0x70
;;;727    
;;;728          if (ValBit(pInformation->USBwIndex0, 7))
000766  482c              LDR      r0,|L1.2072|
000768  6800              LDR      r0,[r0,#0]  ; pInformation
00076a  7940              LDRB     r0,[r0,#5]
00076c  f0100f80          TST      r0,#0x80
000770  d007              BEQ      |L1.1922|
;;;729          {
;;;730            /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;731            is Disabled*/
;;;732            Status = _GetEPTxStatus(Related_Endpoint);
000772  4830              LDR      r0,|L1.2100|
000774  eb000087          ADD      r0,r0,r7,LSL #2
000778  f8d00c00          LDR      r0,[r0,#0xc00]
00077c  f0000a30          AND      r10,r0,#0x30
000780  e006              B        |L1.1936|
                  |L1.1922|
;;;733          }
;;;734          else
;;;735          {
;;;736            Status = _GetEPRxStatus(Related_Endpoint);
000782  482c              LDR      r0,|L1.2100|
000784  eb000087          ADD      r0,r0,r7,LSL #2
000788  f8d00c00          LDR      r0,[r0,#0xc00]
00078c  f4005a40          AND      r10,r0,#0x3000
                  |L1.1936|
;;;737          }
;;;738    
;;;739          if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
000790  4829              LDR      r0,|L1.2104|
000792  7800              LDRB     r0,[r0,#0]  ; Device_Table
000794  42b8              CMP      r0,r7
000796  d938              BLS      |L1.2058|
000798  f1b80f00          CMP      r8,#0
00079c  d135              BNE      |L1.2058|
;;;740              && (Status != 0))
00079e  f1ba0f00          CMP      r10,#0
0007a2  d032              BEQ      |L1.2058|
;;;741          {
;;;742            CopyRoutine = Standard_GetStatus;
0007a4  f2af64c7          ADR      r4,Standard_GetStatus + 1
0007a8  e02f              B        |L1.2058|
                  |L1.1962|
;;;743          }
;;;744        }
;;;745    
;;;746      }
;;;747    
;;;748      /*GET CONFIGURATION*/
;;;749      else if (Request_No == GET_CONFIGURATION)
0007aa  2e08              CMP      r6,#8
0007ac  d108              BNE      |L1.1984|
;;;750      {
;;;751        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
0007ae  481a              LDR      r0,|L1.2072|
0007b0  6800              LDR      r0,[r0,#0]  ; pInformation
0007b2  7800              LDRB     r0,[r0,#0]
0007b4  f0100f7f          TST      r0,#0x7f
0007b8  d127              BNE      |L1.2058|
;;;752        {
;;;753          CopyRoutine = Standard_GetConfiguration;
0007ba  f2af74bb          ADR      r4,Standard_GetConfiguration + 1
0007be  e024              B        |L1.2058|
                  |L1.1984|
;;;754        }
;;;755      }
;;;756      /*GET INTERFACE*/
;;;757      else if (Request_No == GET_INTERFACE)
0007c0  2e0a              CMP      r6,#0xa
0007c2  d122              BNE      |L1.2058|
;;;758      {
;;;759        if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
0007c4  4814              LDR      r0,|L1.2072|
0007c6  6800              LDR      r0,[r0,#0]  ; pInformation
0007c8  7800              LDRB     r0,[r0,#0]
0007ca  f000007f          AND      r0,r0,#0x7f
0007ce  2801              CMP      r0,#1
0007d0  d11b              BNE      |L1.2058|
;;;760            && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
0007d2  4811              LDR      r0,|L1.2072|
0007d4  6800              LDR      r0,[r0,#0]  ; pInformation
0007d6  7a80              LDRB     r0,[r0,#0xa]
0007d8  b1b8              CBZ      r0,|L1.2058|
0007da  480f              LDR      r0,|L1.2072|
0007dc  6800              LDR      r0,[r0,#0]  ; pInformation
0007de  8840              LDRH     r0,[r0,#2]
0007e0  b998              CBNZ     r0,|L1.2058|
;;;761            && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
0007e2  480d              LDR      r0,|L1.2072|
0007e4  6800              LDR      r0,[r0,#0]  ; pInformation
0007e6  7900              LDRB     r0,[r0,#4]
0007e8  b978              CBNZ     r0,|L1.2058|
0007ea  480b              LDR      r0,|L1.2072|
0007ec  6800              LDR      r0,[r0,#0]  ; pInformation
0007ee  88c0              LDRH     r0,[r0,#6]
0007f0  2801              CMP      r0,#1
0007f2  d10a              BNE      |L1.2058|
;;;762            && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
0007f4  4908              LDR      r1,|L1.2072|
0007f6  6809              LDR      r1,[r1,#0]  ; pInformation
0007f8  7948              LDRB     r0,[r1,#5]
0007fa  490d              LDR      r1,|L1.2096|
0007fc  6809              LDR      r1,[r1,#0]  ; pProperty
0007fe  698a              LDR      r2,[r1,#0x18]
000800  2100              MOVS     r1,#0
000802  4790              BLX      r2
000804  b908              CBNZ     r0,|L1.2058|
;;;763        {
;;;764          CopyRoutine = Standard_GetInterface;
000806  f2af74a9          ADR      r4,Standard_GetInterface + 1
                  |L1.2058|
;;;765        }
;;;766    
;;;767      }
;;;768      
;;;769      if (CopyRoutine)
00080a  b1ec              CBZ      r4,|L1.2120|
;;;770      {
;;;771        pInformation->Ctrl_Info.Usb_wOffset = wOffset;
00080c  4802              LDR      r0,|L1.2072|
00080e  6800              LDR      r0,[r0,#0]  ; pInformation
000810  f8a09012          STRH     r9,[r0,#0x12]
;;;772        pInformation->Ctrl_Info.CopyData = CopyRoutine;
000814  4800              LDR      r0,|L1.2072|
000816  e011              B        |L1.2108|
                  |L1.2072|
                          DCD      pInformation
                  |L1.2076|
                          DCD      SaveRState
                  |L1.2080|
                          DCD      SaveTState
                  |L1.2084|
                          DCD      0x40005c50
                  |L1.2088|
                          DCD      0x40006000
                  |L1.2092|
                          DCD      Data_Mul_MaxPacketSize
                  |L1.2096|
                          DCD      pProperty
                  |L1.2100|
                          DCD      0x40005000
                  |L1.2104|
                          DCD      Device_Table
                  |L1.2108|
00083c  6800              LDR      r0,[r0,#0]  ; pInformation
00083e  6184              STR      r4,[r0,#0x18]
;;;773        /* sb in the original the cast to word was directly */
;;;774        /* now the cast is made step by step */
;;;775        (*CopyRoutine)(0);
000840  2000              MOVS     r0,#0
000842  47a0              BLX      r4
;;;776        Result = USB_SUCCESS;
000844  2500              MOVS     r5,#0
000846  e00f              B        |L1.2152|
                  |L1.2120|
;;;777      }
;;;778      else
;;;779      {
;;;780        Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
000848  4aa9              LDR      r2,|L1.2800|
00084a  6812              LDR      r2,[r2,#0]  ; pInformation
00084c  7850              LDRB     r0,[r2,#1]
00084e  4aa9              LDR      r2,|L1.2804|
000850  6812              LDR      r2,[r2,#0]  ; pProperty
000852  6911              LDR      r1,[r2,#0x10]
000854  4788              BLX      r1
000856  4605              MOV      r5,r0
;;;781        if (Result == USB_NOT_READY)
000858  2d03              CMP      r5,#3
00085a  d105              BNE      |L1.2152|
;;;782        {
;;;783          pInformation->ControlState = PAUSE;
00085c  2009              MOVS     r0,#9
00085e  49a4              LDR      r1,|L1.2800|
000860  6809              LDR      r1,[r1,#0]  ; pInformation
000862  7208              STRB     r0,[r1,#8]
                  |L1.2148|
;;;784          return;
;;;785        }
;;;786      }
;;;787    
;;;788      if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
;;;789      {
;;;790        /* Data is not ready, wait it */
;;;791        pInformation->ControlState = PAUSE;
;;;792        return;
;;;793      }
;;;794      if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
;;;795      {
;;;796        /* Unsupported request */
;;;797        pInformation->ControlState = STALLED;
;;;798        return;
;;;799      }
;;;800    
;;;801    
;;;802      if (ValBit(pInformation->USBbmRequestType, 7))
;;;803      {
;;;804        /* Device ==> Host */
;;;805        vu32 wLength = pInformation->USBwLength;
;;;806         
;;;807        /* Restrict the data length to be the one host asks */
;;;808        if (pInformation->Ctrl_Info.Usb_wLength > wLength)
;;;809        {
;;;810          pInformation->Ctrl_Info.Usb_wLength = wLength;
;;;811        }
;;;812        
;;;813        else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
;;;814        {
;;;815          if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
;;;816          {
;;;817            Data_Mul_MaxPacketSize = FALSE;
;;;818          }
;;;819          else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
;;;820          {
;;;821            Data_Mul_MaxPacketSize = TRUE;
;;;822          }
;;;823        }   
;;;824    
;;;825        pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
;;;826        DataStageIn();
;;;827      }
;;;828      else
;;;829      {
;;;830        pInformation->ControlState = OUT_DATA;
;;;831        vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
;;;832      }
;;;833    
;;;834      return;
;;;835    }
000864  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2152|
000868  48a1              LDR      r0,|L1.2800|
00086a  6800              LDR      r0,[r0,#0]            ;788  ; pInformation
00086c  8a00              LDRH     r0,[r0,#0x10]         ;788
00086e  f5a0417f          SUB      r1,r0,#0xff00         ;788
000872  39ff              SUBS     r1,r1,#0xff           ;788
000874  d104              BNE      |L1.2176|
000876  2009              MOVS     r0,#9                 ;791
000878  499d              LDR      r1,|L1.2800|
00087a  6809              LDR      r1,[r1,#0]            ;791  ; pInformation
00087c  7208              STRB     r0,[r1,#8]            ;791
00087e  e7f1              B        |L1.2148|
                  |L1.2176|
000880  2d02              CMP      r5,#2                 ;794
000882  d003              BEQ      |L1.2188|
000884  489a              LDR      r0,|L1.2800|
000886  6800              LDR      r0,[r0,#0]            ;794  ; pInformation
000888  8a00              LDRH     r0,[r0,#0x10]         ;794
00088a  b920              CBNZ     r0,|L1.2198|
                  |L1.2188|
00088c  2008              MOVS     r0,#8                 ;797
00088e  4998              LDR      r1,|L1.2800|
000890  6809              LDR      r1,[r1,#0]            ;797  ; pInformation
000892  7208              STRB     r0,[r1,#8]            ;797
000894  e7e6              B        |L1.2148|
                  |L1.2198|
000896  4896              LDR      r0,|L1.2800|
000898  6800              LDR      r0,[r0,#0]            ;802  ; pInformation
00089a  7800              LDRB     r0,[r0,#0]            ;802
00089c  f0100f80          TST      r0,#0x80              ;802
0008a0  d03b              BEQ      |L1.2330|
0008a2  4893              LDR      r0,|L1.2800|
0008a4  6800              LDR      r0,[r0,#0]            ;805  ; pInformation
0008a6  f8b0b006          LDRH     r11,[r0,#6]           ;805
0008aa  4891              LDR      r0,|L1.2800|
0008ac  6800              LDR      r0,[r0,#0]            ;808  ; pInformation
0008ae  8a00              LDRH     r0,[r0,#0x10]         ;808
0008b0  4558              CMP      r0,r11                ;808
0008b2  d904              BLS      |L1.2238|
0008b4  498e              LDR      r1,|L1.2800|
0008b6  6809              LDR      r1,[r1,#0]            ;810  ; pInformation
0008b8  f8a1b010          STRH     r11,[r1,#0x10]        ;810
0008bc  e023              B        |L1.2310|
                  |L1.2238|
0008be  488c              LDR      r0,|L1.2800|
0008c0  6800              LDR      r0,[r0,#0]            ;813  ; pInformation
0008c2  8a00              LDRH     r0,[r0,#0x10]         ;813
0008c4  498a              LDR      r1,|L1.2800|
0008c6  6809              LDR      r1,[r1,#0]            ;813  ; pInformation
0008c8  88c9              LDRH     r1,[r1,#6]            ;813
0008ca  4288              CMP      r0,r1                 ;813
0008cc  da1b              BGE      |L1.2310|
0008ce  4888              LDR      r0,|L1.2800|
0008d0  6800              LDR      r0,[r0,#0]            ;815  ; pInformation
0008d2  8a00              LDRH     r0,[r0,#0x10]         ;815
0008d4  4987              LDR      r1,|L1.2804|
0008d6  6809              LDR      r1,[r1,#0]            ;815  ; pProperty
0008d8  f891102c          LDRB     r1,[r1,#0x2c]         ;815
0008dc  4288              CMP      r0,r1                 ;815
0008de  da03              BGE      |L1.2280|
0008e0  2000              MOVS     r0,#0                 ;817
0008e2  4985              LDR      r1,|L1.2808|
0008e4  7008              STRB     r0,[r1,#0]            ;817
0008e6  e00e              B        |L1.2310|
                  |L1.2280|
0008e8  4881              LDR      r0,|L1.2800|
0008ea  6800              LDR      r0,[r0,#0]            ;819  ; pInformation
0008ec  8a00              LDRH     r0,[r0,#0x10]         ;819
0008ee  4981              LDR      r1,|L1.2804|
0008f0  6809              LDR      r1,[r1,#0]            ;819  ; pProperty
0008f2  f891102c          LDRB     r1,[r1,#0x2c]         ;819
0008f6  fb90f2f1          SDIV     r2,r0,r1              ;819
0008fa  fb010012          MLS      r0,r1,r2,r0           ;819
0008fe  b910              CBNZ     r0,|L1.2310|
000900  2001              MOVS     r0,#1                 ;821
000902  497d              LDR      r1,|L1.2808|
000904  7008              STRB     r0,[r1,#0]            ;821
                  |L1.2310|
000906  487b              LDR      r0,|L1.2804|
000908  6800              LDR      r0,[r0,#0]            ;825  ; pProperty
00090a  f890102c          LDRB     r1,[r0,#0x2c]         ;825
00090e  4878              LDR      r0,|L1.2800|
000910  6800              LDR      r0,[r0,#0]            ;825  ; pInformation
000912  8281              STRH     r1,[r0,#0x14]         ;825
000914  f7fffffe          BL       DataStageIn
000918  e006              B        |L1.2344|
                  |L1.2330|
00091a  2003              MOVS     r0,#3                 ;830
00091c  4974              LDR      r1,|L1.2800|
00091e  6809              LDR      r1,[r1,#0]            ;830  ; pInformation
000920  7208              STRB     r0,[r1,#8]            ;830
000922  0300              LSLS     r0,r0,#12             ;831
000924  4975              LDR      r1,|L1.2812|
000926  8008              STRH     r0,[r1,#0]            ;831
                  |L1.2344|
000928  e79c              B        |L1.2148|
;;;836    
                          ENDP

                  Post0_Process PROC
;;;968    *******************************************************************************/
;;;969    u8 Post0_Process(void)
00092a  b510              PUSH     {r4,lr}
;;;970    {
;;;971      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
00092c  4874              LDR      r0,|L1.2816|
00092e  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000932  2000              MOVS     r0,#0
000934  f7fffffe          BL       SetEPRxCount
;;;972    
;;;973      if (pInformation->ControlState == STALLED)
000938  486d              LDR      r0,|L1.2800|
00093a  6800              LDR      r0,[r0,#0]  ; pInformation
00093c  7a00              LDRB     r0,[r0,#8]
00093e  2808              CMP      r0,#8
000940  d105              BNE      |L1.2382|
;;;974      {
;;;975        vSetEPRxStatus(EP_RX_STALL);
000942  0240              LSLS     r0,r0,#9
000944  496d              LDR      r1,|L1.2812|
000946  8008              STRH     r0,[r1,#0]
;;;976        vSetEPTxStatus(EP_TX_STALL);
000948  2010              MOVS     r0,#0x10
00094a  496e              LDR      r1,|L1.2820|
00094c  8008              STRH     r0,[r1,#0]
                  |L1.2382|
;;;977      }
;;;978    
;;;979      return (pInformation->ControlState == PAUSE);
00094e  4868              LDR      r0,|L1.2800|
000950  6800              LDR      r0,[r0,#0]  ; pInformation
000952  7a00              LDRB     r0,[r0,#8]
000954  2809              CMP      r0,#9
000956  d101              BNE      |L1.2396|
000958  2001              MOVS     r0,#1
00095a  e000              B        |L1.2398|
                  |L1.2396|
00095c  2000              MOVS     r0,#0
                  |L1.2398|
00095e  b2c0              UXTB     r0,r0
;;;980    }
000960  bd10              POP      {r4,pc}
;;;981    
                          ENDP

                  Setup0_Process PROC
;;;843    *******************************************************************************/
;;;844    u8 Setup0_Process(void)
000962  b508              PUSH     {r3,lr}
;;;845    {
;;;846    
;;;847      union
;;;848      {
;;;849        u8* b;
;;;850        u16* w;
;;;851      } pBuf;
;;;852    
;;;853      pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
000964  4868              LDR      r0,|L1.2824|
000966  6800              LDR      r0,[r0,#0]
000968  b280              UXTH     r0,r0
00096a  1d00              ADDS     r0,r0,#4
00096c  4967              LDR      r1,|L1.2828|
00096e  f8510010          LDR      r0,[r1,r0,LSL #1]
000972  b280              UXTH     r0,r0
000974  eb010040          ADD      r0,r1,r0,LSL #1
000978  9000              STR      r0,[sp,#0]
;;;854    
;;;855      if (pInformation->ControlState != PAUSE)
00097a  485d              LDR      r0,|L1.2800|
00097c  6800              LDR      r0,[r0,#0]  ; pInformation
00097e  7a00              LDRB     r0,[r0,#8]
000980  2809              CMP      r0,#9
000982  d02f              BEQ      |L1.2532|
;;;856      {
;;;857        pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
000984  9800              LDR      r0,[sp,#0]
000986  7800              LDRB     r0,[r0,#0]
000988  4959              LDR      r1,|L1.2800|
00098a  6809              LDR      r1,[r1,#0]  ; pInformation
00098c  7008              STRB     r0,[r1,#0]
00098e  9800              LDR      r0,[sp,#0]
000990  1c40              ADDS     r0,r0,#1
000992  9000              STR      r0,[sp,#0]
;;;858        pInformation->USBbRequest = *pBuf.b++; /* bRequest */
000994  9800              LDR      r0,[sp,#0]
000996  7800              LDRB     r0,[r0,#0]
000998  4955              LDR      r1,|L1.2800|
00099a  6809              LDR      r1,[r1,#0]  ; pInformation
00099c  7048              STRB     r0,[r1,#1]
00099e  9800              LDR      r0,[sp,#0]
0009a0  1c40              ADDS     r0,r0,#1
0009a2  9000              STR      r0,[sp,#0]
;;;859        pBuf.w++;  /* word not accessed because of 32 bits addressing */
0009a4  9800              LDR      r0,[sp,#0]
0009a6  1c80              ADDS     r0,r0,#2
0009a8  9000              STR      r0,[sp,#0]
;;;860        pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
0009aa  9900              LDR      r1,[sp,#0]
0009ac  f8310b02          LDRH     r0,[r1],#2
0009b0  9100              STR      r1,[sp,#0]
0009b2  f7fffffe          BL       ByteSwap
0009b6  494e              LDR      r1,|L1.2800|
0009b8  6809              LDR      r1,[r1,#0]  ; pInformation
0009ba  8048              STRH     r0,[r1,#2]
;;;861        pBuf.w++;  /* word not accessed because of 32 bits addressing */
0009bc  9800              LDR      r0,[sp,#0]
0009be  1c80              ADDS     r0,r0,#2
0009c0  9000              STR      r0,[sp,#0]
;;;862        pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
0009c2  9900              LDR      r1,[sp,#0]
0009c4  f8310b02          LDRH     r0,[r1],#2
0009c8  9100              STR      r1,[sp,#0]
0009ca  f7fffffe          BL       ByteSwap
0009ce  4948              LDR      r1,|L1.2800|
0009d0  6809              LDR      r1,[r1,#0]  ; pInformation
0009d2  8088              STRH     r0,[r1,#4]
;;;863        pBuf.w++;  /* word not accessed because of 32 bits addressing */
0009d4  9800              LDR      r0,[sp,#0]
0009d6  1c80              ADDS     r0,r0,#2
0009d8  9000              STR      r0,[sp,#0]
;;;864        pInformation->USBwLength = *pBuf.w; /* wLength */
0009da  9800              LDR      r0,[sp,#0]
0009dc  8800              LDRH     r0,[r0,#0]
0009de  4944              LDR      r1,|L1.2800|
0009e0  6809              LDR      r1,[r1,#0]  ; pInformation
0009e2  80c8              STRH     r0,[r1,#6]
                  |L1.2532|
;;;865      }
;;;866    
;;;867      pInformation->ControlState = SETTING_UP;
0009e4  2001              MOVS     r0,#1
0009e6  4942              LDR      r1,|L1.2800|
0009e8  6809              LDR      r1,[r1,#0]  ; pInformation
0009ea  7208              STRB     r0,[r1,#8]
;;;868      if (pInformation->USBwLength == 0)
0009ec  4840              LDR      r0,|L1.2800|
0009ee  6800              LDR      r0,[r0,#0]  ; pInformation
0009f0  88c0              LDRH     r0,[r0,#6]
0009f2  b910              CBNZ     r0,|L1.2554|
;;;869      {
;;;870        /* Setup with no data stage */
;;;871        NoData_Setup0();
0009f4  f7fffffe          BL       NoData_Setup0
0009f8  e001              B        |L1.2558|
                  |L1.2554|
;;;872      }
;;;873      else
;;;874      {
;;;875        /* Setup with data stage */
;;;876        Data_Setup0();
0009fa  f7fffffe          BL       Data_Setup0
                  |L1.2558|
;;;877      }
;;;878      return Post0_Process();
0009fe  f7fffffe          BL       Post0_Process
;;;879    }
000a02  bd08              POP      {r3,pc}
;;;880    
                          ENDP

                  SetDeviceAddress PROC
;;;988    *******************************************************************************/
;;;989    void SetDeviceAddress(u8 Val)
000a04  b530              PUSH     {r4,r5,lr}
;;;990    {
;;;991      u32 i;
;;;992      u32 nEP = Device_Table.Total_Endpoint;
000a06  4b42              LDR      r3,|L1.2832|
000a08  781a              LDRB     r2,[r3,#0]  ; Device_Table
;;;993    
;;;994      /* set address in every used endpoint */
;;;995      for (i = 0; i < nEP; i++)
000a0a  2100              MOVS     r1,#0
000a0c  e012              B        |L1.2612|
                  |L1.2574|
;;;996      {
;;;997        _SetEPAddress((u8)i, (u8)i);
000a0e  b2cb              UXTB     r3,r1
000a10  4c40              LDR      r4,|L1.2836|
000a12  eb040383          ADD      r3,r4,r3,LSL #2
000a16  f8d33c00          LDR      r3,[r3,#0xc00]
000a1a  b29b              UXTH     r3,r3
000a1c  f648748f          MOV      r4,#0x8f8f
000a20  4023              ANDS     r3,r3,r4
000a22  b2cc              UXTB     r4,r1
000a24  4323              ORRS     r3,r3,r4
000a26  b2cc              UXTB     r4,r1
000a28  4d3a              LDR      r5,|L1.2836|
000a2a  eb050484          ADD      r4,r5,r4,LSL #2
000a2e  f8c43c00          STR      r3,[r4,#0xc00]
000a32  1c49              ADDS     r1,r1,#1              ;995
                  |L1.2612|
000a34  4291              CMP      r1,r2                 ;995
000a36  d3ea              BCC      |L1.2574|
;;;998      } /* for */
;;;999      _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
000a38  f0400380          ORR      r3,r0,#0x80
000a3c  4c32              LDR      r4,|L1.2824|
000a3e  1f24              SUBS     r4,r4,#4
000a40  6023              STR      r3,[r4,#0]
;;;1000   }
000a42  bd30              POP      {r4,r5,pc}
;;;1001   
                          ENDP

                  In0_Process PROC
;;;887    *******************************************************************************/
;;;888    u8 In0_Process(void)
000a44  b510              PUSH     {r4,lr}
;;;889    {
;;;890      u32 ControlState = pInformation->ControlState;
000a46  482a              LDR      r0,|L1.2800|
000a48  6800              LDR      r0,[r0,#0]  ; pInformation
000a4a  7a04              LDRB     r4,[r0,#8]
;;;891    
;;;892      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000a4c  2c02              CMP      r4,#2
000a4e  d001              BEQ      |L1.2644|
000a50  2c04              CMP      r4,#4
000a52  d105              BNE      |L1.2656|
                  |L1.2644|
;;;893      {
;;;894        DataStageIn();
000a54  f7fffffe          BL       DataStageIn
;;;895        /* ControlState may be changed outside the function */
;;;896        ControlState = pInformation->ControlState;
000a58  4825              LDR      r0,|L1.2800|
000a5a  6800              LDR      r0,[r0,#0]  ; pInformation
000a5c  7a04              LDRB     r4,[r0,#8]
000a5e  e01c              B        |L1.2714|
                  |L1.2656|
;;;897      }
;;;898    
;;;899      else if (ControlState == WAIT_STATUS_IN)
000a60  2c06              CMP      r4,#6
000a62  d119              BNE      |L1.2712|
;;;900      {
;;;901        if ((pInformation->USBbRequest == SET_ADDRESS) &&
000a64  4822              LDR      r0,|L1.2800|
000a66  6800              LDR      r0,[r0,#0]  ; pInformation
000a68  7840              LDRB     r0,[r0,#1]
000a6a  2805              CMP      r0,#5
000a6c  d10e              BNE      |L1.2700|
;;;902            (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
000a6e  4820              LDR      r0,|L1.2800|
000a70  6800              LDR      r0,[r0,#0]  ; pInformation
000a72  7800              LDRB     r0,[r0,#0]
000a74  f0100f7f          TST      r0,#0x7f
000a78  d108              BNE      |L1.2700|
;;;903        {
;;;904          SetDeviceAddress(pInformation->USBwValue0);
000a7a  491d              LDR      r1,|L1.2800|
000a7c  6809              LDR      r1,[r1,#0]  ; pInformation
000a7e  78c8              LDRB     r0,[r1,#3]
000a80  f7fffffe          BL       SetDeviceAddress
;;;905          pUser_Standard_Requests->User_SetDeviceAddress();
000a84  4924              LDR      r1,|L1.2840|
000a86  6809              LDR      r1,[r1,#0]  ; pUser_Standard_Requests
000a88  6a08              LDR      r0,[r1,#0x20]
000a8a  4780              BLX      r0
                  |L1.2700|
;;;906        }
;;;907        (*pProperty->Process_Status_IN)();
000a8c  4919              LDR      r1,|L1.2804|
000a8e  6809              LDR      r1,[r1,#0]  ; pProperty
000a90  6888              LDR      r0,[r1,#8]
000a92  4780              BLX      r0
;;;908        ControlState = STALLED;
000a94  2408              MOVS     r4,#8
000a96  e000              B        |L1.2714|
                  |L1.2712|
;;;909      }
;;;910    
;;;911      else
;;;912      {
;;;913        ControlState = STALLED;
000a98  2408              MOVS     r4,#8
                  |L1.2714|
;;;914      }
;;;915    
;;;916      pInformation->ControlState = ControlState;
000a9a  4915              LDR      r1,|L1.2800|
000a9c  6809              LDR      r1,[r1,#0]  ; pInformation
000a9e  720c              STRB     r4,[r1,#8]
;;;917    
;;;918      return Post0_Process();
000aa0  f7fffffe          BL       Post0_Process
;;;919    }
000aa4  bd10              POP      {r4,pc}
;;;920    
                          ENDP

                  Out0_Process PROC
;;;927    *******************************************************************************/
;;;928    u8 Out0_Process(void)
000aa6  b510              PUSH     {r4,lr}
;;;929    {
;;;930      u32 ControlState = pInformation->ControlState;
000aa8  4811              LDR      r0,|L1.2800|
000aaa  6800              LDR      r0,[r0,#0]  ; pInformation
000aac  7a04              LDRB     r4,[r0,#8]
;;;931    
;;;932      if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
000aae  2c03              CMP      r4,#3
000ab0  d001              BEQ      |L1.2742|
000ab2  2c05              CMP      r4,#5
000ab4  d105              BNE      |L1.2754|
                  |L1.2742|
;;;933      {
;;;934        DataStageOut();
000ab6  f7fffffe          BL       DataStageOut
;;;935        ControlState = pInformation->ControlState; /* may be changed outside the function */
000aba  480d              LDR      r0,|L1.2800|
000abc  6800              LDR      r0,[r0,#0]  ; pInformation
000abe  7a04              LDRB     r4,[r0,#8]
000ac0  e00e              B        |L1.2784|
                  |L1.2754|
;;;936      }
;;;937    
;;;938      else if (ControlState == WAIT_STATUS_OUT)
000ac2  2c07              CMP      r4,#7
000ac4  d105              BNE      |L1.2770|
;;;939      {
;;;940        (*pProperty->Process_Status_OUT)();
000ac6  490b              LDR      r1,|L1.2804|
000ac8  6809              LDR      r1,[r1,#0]  ; pProperty
000aca  68c8              LDR      r0,[r1,#0xc]
000acc  4780              BLX      r0
;;;941        ControlState = STALLED;
000ace  2408              MOVS     r4,#8
000ad0  e006              B        |L1.2784|
                  |L1.2770|
;;;942      }
;;;943    
;;;944      else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000ad2  2c02              CMP      r4,#2
000ad4  d001              BEQ      |L1.2778|
000ad6  2c04              CMP      r4,#4
000ad8  d101              BNE      |L1.2782|
                  |L1.2778|
;;;945      {
;;;946        /* host aborts the transfer before finish */
;;;947        ControlState = STALLED;
000ada  2408              MOVS     r4,#8
000adc  e000              B        |L1.2784|
                  |L1.2782|
;;;948      }
;;;949    
;;;950      /* Unexpect state, STALL the endpoint */
;;;951      else
;;;952      {
;;;953        ControlState = STALLED;
000ade  2408              MOVS     r4,#8
                  |L1.2784|
;;;954      }
;;;955    
;;;956      pInformation->ControlState = ControlState;
000ae0  4903              LDR      r1,|L1.2800|
000ae2  6809              LDR      r1,[r1,#0]  ; pInformation
000ae4  720c              STRB     r4,[r1,#8]
;;;957    
;;;958      return Post0_Process();
000ae6  f7fffffe          BL       Post0_Process
;;;959    }
000aea  bd10              POP      {r4,pc}
;;;960    
                          ENDP

                  NOP_Process PROC
;;;1008   *******************************************************************************/
;;;1009   void NOP_Process(void)
000aec  4770              BX       lr
;;;1010   {
;;;1011   }
;;;1012   
                          ENDP

000aee  0000              DCW      0x0000
                  |L1.2800|
                          DCD      pInformation
                  |L1.2804|
                          DCD      pProperty
                  |L1.2808|
                          DCD      Data_Mul_MaxPacketSize
                  |L1.2812|
                          DCD      SaveRState
                  |L1.2816|
                          DCD      Device_Property
                  |L1.2820|
                          DCD      SaveTState
                  |L1.2824|
                          DCD      0x40005c50
                  |L1.2828|
                          DCD      0x40006000
                  |L1.2832|
                          DCD      Device_Table
                  |L1.2836|
                          DCD      0x40005000
                  |L1.2840|
                          DCD      pUser_Standard_Requests

                          AREA ||.data||, DATA, ALIGN=1

                  Data_Mul_MaxPacketSize
000000  0000              DCB      0x00,0x00
                  StatusInfo
000002  0000              DCB      0x00,0x00
